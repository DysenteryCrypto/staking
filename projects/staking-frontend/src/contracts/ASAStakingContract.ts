/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"ASAStakingContract","structs":{"UserStakeInfo":[{"name":"stakedAmount","type":"uint64"},{"name":"firstStakeTime","type":"uint64"},{"name":"lastStakeTime","type":"uint64"},{"name":"totalRewardsEarned","type":"uint64"},{"name":"rewardDebt","type":"uint64"}]},"methods":[{"name":"getUserStakeInfo","args":[{"type":"account","name":"userAddress"}],"returns":{"type":"(uint64,uint64,uint64,uint64,uint64)","struct":"UserStakeInfo"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Helper function to read user stake info from box storage","events":[],"recommendations":{}},{"name":"storeUserStakeInfo","args":[{"type":"account","name":"userAddress"},{"type":"(uint64,uint64,uint64,uint64,uint64)","struct":"UserStakeInfo","name":"stakeInfo"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Helper function to store user stake info in box storage","events":[],"recommendations":{}},{"name":"initialize","args":[{"type":"asset","name":"asset"},{"type":"account","name":"adminAddress"},{"type":"uint64","name":"minimumStake"},{"type":"uint64","name":"weeklyRewards"},{"type":"uint64","name":"rewardPeriod"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Initialize the contract with the ASA token ID and other parameters","events":[],"recommendations":{}},{"name":"optInToAsset","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Opt the contract into the ASA","events":[],"recommendations":{}},{"name":"stake","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Stake tokens\nRequires a companion ASA transfer transaction\nAutomatically claims pending rewards","events":[],"recommendations":{}},{"name":"withdraw","args":[{"type":"uint64","name":"amount"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Withdraw staked tokens\nAutomatically claims pending rewards","events":[],"recommendations":{}},{"name":"addRewards","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Add rewards to the reward pool\nOnly the admin can call this\nRequires a companion ASA transfer transaction with the rewards","events":[],"recommendations":{}},{"name":"getCurrentAPY","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Calculate current APY based on total staked amount","events":[],"recommendations":{}},{"name":"getPendingRewards","args":[{"type":"account","name":"userAddress"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Get pending rewards for a specific user","events":[],"recommendations":{}},{"name":"triggerRewardDistribution","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Trigger reward distribution manually (admin only)\nUpdates accumulated rewards per share if period has passed","events":[],"recommendations":{}},{"name":"updateAdmin","args":[{"type":"account","name":"newAdminAddress"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Update the admin address\nOnly the current admin can call this","events":[],"recommendations":{}},{"name":"getUserStats","args":[{"type":"account","name":"userAddress"}],"returns":{"type":"uint64[]"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Get current staking statistics for a user","events":[],"recommendations":{}},{"name":"getContractStats","args":[],"returns":{"type":"uint64[]"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Get contract global statistics","events":[],"recommendations":{}},{"name":"emergencyWithdrawRewards","args":[{"type":"uint64","name":"amount"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Emergency withdraw rewards from pool (admin only)","events":[],"recommendations":{}},{"name":"deleteUserBox","args":[{"type":"account","name":"userAddress"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Delete a user's box (for cleanup)\nCan only be called by the box owner or admin","events":[],"recommendations":{}},{"name":"updateWeeklyRewards","args":[{"type":"uint64","name":"newWeeklyRewards"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Update weekly rewards amount (admin only)","events":[],"recommendations":{}},{"name":"updateRewardPeriod","args":[{"type":"uint64","name":"newRewardPeriod"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Update reward period (admin only)","events":[],"recommendations":{}}],"arcs":[22,28],"desc":"ASA Staking Contract for Algorand with Fixed Weekly Reward Pool\n\nThis contract allows users to:\n- Stake an ASA token\n- Earn proportional rewards from a fixed weekly pool of 100,000 tokens\n- Add to their stake at any time\n- Withdraw part or all of their stake at any time\n- Claim rewards at any time\n- Dynamic APY that adjusts based on total staked amount\n\nThis implementation uses box storage to store user staking information\nand an accumulator pattern for gas-efficient reward distribution","networks":{},"state":{"schema":{"global":{"ints":8,"bytes":8},"local":{"ints":0,"bytes":0}},"keys":{"global":{"asset":{"keyType":"AVMString","valueType":"AVMUint64","key":"YXNzZXQ="},"adminAddress":{"keyType":"AVMString","valueType":"address","key":"YWRtaW5BZGRyZXNz"},"totalStaked":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxTdGFrZWQ="},"lastRewardTime":{"keyType":"AVMString","valueType":"AVMUint64","key":"bGFzdFJld2FyZFRpbWU="},"minimumStake":{"keyType":"AVMString","valueType":"AVMUint64","key":"bWluaW11bVN0YWtl"},"rewardPool":{"keyType":"AVMString","valueType":"AVMUint64","key":"cmV3YXJkUG9vbA=="},"accumulatedRewardsPerShare":{"keyType":"AVMString","valueType":"AVMUint64","key":"YWNjdW11bGF0ZWRSZXdhcmRzUGVyU2hhcmU="},"weeklyRewards":{"keyType":"AVMString","valueType":"AVMUint64","key":"d2Vla2x5UmV3YXJkcw=="},"rewardPeriod":{"keyType":"AVMString","valueType":"AVMUint64","key":"cmV3YXJkUGVyaW9k"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"stakers":{"keyType":"address","valueType":"UserStakeInfo","prefix":"c3Rha2Vycw=="}}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[886],"errorMessage":"Already initialized"},{"pc":[1018,1253],"errorMessage":"Asset transfer must be to contract"},{"pc":[657],"errorMessage":"Box must have value"},{"pc":[995],"errorMessage":"Contract not initialized"},{"pc":[1001,1232],"errorMessage":"Expected 2 txns in group"},{"pc":[1030,1265],"errorMessage":"Incorrect asset ID"},{"pc":[1054],"errorMessage":"Initial stake below minimum"},{"pc":[1510],"errorMessage":"Insufficient reward pool"},{"pc":[1258],"errorMessage":"Must provide non-zero rewards"},{"pc":[1025],"errorMessage":"Must stake non-zero amount"},{"pc":[1126],"errorMessage":"No stake found"},{"pc":[320,336,352,370,386,403,426,444,456,480,498,510,526,538,550,586,608],"errorMessage":"OnCompletion is not NoOp"},{"pc":[1226],"errorMessage":"Only admin can add rewards"},{"pc":[1502],"errorMessage":"Only admin can emergency withdraw"},{"pc":[1324],"errorMessage":"Only admin can trigger distribution"},{"pc":[1339],"errorMessage":"Only admin can update admin"},{"pc":[1632],"errorMessage":"Only admin can update reward period"},{"pc":[1612],"errorMessage":"Only admin can update weekly rewards"},{"pc":[1569],"errorMessage":"Only box owner or admin can delete box"},{"pc":[892],"errorMessage":"Only creator can initialize"},{"pc":[956],"errorMessage":"Only creator or admin can opt in"},{"pc":[1153],"errorMessage":"Remaining stake would be below minimum"},{"pc":[1011,1246],"errorMessage":"Transaction 0 must be asset transfer"},{"pc":[1578],"errorMessage":"User still has active stake"},{"pc":[1132],"errorMessage":"Withdrawal amount exceeds stake"},{"pc":[1135],"errorMessage":"Withdrawal amount must be positive"},{"pc":[636],"errorMessage":"can only call when creating"},{"pc":[323,339,355,373,389,406,429,447,459,483,501,513,529,541,553,589,611],"errorMessage":"can only call when not creating"},{"pc":[734,745,754,776,783,792,812,845,884,938,960,990,994,1035,1091,1106,1151,1172,1189,1199,1222,1236,1269,1285,1296,1320,1335,1420,1424,1429,1434,1439,1443,1448,1496,1506,1514,1524,1551,1608,1628],"errorMessage":"check GlobalState exists"},{"pc":[1008,1243],"errorMessage":"transaction type is axfer"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiAEAAEECCYLDGFkbWluQWRkcmVzcwVhc3NldAt0b3RhbFN0YWtlZApyZXdhcmRQb29sGmFjY3VtdWxhdGVkUmV3YXJkc1BlclNoYXJlDmxhc3RSZXdhcmRUaW1lDG1pbmltdW1TdGFrZQ13ZWVrbHlSZXdhcmRzDHJld2FyZFBlcmlvZAQVH3x1B3N0YWtlcnMxGEAAISkiZygyA2cqImcnBSJnJwYiZysiZycEImcnByJnJwgiZzEbQQG3ghEEXXiVIQQID27NBGZ8XTAEn/0+UwQIkL1YBCHx3f8Es7cBRgS/i3ZtBBg4OOkEIbGwIgSCqx7EBBV2awkEv+MVZATOljsdBNyaKgUEHitSqwQbh0rWNhoAjhEBIgEMAOgA3ADQAMAAtACiAIoAfgBsAFUARAA0ACIAEgACIkMxGRREMRhENhoBF4gFCyNDMRkURDEYRDYaAReIBOcjQzEZFEQxGEQ2GgEXwByIBJsjQzEZFEQxGEQ2GgEXiARVI0MxGRREMRhEiAP9JwlMULAjQzEZFEQxGEQ2GgEXwByIA6EnCUxQsCNDMRkURDEYRDYaARfAHIgDeiNDMRkURDEYRIgDYiNDMRkURDEYRDYaARfAHIgDRxYnCUxQsCNDMRkURDEYRIgDFBYnCUxQsCNDMRkURDEYRIgCyiNDMRkURDEYRDYaAReIAk8jQzEZFEQxGESIAcMjQzEZFEQxGESIAYMjQzEZFEQxGEQ2GgEXwDA2GgIXwBw2GgMXNhoEFzYaBReIASkjQzEZFEQxGEQ2GgEXwBw2GgKIAGZII0MxGRREMRhENhoBF8AciAASJwlMULAjQzEZQP7CMRgURCNDigEBJwqL/1BJvUUBQQAGiwC+REyJgCgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATImKAgEnCov+UIv/v4v/iYoAADIHSSInBWVMSU4CTgNEIicIZUxJTgJOBEQID0EAQyIqZURBADyLAIsBSU4CCYsCSU4CCiInB2VESwELIiplREsBTAoiJwRlRAgnBExnTE8CC08CCCcFTGciK2VETAkrTGeJigEBgABJi/+I/0FJIltJQAAEIowAiSInBGVEiwKBIFtJjAGLA08CC0mMAAxBAAiLAIsBCYwAiSJC//mKBQAiKWVEFEQxADIJEkQpi/tnKIv8ZyoiZycFMgdnJwaL/WcrImcnBCJnJweL/mcnCIv/Z4mKAAAiKGVEMQAyCRJAAAgxAIsAEkEAGSNEIillRLEyCkyyESKyErIUJLIQIrIBs4kiQv/kigAAIillRCIpZUREMgSBAhJEIjgQSSQSRCQSRCI4FDIKEkQiOBJJTgJEIjgREkQiJwZlRDEASYj+bUcCIltAABCLAIsBD0QyBxaLA0xcCIwEiwRJIluLAElOAwgWXAAyBxZcEEkiWyInBGVECxZcIIsCTIj+ckgiKmVECCpMZ4mKAQAxAEmI/h5JIltHAkSL/0sBDkSL/0SL/w1BAAyLAov/CSInBmVED0SLAov/CRaLAUxcAEkiWyInBGVECxZcIIsASU8CiP4fSCIqZUSL/wkqTGciKWVEsbIRi/+yErIUJLIQgegHsgGziSIoZUQxABJEMgSBAhJEIillRCI4EEkkEkQkEkQiOBQyChJEIjgSSUQiOBFPAhJEIitlRAgrTGeJigABIiplTElPAkRAAAMiTIkiJwdlRIE0C4FkC4sACkyJigEBi/+I/g+JIihlRDEAEkSI/Z6JigEAIihlRDEAEkQoi/9niYoBAYv/iP02i/+I/eVLASJbSwIlW0sDgRBbSwSBGFtPBYEgW08EFk8EFlBPAxZQTwIWUE8CFlBMFlBJFSUKFlcGAkxQiYj/ciIpZUQiKmVEIicFZUQiJwhlRCInBmVEIitlRCInBGVETwYWTwYWUE8GFlBPBRZQTwQWUE8DFlBPAhZQTBZQSRUlChZXBgJMUImKAQAiKGVEMQBLARJEIitlRIv/D0QiK2VEi/8JK0xnIillRLGyEYv/shKyFCSyEIHoB7IBs4mKAQAiSShlRDEAi/8SQAAIMQCLARJBAB4jRIv/iPxYIlsURCcKi/9QSYwAvUUBQQAEiwC8SIkiQv/figEAIihlRDEAEkSI/H4nB4v/Z4mKAQAiKGVEMQASRIj8aicIi/9niQ==","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":7,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type UserStakeInfo = {
  stakedAmount: bigint,
  firstStakeTime: bigint,
  lastStakeTime: bigint,
  totalRewardsEarned: bigint,
  rewardDebt: bigint
}


/**
 * Converts the ABI tuple representation of a UserStakeInfo to the struct representation
 */
export function UserStakeInfoFromTuple(abiTuple: [bigint, bigint, bigint, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.UserStakeInfo, APP_SPEC.structs) as UserStakeInfo
}

/**
 * The argument types for the AsaStakingContract contract
 */
export type AsaStakingContractArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'getUserStakeInfo(account)(uint64,uint64,uint64,uint64,uint64)': {
      userAddress: Uint8Array | string
    }
    'storeUserStakeInfo(account,(uint64,uint64,uint64,uint64,uint64))void': {
      userAddress: Uint8Array | string
      stakeInfo: UserStakeInfo
    }
    'initialize(asset,account,uint64,uint64,uint64)void': {
      asset: bigint
      adminAddress: Uint8Array | string
      minimumStake: bigint | number
      weeklyRewards: bigint | number
      rewardPeriod: bigint | number
    }
    'optInToAsset()void': Record<string, never>
    'stake()void': Record<string, never>
    'withdraw(uint64)void': {
      amount: bigint | number
    }
    'addRewards()void': Record<string, never>
    'getCurrentAPY()uint64': Record<string, never>
    'getPendingRewards(account)uint64': {
      userAddress: Uint8Array | string
    }
    'triggerRewardDistribution()void': Record<string, never>
    'updateAdmin(account)void': {
      newAdminAddress: Uint8Array | string
    }
    'getUserStats(account)uint64[]': {
      userAddress: Uint8Array | string
    }
    'getContractStats()uint64[]': Record<string, never>
    'emergencyWithdrawRewards(uint64)void': {
      amount: bigint | number
    }
    'deleteUserBox(account)void': {
      userAddress: Uint8Array | string
    }
    'updateWeeklyRewards(uint64)void': {
      newWeeklyRewards: bigint | number
    }
    'updateRewardPeriod(uint64)void': {
      newRewardPeriod: bigint | number
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'getUserStakeInfo(account)(uint64,uint64,uint64,uint64,uint64)': [userAddress: Uint8Array | string]
    'storeUserStakeInfo(account,(uint64,uint64,uint64,uint64,uint64))void': [userAddress: Uint8Array | string, stakeInfo: UserStakeInfo]
    'initialize(asset,account,uint64,uint64,uint64)void': [asset: bigint, adminAddress: Uint8Array | string, minimumStake: bigint | number, weeklyRewards: bigint | number, rewardPeriod: bigint | number]
    'optInToAsset()void': []
    'stake()void': []
    'withdraw(uint64)void': [amount: bigint | number]
    'addRewards()void': []
    'getCurrentAPY()uint64': []
    'getPendingRewards(account)uint64': [userAddress: Uint8Array | string]
    'triggerRewardDistribution()void': []
    'updateAdmin(account)void': [newAdminAddress: Uint8Array | string]
    'getUserStats(account)uint64[]': [userAddress: Uint8Array | string]
    'getContractStats()uint64[]': []
    'emergencyWithdrawRewards(uint64)void': [amount: bigint | number]
    'deleteUserBox(account)void': [userAddress: Uint8Array | string]
    'updateWeeklyRewards(uint64)void': [newWeeklyRewards: bigint | number]
    'updateRewardPeriod(uint64)void': [newRewardPeriod: bigint | number]
  }
}

/**
 * The return type for each method
 */
export type AsaStakingContractReturns = {
  'getUserStakeInfo(account)(uint64,uint64,uint64,uint64,uint64)': UserStakeInfo
  'storeUserStakeInfo(account,(uint64,uint64,uint64,uint64,uint64))void': void
  'initialize(asset,account,uint64,uint64,uint64)void': void
  'optInToAsset()void': void
  'stake()void': void
  'withdraw(uint64)void': void
  'addRewards()void': void
  'getCurrentAPY()uint64': bigint
  'getPendingRewards(account)uint64': bigint
  'triggerRewardDistribution()void': void
  'updateAdmin(account)void': void
  'getUserStats(account)uint64[]': bigint[]
  'getContractStats()uint64[]': bigint[]
  'emergencyWithdrawRewards(uint64)void': void
  'deleteUserBox(account)void': void
  'updateWeeklyRewards(uint64)void': void
  'updateRewardPeriod(uint64)void': void
}

/**
 * Defines the types of available calls and state of the AsaStakingContract smart contract.
 */
export type AsaStakingContractTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'getUserStakeInfo(account)(uint64,uint64,uint64,uint64,uint64)' | 'getUserStakeInfo', {
      argsObj: AsaStakingContractArgs['obj']['getUserStakeInfo(account)(uint64,uint64,uint64,uint64,uint64)']
      argsTuple: AsaStakingContractArgs['tuple']['getUserStakeInfo(account)(uint64,uint64,uint64,uint64,uint64)']
      returns: AsaStakingContractReturns['getUserStakeInfo(account)(uint64,uint64,uint64,uint64,uint64)']
    }>
    & Record<'storeUserStakeInfo(account,(uint64,uint64,uint64,uint64,uint64))void' | 'storeUserStakeInfo', {
      argsObj: AsaStakingContractArgs['obj']['storeUserStakeInfo(account,(uint64,uint64,uint64,uint64,uint64))void']
      argsTuple: AsaStakingContractArgs['tuple']['storeUserStakeInfo(account,(uint64,uint64,uint64,uint64,uint64))void']
      returns: AsaStakingContractReturns['storeUserStakeInfo(account,(uint64,uint64,uint64,uint64,uint64))void']
    }>
    & Record<'initialize(asset,account,uint64,uint64,uint64)void' | 'initialize', {
      argsObj: AsaStakingContractArgs['obj']['initialize(asset,account,uint64,uint64,uint64)void']
      argsTuple: AsaStakingContractArgs['tuple']['initialize(asset,account,uint64,uint64,uint64)void']
      returns: AsaStakingContractReturns['initialize(asset,account,uint64,uint64,uint64)void']
    }>
    & Record<'optInToAsset()void' | 'optInToAsset', {
      argsObj: AsaStakingContractArgs['obj']['optInToAsset()void']
      argsTuple: AsaStakingContractArgs['tuple']['optInToAsset()void']
      returns: AsaStakingContractReturns['optInToAsset()void']
    }>
    & Record<'stake()void' | 'stake', {
      argsObj: AsaStakingContractArgs['obj']['stake()void']
      argsTuple: AsaStakingContractArgs['tuple']['stake()void']
      returns: AsaStakingContractReturns['stake()void']
    }>
    & Record<'withdraw(uint64)void' | 'withdraw', {
      argsObj: AsaStakingContractArgs['obj']['withdraw(uint64)void']
      argsTuple: AsaStakingContractArgs['tuple']['withdraw(uint64)void']
      returns: AsaStakingContractReturns['withdraw(uint64)void']
    }>
    & Record<'addRewards()void' | 'addRewards', {
      argsObj: AsaStakingContractArgs['obj']['addRewards()void']
      argsTuple: AsaStakingContractArgs['tuple']['addRewards()void']
      returns: AsaStakingContractReturns['addRewards()void']
    }>
    & Record<'getCurrentAPY()uint64' | 'getCurrentAPY', {
      argsObj: AsaStakingContractArgs['obj']['getCurrentAPY()uint64']
      argsTuple: AsaStakingContractArgs['tuple']['getCurrentAPY()uint64']
      returns: AsaStakingContractReturns['getCurrentAPY()uint64']
    }>
    & Record<'getPendingRewards(account)uint64' | 'getPendingRewards', {
      argsObj: AsaStakingContractArgs['obj']['getPendingRewards(account)uint64']
      argsTuple: AsaStakingContractArgs['tuple']['getPendingRewards(account)uint64']
      returns: AsaStakingContractReturns['getPendingRewards(account)uint64']
    }>
    & Record<'triggerRewardDistribution()void' | 'triggerRewardDistribution', {
      argsObj: AsaStakingContractArgs['obj']['triggerRewardDistribution()void']
      argsTuple: AsaStakingContractArgs['tuple']['triggerRewardDistribution()void']
      returns: AsaStakingContractReturns['triggerRewardDistribution()void']
    }>
    & Record<'updateAdmin(account)void' | 'updateAdmin', {
      argsObj: AsaStakingContractArgs['obj']['updateAdmin(account)void']
      argsTuple: AsaStakingContractArgs['tuple']['updateAdmin(account)void']
      returns: AsaStakingContractReturns['updateAdmin(account)void']
    }>
    & Record<'getUserStats(account)uint64[]' | 'getUserStats', {
      argsObj: AsaStakingContractArgs['obj']['getUserStats(account)uint64[]']
      argsTuple: AsaStakingContractArgs['tuple']['getUserStats(account)uint64[]']
      returns: AsaStakingContractReturns['getUserStats(account)uint64[]']
    }>
    & Record<'getContractStats()uint64[]' | 'getContractStats', {
      argsObj: AsaStakingContractArgs['obj']['getContractStats()uint64[]']
      argsTuple: AsaStakingContractArgs['tuple']['getContractStats()uint64[]']
      returns: AsaStakingContractReturns['getContractStats()uint64[]']
    }>
    & Record<'emergencyWithdrawRewards(uint64)void' | 'emergencyWithdrawRewards', {
      argsObj: AsaStakingContractArgs['obj']['emergencyWithdrawRewards(uint64)void']
      argsTuple: AsaStakingContractArgs['tuple']['emergencyWithdrawRewards(uint64)void']
      returns: AsaStakingContractReturns['emergencyWithdrawRewards(uint64)void']
    }>
    & Record<'deleteUserBox(account)void' | 'deleteUserBox', {
      argsObj: AsaStakingContractArgs['obj']['deleteUserBox(account)void']
      argsTuple: AsaStakingContractArgs['tuple']['deleteUserBox(account)void']
      returns: AsaStakingContractReturns['deleteUserBox(account)void']
    }>
    & Record<'updateWeeklyRewards(uint64)void' | 'updateWeeklyRewards', {
      argsObj: AsaStakingContractArgs['obj']['updateWeeklyRewards(uint64)void']
      argsTuple: AsaStakingContractArgs['tuple']['updateWeeklyRewards(uint64)void']
      returns: AsaStakingContractReturns['updateWeeklyRewards(uint64)void']
    }>
    & Record<'updateRewardPeriod(uint64)void' | 'updateRewardPeriod', {
      argsObj: AsaStakingContractArgs['obj']['updateRewardPeriod(uint64)void']
      argsTuple: AsaStakingContractArgs['tuple']['updateRewardPeriod(uint64)void']
      returns: AsaStakingContractReturns['updateRewardPeriod(uint64)void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        asset: bigint
        adminAddress: string
        totalStaked: bigint
        lastRewardTime: bigint
        minimumStake: bigint
        rewardPool: bigint
        accumulatedRewardsPerShare: bigint
        weeklyRewards: bigint
        rewardPeriod: bigint
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        stakers: Map<string, UserStakeInfo>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type AsaStakingContractSignatures = keyof AsaStakingContractTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type AsaStakingContractNonVoidMethodSignatures = keyof AsaStakingContractTypes['methods'] extends infer T ? T extends keyof AsaStakingContractTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the AsaStakingContract smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends AsaStakingContractSignatures> = AsaStakingContractTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the AsaStakingContract smart contract to the method's return type
 */
export type MethodReturn<TSignature extends AsaStakingContractSignatures> = AsaStakingContractTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = AsaStakingContractTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = AsaStakingContractTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type AsaStakingContractCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type AsaStakingContractDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: AsaStakingContractCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the AsaStakingContract smart contract
 */
export abstract class AsaStakingContractParamsFactory {
  /**
   * Constructs a no op call for the getUserStakeInfo(account)(uint64,uint64,uint64,uint64,uint64) ABI method
   *
   * Helper function to read user stake info from box storage
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getUserStakeInfo(params: CallParams<AsaStakingContractArgs['obj']['getUserStakeInfo(account)(uint64,uint64,uint64,uint64,uint64)'] | AsaStakingContractArgs['tuple']['getUserStakeInfo(account)(uint64,uint64,uint64,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getUserStakeInfo(account)(uint64,uint64,uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.userAddress],
    }
  }
  /**
   * Constructs a no op call for the storeUserStakeInfo(account,(uint64,uint64,uint64,uint64,uint64))void ABI method
   *
   * Helper function to store user stake info in box storage
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static storeUserStakeInfo(params: CallParams<AsaStakingContractArgs['obj']['storeUserStakeInfo(account,(uint64,uint64,uint64,uint64,uint64))void'] | AsaStakingContractArgs['tuple']['storeUserStakeInfo(account,(uint64,uint64,uint64,uint64,uint64))void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'storeUserStakeInfo(account,(uint64,uint64,uint64,uint64,uint64))void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.userAddress, params.args.stakeInfo],
    }
  }
  /**
   * Constructs a no op call for the initialize(asset,account,uint64,uint64,uint64)void ABI method
   *
   * Initialize the contract with the ASA token ID and other parameters
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static initialize(params: CallParams<AsaStakingContractArgs['obj']['initialize(asset,account,uint64,uint64,uint64)void'] | AsaStakingContractArgs['tuple']['initialize(asset,account,uint64,uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'initialize(asset,account,uint64,uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.asset, params.args.adminAddress, params.args.minimumStake, params.args.weeklyRewards, params.args.rewardPeriod],
    }
  }
  /**
   * Constructs a no op call for the optInToAsset()void ABI method
   *
   * Opt the contract into the ASA
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static optInToAsset(params: CallParams<AsaStakingContractArgs['obj']['optInToAsset()void'] | AsaStakingContractArgs['tuple']['optInToAsset()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'optInToAsset()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the stake()void ABI method
   *
  * Stake tokens
  Requires a companion ASA transfer transaction
  Automatically claims pending rewards

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static stake(params: CallParams<AsaStakingContractArgs['obj']['stake()void'] | AsaStakingContractArgs['tuple']['stake()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'stake()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the withdraw(uint64)void ABI method
   *
  * Withdraw staked tokens
  Automatically claims pending rewards

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static withdraw(params: CallParams<AsaStakingContractArgs['obj']['withdraw(uint64)void'] | AsaStakingContractArgs['tuple']['withdraw(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'withdraw(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.amount],
    }
  }
  /**
   * Constructs a no op call for the addRewards()void ABI method
   *
  * Add rewards to the reward pool
  Only the admin can call this
  Requires a companion ASA transfer transaction with the rewards

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static addRewards(params: CallParams<AsaStakingContractArgs['obj']['addRewards()void'] | AsaStakingContractArgs['tuple']['addRewards()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'addRewards()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getCurrentAPY()uint64 ABI method
   *
   * Calculate current APY based on total staked amount
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getCurrentApy(params: CallParams<AsaStakingContractArgs['obj']['getCurrentAPY()uint64'] | AsaStakingContractArgs['tuple']['getCurrentAPY()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getCurrentAPY()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the getPendingRewards(account)uint64 ABI method
   *
   * Get pending rewards for a specific user
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getPendingRewards(params: CallParams<AsaStakingContractArgs['obj']['getPendingRewards(account)uint64'] | AsaStakingContractArgs['tuple']['getPendingRewards(account)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getPendingRewards(account)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.userAddress],
    }
  }
  /**
   * Constructs a no op call for the triggerRewardDistribution()void ABI method
   *
  * Trigger reward distribution manually (admin only)
  Updates accumulated rewards per share if period has passed

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static triggerRewardDistribution(params: CallParams<AsaStakingContractArgs['obj']['triggerRewardDistribution()void'] | AsaStakingContractArgs['tuple']['triggerRewardDistribution()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'triggerRewardDistribution()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the updateAdmin(account)void ABI method
   *
  * Update the admin address
  Only the current admin can call this

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateAdmin(params: CallParams<AsaStakingContractArgs['obj']['updateAdmin(account)void'] | AsaStakingContractArgs['tuple']['updateAdmin(account)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'updateAdmin(account)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newAdminAddress],
    }
  }
  /**
   * Constructs a no op call for the getUserStats(account)uint64[] ABI method
   *
   * Get current staking statistics for a user
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getUserStats(params: CallParams<AsaStakingContractArgs['obj']['getUserStats(account)uint64[]'] | AsaStakingContractArgs['tuple']['getUserStats(account)uint64[]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getUserStats(account)uint64[]' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.userAddress],
    }
  }
  /**
   * Constructs a no op call for the getContractStats()uint64[] ABI method
   *
   * Get contract global statistics
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getContractStats(params: CallParams<AsaStakingContractArgs['obj']['getContractStats()uint64[]'] | AsaStakingContractArgs['tuple']['getContractStats()uint64[]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getContractStats()uint64[]' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the emergencyWithdrawRewards(uint64)void ABI method
   *
   * Emergency withdraw rewards from pool (admin only)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static emergencyWithdrawRewards(params: CallParams<AsaStakingContractArgs['obj']['emergencyWithdrawRewards(uint64)void'] | AsaStakingContractArgs['tuple']['emergencyWithdrawRewards(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'emergencyWithdrawRewards(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.amount],
    }
  }
  /**
   * Constructs a no op call for the deleteUserBox(account)void ABI method
   *
  * Delete a user's box (for cleanup)
  Can only be called by the box owner or admin

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static deleteUserBox(params: CallParams<AsaStakingContractArgs['obj']['deleteUserBox(account)void'] | AsaStakingContractArgs['tuple']['deleteUserBox(account)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'deleteUserBox(account)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.userAddress],
    }
  }
  /**
   * Constructs a no op call for the updateWeeklyRewards(uint64)void ABI method
   *
   * Update weekly rewards amount (admin only)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateWeeklyRewards(params: CallParams<AsaStakingContractArgs['obj']['updateWeeklyRewards(uint64)void'] | AsaStakingContractArgs['tuple']['updateWeeklyRewards(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'updateWeeklyRewards(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newWeeklyRewards],
    }
  }
  /**
   * Constructs a no op call for the updateRewardPeriod(uint64)void ABI method
   *
   * Update reward period (admin only)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateRewardPeriod(params: CallParams<AsaStakingContractArgs['obj']['updateRewardPeriod(uint64)void'] | AsaStakingContractArgs['tuple']['updateRewardPeriod(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'updateRewardPeriod(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newRewardPeriod],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the ASAStakingContract smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class AsaStakingContractFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `AsaStakingContractFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new AsaStakingContractClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new AsaStakingContractClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the ASAStakingContract smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: AsaStakingContractDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new AsaStakingContractClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ASAStakingContract smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ASAStakingContract smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ASAStakingContract smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new AsaStakingContractClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the ASAStakingContract smart contract
 */
export class AsaStakingContractClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `AsaStakingContractClient`
   *
   * @param appClient An `AppClient` instance which has been created with the AsaStakingContract app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `AsaStakingContractClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends AsaStakingContractNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `AsaStakingContractClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<AsaStakingContractClient> {
    return new AsaStakingContractClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `AsaStakingContractClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<AsaStakingContractClient> {
    return new AsaStakingContractClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the ASAStakingContract smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `getUserStakeInfo(account)(uint64,uint64,uint64,uint64,uint64)` ABI method.
     *
     * Helper function to read user stake info from box storage
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getUserStakeInfo: (params: CallParams<AsaStakingContractArgs['obj']['getUserStakeInfo(account)(uint64,uint64,uint64,uint64,uint64)'] | AsaStakingContractArgs['tuple']['getUserStakeInfo(account)(uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AsaStakingContractParamsFactory.getUserStakeInfo(params))
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `storeUserStakeInfo(account,(uint64,uint64,uint64,uint64,uint64))void` ABI method.
     *
     * Helper function to store user stake info in box storage
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    storeUserStakeInfo: (params: CallParams<AsaStakingContractArgs['obj']['storeUserStakeInfo(account,(uint64,uint64,uint64,uint64,uint64))void'] | AsaStakingContractArgs['tuple']['storeUserStakeInfo(account,(uint64,uint64,uint64,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AsaStakingContractParamsFactory.storeUserStakeInfo(params))
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `initialize(asset,account,uint64,uint64,uint64)void` ABI method.
     *
     * Initialize the contract with the ASA token ID and other parameters
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    initialize: (params: CallParams<AsaStakingContractArgs['obj']['initialize(asset,account,uint64,uint64,uint64)void'] | AsaStakingContractArgs['tuple']['initialize(asset,account,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AsaStakingContractParamsFactory.initialize(params))
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `optInToAsset()void` ABI method.
     *
     * Opt the contract into the ASA
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    optInToAsset: (params: CallParams<AsaStakingContractArgs['obj']['optInToAsset()void'] | AsaStakingContractArgs['tuple']['optInToAsset()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AsaStakingContractParamsFactory.optInToAsset(params))
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `stake()void` ABI method.
     *
    * Stake tokens
    Requires a companion ASA transfer transaction
    Automatically claims pending rewards

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    stake: (params: CallParams<AsaStakingContractArgs['obj']['stake()void'] | AsaStakingContractArgs['tuple']['stake()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AsaStakingContractParamsFactory.stake(params))
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `withdraw(uint64)void` ABI method.
     *
    * Withdraw staked tokens
    Automatically claims pending rewards

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    withdraw: (params: CallParams<AsaStakingContractArgs['obj']['withdraw(uint64)void'] | AsaStakingContractArgs['tuple']['withdraw(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AsaStakingContractParamsFactory.withdraw(params))
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `addRewards()void` ABI method.
     *
    * Add rewards to the reward pool
    Only the admin can call this
    Requires a companion ASA transfer transaction with the rewards

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    addRewards: (params: CallParams<AsaStakingContractArgs['obj']['addRewards()void'] | AsaStakingContractArgs['tuple']['addRewards()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AsaStakingContractParamsFactory.addRewards(params))
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `getCurrentAPY()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Calculate current APY based on total staked amount
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getCurrentApy: (params: CallParams<AsaStakingContractArgs['obj']['getCurrentAPY()uint64'] | AsaStakingContractArgs['tuple']['getCurrentAPY()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AsaStakingContractParamsFactory.getCurrentApy(params))
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `getPendingRewards(account)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get pending rewards for a specific user
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getPendingRewards: (params: CallParams<AsaStakingContractArgs['obj']['getPendingRewards(account)uint64'] | AsaStakingContractArgs['tuple']['getPendingRewards(account)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AsaStakingContractParamsFactory.getPendingRewards(params))
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `triggerRewardDistribution()void` ABI method.
     *
    * Trigger reward distribution manually (admin only)
    Updates accumulated rewards per share if period has passed

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    triggerRewardDistribution: (params: CallParams<AsaStakingContractArgs['obj']['triggerRewardDistribution()void'] | AsaStakingContractArgs['tuple']['triggerRewardDistribution()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AsaStakingContractParamsFactory.triggerRewardDistribution(params))
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `updateAdmin(account)void` ABI method.
     *
    * Update the admin address
    Only the current admin can call this

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateAdmin: (params: CallParams<AsaStakingContractArgs['obj']['updateAdmin(account)void'] | AsaStakingContractArgs['tuple']['updateAdmin(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AsaStakingContractParamsFactory.updateAdmin(params))
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `getUserStats(account)uint64[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get current staking statistics for a user
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getUserStats: (params: CallParams<AsaStakingContractArgs['obj']['getUserStats(account)uint64[]'] | AsaStakingContractArgs['tuple']['getUserStats(account)uint64[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AsaStakingContractParamsFactory.getUserStats(params))
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `getContractStats()uint64[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get contract global statistics
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getContractStats: (params: CallParams<AsaStakingContractArgs['obj']['getContractStats()uint64[]'] | AsaStakingContractArgs['tuple']['getContractStats()uint64[]']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AsaStakingContractParamsFactory.getContractStats(params))
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `emergencyWithdrawRewards(uint64)void` ABI method.
     *
     * Emergency withdraw rewards from pool (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    emergencyWithdrawRewards: (params: CallParams<AsaStakingContractArgs['obj']['emergencyWithdrawRewards(uint64)void'] | AsaStakingContractArgs['tuple']['emergencyWithdrawRewards(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AsaStakingContractParamsFactory.emergencyWithdrawRewards(params))
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `deleteUserBox(account)void` ABI method.
     *
    * Delete a user's box (for cleanup)
    Can only be called by the box owner or admin

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    deleteUserBox: (params: CallParams<AsaStakingContractArgs['obj']['deleteUserBox(account)void'] | AsaStakingContractArgs['tuple']['deleteUserBox(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AsaStakingContractParamsFactory.deleteUserBox(params))
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `updateWeeklyRewards(uint64)void` ABI method.
     *
     * Update weekly rewards amount (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateWeeklyRewards: (params: CallParams<AsaStakingContractArgs['obj']['updateWeeklyRewards(uint64)void'] | AsaStakingContractArgs['tuple']['updateWeeklyRewards(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AsaStakingContractParamsFactory.updateWeeklyRewards(params))
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `updateRewardPeriod(uint64)void` ABI method.
     *
     * Update reward period (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateRewardPeriod: (params: CallParams<AsaStakingContractArgs['obj']['updateRewardPeriod(uint64)void'] | AsaStakingContractArgs['tuple']['updateRewardPeriod(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AsaStakingContractParamsFactory.updateRewardPeriod(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the ASAStakingContract smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `getUserStakeInfo(account)(uint64,uint64,uint64,uint64,uint64)` ABI method.
     *
     * Helper function to read user stake info from box storage
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getUserStakeInfo: (params: CallParams<AsaStakingContractArgs['obj']['getUserStakeInfo(account)(uint64,uint64,uint64,uint64,uint64)'] | AsaStakingContractArgs['tuple']['getUserStakeInfo(account)(uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AsaStakingContractParamsFactory.getUserStakeInfo(params))
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `storeUserStakeInfo(account,(uint64,uint64,uint64,uint64,uint64))void` ABI method.
     *
     * Helper function to store user stake info in box storage
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    storeUserStakeInfo: (params: CallParams<AsaStakingContractArgs['obj']['storeUserStakeInfo(account,(uint64,uint64,uint64,uint64,uint64))void'] | AsaStakingContractArgs['tuple']['storeUserStakeInfo(account,(uint64,uint64,uint64,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AsaStakingContractParamsFactory.storeUserStakeInfo(params))
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `initialize(asset,account,uint64,uint64,uint64)void` ABI method.
     *
     * Initialize the contract with the ASA token ID and other parameters
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    initialize: (params: CallParams<AsaStakingContractArgs['obj']['initialize(asset,account,uint64,uint64,uint64)void'] | AsaStakingContractArgs['tuple']['initialize(asset,account,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AsaStakingContractParamsFactory.initialize(params))
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `optInToAsset()void` ABI method.
     *
     * Opt the contract into the ASA
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    optInToAsset: (params: CallParams<AsaStakingContractArgs['obj']['optInToAsset()void'] | AsaStakingContractArgs['tuple']['optInToAsset()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AsaStakingContractParamsFactory.optInToAsset(params))
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `stake()void` ABI method.
     *
    * Stake tokens
    Requires a companion ASA transfer transaction
    Automatically claims pending rewards

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    stake: (params: CallParams<AsaStakingContractArgs['obj']['stake()void'] | AsaStakingContractArgs['tuple']['stake()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AsaStakingContractParamsFactory.stake(params))
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `withdraw(uint64)void` ABI method.
     *
    * Withdraw staked tokens
    Automatically claims pending rewards

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    withdraw: (params: CallParams<AsaStakingContractArgs['obj']['withdraw(uint64)void'] | AsaStakingContractArgs['tuple']['withdraw(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AsaStakingContractParamsFactory.withdraw(params))
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `addRewards()void` ABI method.
     *
    * Add rewards to the reward pool
    Only the admin can call this
    Requires a companion ASA transfer transaction with the rewards

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    addRewards: (params: CallParams<AsaStakingContractArgs['obj']['addRewards()void'] | AsaStakingContractArgs['tuple']['addRewards()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AsaStakingContractParamsFactory.addRewards(params))
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `getCurrentAPY()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Calculate current APY based on total staked amount
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getCurrentApy: (params: CallParams<AsaStakingContractArgs['obj']['getCurrentAPY()uint64'] | AsaStakingContractArgs['tuple']['getCurrentAPY()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AsaStakingContractParamsFactory.getCurrentApy(params))
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `getPendingRewards(account)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get pending rewards for a specific user
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getPendingRewards: (params: CallParams<AsaStakingContractArgs['obj']['getPendingRewards(account)uint64'] | AsaStakingContractArgs['tuple']['getPendingRewards(account)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AsaStakingContractParamsFactory.getPendingRewards(params))
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `triggerRewardDistribution()void` ABI method.
     *
    * Trigger reward distribution manually (admin only)
    Updates accumulated rewards per share if period has passed

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    triggerRewardDistribution: (params: CallParams<AsaStakingContractArgs['obj']['triggerRewardDistribution()void'] | AsaStakingContractArgs['tuple']['triggerRewardDistribution()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AsaStakingContractParamsFactory.triggerRewardDistribution(params))
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `updateAdmin(account)void` ABI method.
     *
    * Update the admin address
    Only the current admin can call this

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateAdmin: (params: CallParams<AsaStakingContractArgs['obj']['updateAdmin(account)void'] | AsaStakingContractArgs['tuple']['updateAdmin(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AsaStakingContractParamsFactory.updateAdmin(params))
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `getUserStats(account)uint64[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get current staking statistics for a user
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getUserStats: (params: CallParams<AsaStakingContractArgs['obj']['getUserStats(account)uint64[]'] | AsaStakingContractArgs['tuple']['getUserStats(account)uint64[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AsaStakingContractParamsFactory.getUserStats(params))
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `getContractStats()uint64[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get contract global statistics
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getContractStats: (params: CallParams<AsaStakingContractArgs['obj']['getContractStats()uint64[]'] | AsaStakingContractArgs['tuple']['getContractStats()uint64[]']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AsaStakingContractParamsFactory.getContractStats(params))
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `emergencyWithdrawRewards(uint64)void` ABI method.
     *
     * Emergency withdraw rewards from pool (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    emergencyWithdrawRewards: (params: CallParams<AsaStakingContractArgs['obj']['emergencyWithdrawRewards(uint64)void'] | AsaStakingContractArgs['tuple']['emergencyWithdrawRewards(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AsaStakingContractParamsFactory.emergencyWithdrawRewards(params))
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `deleteUserBox(account)void` ABI method.
     *
    * Delete a user's box (for cleanup)
    Can only be called by the box owner or admin

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    deleteUserBox: (params: CallParams<AsaStakingContractArgs['obj']['deleteUserBox(account)void'] | AsaStakingContractArgs['tuple']['deleteUserBox(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AsaStakingContractParamsFactory.deleteUserBox(params))
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `updateWeeklyRewards(uint64)void` ABI method.
     *
     * Update weekly rewards amount (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateWeeklyRewards: (params: CallParams<AsaStakingContractArgs['obj']['updateWeeklyRewards(uint64)void'] | AsaStakingContractArgs['tuple']['updateWeeklyRewards(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AsaStakingContractParamsFactory.updateWeeklyRewards(params))
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `updateRewardPeriod(uint64)void` ABI method.
     *
     * Update reward period (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateRewardPeriod: (params: CallParams<AsaStakingContractArgs['obj']['updateRewardPeriod(uint64)void'] | AsaStakingContractArgs['tuple']['updateRewardPeriod(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AsaStakingContractParamsFactory.updateRewardPeriod(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the ASAStakingContract smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `getUserStakeInfo(account)(uint64,uint64,uint64,uint64,uint64)` ABI method.
     *
     * Helper function to read user stake info from box storage
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getUserStakeInfo: async (params: CallParams<AsaStakingContractArgs['obj']['getUserStakeInfo(account)(uint64,uint64,uint64,uint64,uint64)'] | AsaStakingContractArgs['tuple']['getUserStakeInfo(account)(uint64,uint64,uint64,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AsaStakingContractParamsFactory.getUserStakeInfo(params))
      return {...result, return: result.return as unknown as (undefined | AsaStakingContractReturns['getUserStakeInfo(account)(uint64,uint64,uint64,uint64,uint64)'])}
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `storeUserStakeInfo(account,(uint64,uint64,uint64,uint64,uint64))void` ABI method.
     *
     * Helper function to store user stake info in box storage
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    storeUserStakeInfo: async (params: CallParams<AsaStakingContractArgs['obj']['storeUserStakeInfo(account,(uint64,uint64,uint64,uint64,uint64))void'] | AsaStakingContractArgs['tuple']['storeUserStakeInfo(account,(uint64,uint64,uint64,uint64,uint64))void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AsaStakingContractParamsFactory.storeUserStakeInfo(params))
      return {...result, return: result.return as unknown as (undefined | AsaStakingContractReturns['storeUserStakeInfo(account,(uint64,uint64,uint64,uint64,uint64))void'])}
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `initialize(asset,account,uint64,uint64,uint64)void` ABI method.
     *
     * Initialize the contract with the ASA token ID and other parameters
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    initialize: async (params: CallParams<AsaStakingContractArgs['obj']['initialize(asset,account,uint64,uint64,uint64)void'] | AsaStakingContractArgs['tuple']['initialize(asset,account,uint64,uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AsaStakingContractParamsFactory.initialize(params))
      return {...result, return: result.return as unknown as (undefined | AsaStakingContractReturns['initialize(asset,account,uint64,uint64,uint64)void'])}
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `optInToAsset()void` ABI method.
     *
     * Opt the contract into the ASA
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    optInToAsset: async (params: CallParams<AsaStakingContractArgs['obj']['optInToAsset()void'] | AsaStakingContractArgs['tuple']['optInToAsset()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AsaStakingContractParamsFactory.optInToAsset(params))
      return {...result, return: result.return as unknown as (undefined | AsaStakingContractReturns['optInToAsset()void'])}
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `stake()void` ABI method.
     *
    * Stake tokens
    Requires a companion ASA transfer transaction
    Automatically claims pending rewards

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    stake: async (params: CallParams<AsaStakingContractArgs['obj']['stake()void'] | AsaStakingContractArgs['tuple']['stake()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AsaStakingContractParamsFactory.stake(params))
      return {...result, return: result.return as unknown as (undefined | AsaStakingContractReturns['stake()void'])}
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `withdraw(uint64)void` ABI method.
     *
    * Withdraw staked tokens
    Automatically claims pending rewards

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    withdraw: async (params: CallParams<AsaStakingContractArgs['obj']['withdraw(uint64)void'] | AsaStakingContractArgs['tuple']['withdraw(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AsaStakingContractParamsFactory.withdraw(params))
      return {...result, return: result.return as unknown as (undefined | AsaStakingContractReturns['withdraw(uint64)void'])}
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `addRewards()void` ABI method.
     *
    * Add rewards to the reward pool
    Only the admin can call this
    Requires a companion ASA transfer transaction with the rewards

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    addRewards: async (params: CallParams<AsaStakingContractArgs['obj']['addRewards()void'] | AsaStakingContractArgs['tuple']['addRewards()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AsaStakingContractParamsFactory.addRewards(params))
      return {...result, return: result.return as unknown as (undefined | AsaStakingContractReturns['addRewards()void'])}
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `getCurrentAPY()uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Calculate current APY based on total staked amount
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getCurrentApy: async (params: CallParams<AsaStakingContractArgs['obj']['getCurrentAPY()uint64'] | AsaStakingContractArgs['tuple']['getCurrentAPY()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AsaStakingContractParamsFactory.getCurrentApy(params))
      return {...result, return: result.return as unknown as (undefined | AsaStakingContractReturns['getCurrentAPY()uint64'])}
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `getPendingRewards(account)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get pending rewards for a specific user
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getPendingRewards: async (params: CallParams<AsaStakingContractArgs['obj']['getPendingRewards(account)uint64'] | AsaStakingContractArgs['tuple']['getPendingRewards(account)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AsaStakingContractParamsFactory.getPendingRewards(params))
      return {...result, return: result.return as unknown as (undefined | AsaStakingContractReturns['getPendingRewards(account)uint64'])}
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `triggerRewardDistribution()void` ABI method.
     *
    * Trigger reward distribution manually (admin only)
    Updates accumulated rewards per share if period has passed

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    triggerRewardDistribution: async (params: CallParams<AsaStakingContractArgs['obj']['triggerRewardDistribution()void'] | AsaStakingContractArgs['tuple']['triggerRewardDistribution()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AsaStakingContractParamsFactory.triggerRewardDistribution(params))
      return {...result, return: result.return as unknown as (undefined | AsaStakingContractReturns['triggerRewardDistribution()void'])}
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `updateAdmin(account)void` ABI method.
     *
    * Update the admin address
    Only the current admin can call this

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateAdmin: async (params: CallParams<AsaStakingContractArgs['obj']['updateAdmin(account)void'] | AsaStakingContractArgs['tuple']['updateAdmin(account)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AsaStakingContractParamsFactory.updateAdmin(params))
      return {...result, return: result.return as unknown as (undefined | AsaStakingContractReturns['updateAdmin(account)void'])}
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `getUserStats(account)uint64[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get current staking statistics for a user
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getUserStats: async (params: CallParams<AsaStakingContractArgs['obj']['getUserStats(account)uint64[]'] | AsaStakingContractArgs['tuple']['getUserStats(account)uint64[]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AsaStakingContractParamsFactory.getUserStats(params))
      return {...result, return: result.return as unknown as (undefined | AsaStakingContractReturns['getUserStats(account)uint64[]'])}
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `getContractStats()uint64[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get contract global statistics
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getContractStats: async (params: CallParams<AsaStakingContractArgs['obj']['getContractStats()uint64[]'] | AsaStakingContractArgs['tuple']['getContractStats()uint64[]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AsaStakingContractParamsFactory.getContractStats(params))
      return {...result, return: result.return as unknown as (undefined | AsaStakingContractReturns['getContractStats()uint64[]'])}
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `emergencyWithdrawRewards(uint64)void` ABI method.
     *
     * Emergency withdraw rewards from pool (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    emergencyWithdrawRewards: async (params: CallParams<AsaStakingContractArgs['obj']['emergencyWithdrawRewards(uint64)void'] | AsaStakingContractArgs['tuple']['emergencyWithdrawRewards(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AsaStakingContractParamsFactory.emergencyWithdrawRewards(params))
      return {...result, return: result.return as unknown as (undefined | AsaStakingContractReturns['emergencyWithdrawRewards(uint64)void'])}
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `deleteUserBox(account)void` ABI method.
     *
    * Delete a user's box (for cleanup)
    Can only be called by the box owner or admin

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    deleteUserBox: async (params: CallParams<AsaStakingContractArgs['obj']['deleteUserBox(account)void'] | AsaStakingContractArgs['tuple']['deleteUserBox(account)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AsaStakingContractParamsFactory.deleteUserBox(params))
      return {...result, return: result.return as unknown as (undefined | AsaStakingContractReturns['deleteUserBox(account)void'])}
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `updateWeeklyRewards(uint64)void` ABI method.
     *
     * Update weekly rewards amount (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateWeeklyRewards: async (params: CallParams<AsaStakingContractArgs['obj']['updateWeeklyRewards(uint64)void'] | AsaStakingContractArgs['tuple']['updateWeeklyRewards(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AsaStakingContractParamsFactory.updateWeeklyRewards(params))
      return {...result, return: result.return as unknown as (undefined | AsaStakingContractReturns['updateWeeklyRewards(uint64)void'])}
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `updateRewardPeriod(uint64)void` ABI method.
     *
     * Update reward period (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateRewardPeriod: async (params: CallParams<AsaStakingContractArgs['obj']['updateRewardPeriod(uint64)void'] | AsaStakingContractArgs['tuple']['updateRewardPeriod(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AsaStakingContractParamsFactory.updateRewardPeriod(params))
      return {...result, return: result.return as unknown as (undefined | AsaStakingContractReturns['updateRewardPeriod(uint64)void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new AsaStakingContractClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the ASAStakingContract smart contract using the `getCurrentAPY()uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Calculate current APY based on total staked amount
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getCurrentApy(params: CallParams<AsaStakingContractArgs['obj']['getCurrentAPY()uint64'] | AsaStakingContractArgs['tuple']['getCurrentAPY()uint64']> = {args: []}) {
    const result = await this.appClient.send.call(AsaStakingContractParamsFactory.getCurrentApy(params))
    return result.return as unknown as AsaStakingContractReturns['getCurrentAPY()uint64']
  }

  /**
   * Makes a readonly (simulated) call to the ASAStakingContract smart contract using the `getPendingRewards(account)uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Get pending rewards for a specific user
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getPendingRewards(params: CallParams<AsaStakingContractArgs['obj']['getPendingRewards(account)uint64'] | AsaStakingContractArgs['tuple']['getPendingRewards(account)uint64']>) {
    const result = await this.appClient.send.call(AsaStakingContractParamsFactory.getPendingRewards(params))
    return result.return as unknown as AsaStakingContractReturns['getPendingRewards(account)uint64']
  }

  /**
   * Makes a readonly (simulated) call to the ASAStakingContract smart contract using the `getUserStats(account)uint64[]` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Get current staking statistics for a user
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getUserStats(params: CallParams<AsaStakingContractArgs['obj']['getUserStats(account)uint64[]'] | AsaStakingContractArgs['tuple']['getUserStats(account)uint64[]']>) {
    const result = await this.appClient.send.call(AsaStakingContractParamsFactory.getUserStats(params))
    return result.return as unknown as AsaStakingContractReturns['getUserStats(account)uint64[]']
  }

  /**
   * Makes a readonly (simulated) call to the ASAStakingContract smart contract using the `getContractStats()uint64[]` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Get contract global statistics
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getContractStats(params: CallParams<AsaStakingContractArgs['obj']['getContractStats()uint64[]'] | AsaStakingContractArgs['tuple']['getContractStats()uint64[]']> = {args: []}) {
    const result = await this.appClient.send.call(AsaStakingContractParamsFactory.getContractStats(params))
    return result.return as unknown as AsaStakingContractReturns['getContractStats()uint64[]']
  }

  /**
   * Methods to access state for the current ASAStakingContract app
   */
  state = {
    /**
     * Methods to access global state for the current ASAStakingContract app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          asset: result.asset,
          adminAddress: result.adminAddress,
          totalStaked: result.totalStaked,
          lastRewardTime: result.lastRewardTime,
          minimumStake: result.minimumStake,
          rewardPool: result.rewardPool,
          accumulatedRewardsPerShare: result.accumulatedRewardsPerShare,
          weeklyRewards: result.weeklyRewards,
          rewardPeriod: result.rewardPeriod,
        }
      },
      /**
       * Get the current value of the asset key in global state
       */
      asset: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("asset")) as bigint | undefined },
      /**
       * Get the current value of the adminAddress key in global state
       */
      adminAddress: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("adminAddress")) as string | undefined },
      /**
       * Get the current value of the totalStaked key in global state
       */
      totalStaked: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalStaked")) as bigint | undefined },
      /**
       * Get the current value of the lastRewardTime key in global state
       */
      lastRewardTime: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("lastRewardTime")) as bigint | undefined },
      /**
       * Get the current value of the minimumStake key in global state
       */
      minimumStake: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("minimumStake")) as bigint | undefined },
      /**
       * Get the current value of the rewardPool key in global state
       */
      rewardPool: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("rewardPool")) as bigint | undefined },
      /**
       * Get the current value of the accumulatedRewardsPerShare key in global state
       */
      accumulatedRewardsPerShare: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("accumulatedRewardsPerShare")) as bigint | undefined },
      /**
       * Get the current value of the weeklyRewards key in global state
       */
      weeklyRewards: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("weeklyRewards")) as bigint | undefined },
      /**
       * Get the current value of the rewardPeriod key in global state
       */
      rewardPeriod: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("rewardPeriod")) as bigint | undefined },
    },
    /**
     * Methods to access box state for the current ASAStakingContract app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the stakers map in box state
       */
      stakers: {
        /**
         * Get all current values of the stakers map in box state
         */
        getMap: async (): Promise<Map<string, UserStakeInfo>> => { return (await this.appClient.state.box.getMap("stakers")) as Map<string, UserStakeInfo> },
        /**
         * Get a current value of the stakers map by key from box state
         */
        value: async (key: string): Promise<UserStakeInfo | undefined> => { return await this.appClient.state.box.getMapValue("stakers", key) as UserStakeInfo | undefined },
      },
    },
  }

  public newGroup(): AsaStakingContractComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a getUserStakeInfo(account)(uint64,uint64,uint64,uint64,uint64) method call against the ASAStakingContract contract
       */
      getUserStakeInfo(params: CallParams<AsaStakingContractArgs['obj']['getUserStakeInfo(account)(uint64,uint64,uint64,uint64,uint64)'] | AsaStakingContractArgs['tuple']['getUserStakeInfo(account)(uint64,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getUserStakeInfo(params)))
        resultMappers.push((v) => client.decodeReturnValue('getUserStakeInfo(account)(uint64,uint64,uint64,uint64,uint64)', v))
        return this
      },
      /**
       * Add a storeUserStakeInfo(account,(uint64,uint64,uint64,uint64,uint64))void method call against the ASAStakingContract contract
       */
      storeUserStakeInfo(params: CallParams<AsaStakingContractArgs['obj']['storeUserStakeInfo(account,(uint64,uint64,uint64,uint64,uint64))void'] | AsaStakingContractArgs['tuple']['storeUserStakeInfo(account,(uint64,uint64,uint64,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.storeUserStakeInfo(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a initialize(asset,account,uint64,uint64,uint64)void method call against the ASAStakingContract contract
       */
      initialize(params: CallParams<AsaStakingContractArgs['obj']['initialize(asset,account,uint64,uint64,uint64)void'] | AsaStakingContractArgs['tuple']['initialize(asset,account,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.initialize(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a optInToAsset()void method call against the ASAStakingContract contract
       */
      optInToAsset(params: CallParams<AsaStakingContractArgs['obj']['optInToAsset()void'] | AsaStakingContractArgs['tuple']['optInToAsset()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.optInToAsset(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a stake()void method call against the ASAStakingContract contract
       */
      stake(params: CallParams<AsaStakingContractArgs['obj']['stake()void'] | AsaStakingContractArgs['tuple']['stake()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.stake(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a withdraw(uint64)void method call against the ASAStakingContract contract
       */
      withdraw(params: CallParams<AsaStakingContractArgs['obj']['withdraw(uint64)void'] | AsaStakingContractArgs['tuple']['withdraw(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.withdraw(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a addRewards()void method call against the ASAStakingContract contract
       */
      addRewards(params: CallParams<AsaStakingContractArgs['obj']['addRewards()void'] | AsaStakingContractArgs['tuple']['addRewards()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.addRewards(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getCurrentAPY()uint64 method call against the ASAStakingContract contract
       */
      getCurrentApy(params: CallParams<AsaStakingContractArgs['obj']['getCurrentAPY()uint64'] | AsaStakingContractArgs['tuple']['getCurrentAPY()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getCurrentApy(params)))
        resultMappers.push((v) => client.decodeReturnValue('getCurrentAPY()uint64', v))
        return this
      },
      /**
       * Add a getPendingRewards(account)uint64 method call against the ASAStakingContract contract
       */
      getPendingRewards(params: CallParams<AsaStakingContractArgs['obj']['getPendingRewards(account)uint64'] | AsaStakingContractArgs['tuple']['getPendingRewards(account)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getPendingRewards(params)))
        resultMappers.push((v) => client.decodeReturnValue('getPendingRewards(account)uint64', v))
        return this
      },
      /**
       * Add a triggerRewardDistribution()void method call against the ASAStakingContract contract
       */
      triggerRewardDistribution(params: CallParams<AsaStakingContractArgs['obj']['triggerRewardDistribution()void'] | AsaStakingContractArgs['tuple']['triggerRewardDistribution()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.triggerRewardDistribution(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a updateAdmin(account)void method call against the ASAStakingContract contract
       */
      updateAdmin(params: CallParams<AsaStakingContractArgs['obj']['updateAdmin(account)void'] | AsaStakingContractArgs['tuple']['updateAdmin(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateAdmin(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getUserStats(account)uint64[] method call against the ASAStakingContract contract
       */
      getUserStats(params: CallParams<AsaStakingContractArgs['obj']['getUserStats(account)uint64[]'] | AsaStakingContractArgs['tuple']['getUserStats(account)uint64[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getUserStats(params)))
        resultMappers.push((v) => client.decodeReturnValue('getUserStats(account)uint64[]', v))
        return this
      },
      /**
       * Add a getContractStats()uint64[] method call against the ASAStakingContract contract
       */
      getContractStats(params: CallParams<AsaStakingContractArgs['obj']['getContractStats()uint64[]'] | AsaStakingContractArgs['tuple']['getContractStats()uint64[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getContractStats(params)))
        resultMappers.push((v) => client.decodeReturnValue('getContractStats()uint64[]', v))
        return this
      },
      /**
       * Add a emergencyWithdrawRewards(uint64)void method call against the ASAStakingContract contract
       */
      emergencyWithdrawRewards(params: CallParams<AsaStakingContractArgs['obj']['emergencyWithdrawRewards(uint64)void'] | AsaStakingContractArgs['tuple']['emergencyWithdrawRewards(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.emergencyWithdrawRewards(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a deleteUserBox(account)void method call against the ASAStakingContract contract
       */
      deleteUserBox(params: CallParams<AsaStakingContractArgs['obj']['deleteUserBox(account)void'] | AsaStakingContractArgs['tuple']['deleteUserBox(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.deleteUserBox(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a updateWeeklyRewards(uint64)void method call against the ASAStakingContract contract
       */
      updateWeeklyRewards(params: CallParams<AsaStakingContractArgs['obj']['updateWeeklyRewards(uint64)void'] | AsaStakingContractArgs['tuple']['updateWeeklyRewards(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateWeeklyRewards(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a updateRewardPeriod(uint64)void method call against the ASAStakingContract contract
       */
      updateRewardPeriod(params: CallParams<AsaStakingContractArgs['obj']['updateRewardPeriod(uint64)void'] | AsaStakingContractArgs['tuple']['updateRewardPeriod(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateRewardPeriod(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the ASAStakingContract contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as AsaStakingContractComposer
  }
}
export type AsaStakingContractComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the getUserStakeInfo(account)(uint64,uint64,uint64,uint64,uint64) ABI method.
   *
   * Helper function to read user stake info from box storage
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getUserStakeInfo(params?: CallParams<AsaStakingContractArgs['obj']['getUserStakeInfo(account)(uint64,uint64,uint64,uint64,uint64)'] | AsaStakingContractArgs['tuple']['getUserStakeInfo(account)(uint64,uint64,uint64,uint64,uint64)']>): AsaStakingContractComposer<[...TReturns, AsaStakingContractReturns['getUserStakeInfo(account)(uint64,uint64,uint64,uint64,uint64)'] | undefined]>

  /**
   * Calls the storeUserStakeInfo(account,(uint64,uint64,uint64,uint64,uint64))void ABI method.
   *
   * Helper function to store user stake info in box storage
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  storeUserStakeInfo(params?: CallParams<AsaStakingContractArgs['obj']['storeUserStakeInfo(account,(uint64,uint64,uint64,uint64,uint64))void'] | AsaStakingContractArgs['tuple']['storeUserStakeInfo(account,(uint64,uint64,uint64,uint64,uint64))void']>): AsaStakingContractComposer<[...TReturns, AsaStakingContractReturns['storeUserStakeInfo(account,(uint64,uint64,uint64,uint64,uint64))void'] | undefined]>

  /**
   * Calls the initialize(asset,account,uint64,uint64,uint64)void ABI method.
   *
   * Initialize the contract with the ASA token ID and other parameters
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  initialize(params?: CallParams<AsaStakingContractArgs['obj']['initialize(asset,account,uint64,uint64,uint64)void'] | AsaStakingContractArgs['tuple']['initialize(asset,account,uint64,uint64,uint64)void']>): AsaStakingContractComposer<[...TReturns, AsaStakingContractReturns['initialize(asset,account,uint64,uint64,uint64)void'] | undefined]>

  /**
   * Calls the optInToAsset()void ABI method.
   *
   * Opt the contract into the ASA
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  optInToAsset(params?: CallParams<AsaStakingContractArgs['obj']['optInToAsset()void'] | AsaStakingContractArgs['tuple']['optInToAsset()void']>): AsaStakingContractComposer<[...TReturns, AsaStakingContractReturns['optInToAsset()void'] | undefined]>

  /**
   * Calls the stake()void ABI method.
   *
  * Stake tokens
  Requires a companion ASA transfer transaction
  Automatically claims pending rewards

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  stake(params?: CallParams<AsaStakingContractArgs['obj']['stake()void'] | AsaStakingContractArgs['tuple']['stake()void']>): AsaStakingContractComposer<[...TReturns, AsaStakingContractReturns['stake()void'] | undefined]>

  /**
   * Calls the withdraw(uint64)void ABI method.
   *
  * Withdraw staked tokens
  Automatically claims pending rewards

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  withdraw(params?: CallParams<AsaStakingContractArgs['obj']['withdraw(uint64)void'] | AsaStakingContractArgs['tuple']['withdraw(uint64)void']>): AsaStakingContractComposer<[...TReturns, AsaStakingContractReturns['withdraw(uint64)void'] | undefined]>

  /**
   * Calls the addRewards()void ABI method.
   *
  * Add rewards to the reward pool
  Only the admin can call this
  Requires a companion ASA transfer transaction with the rewards

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addRewards(params?: CallParams<AsaStakingContractArgs['obj']['addRewards()void'] | AsaStakingContractArgs['tuple']['addRewards()void']>): AsaStakingContractComposer<[...TReturns, AsaStakingContractReturns['addRewards()void'] | undefined]>

  /**
   * Calls the getCurrentAPY()uint64 ABI method.
   *
   * Calculate current APY based on total staked amount
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getCurrentApy(params?: CallParams<AsaStakingContractArgs['obj']['getCurrentAPY()uint64'] | AsaStakingContractArgs['tuple']['getCurrentAPY()uint64']>): AsaStakingContractComposer<[...TReturns, AsaStakingContractReturns['getCurrentAPY()uint64'] | undefined]>

  /**
   * Calls the getPendingRewards(account)uint64 ABI method.
   *
   * Get pending rewards for a specific user
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getPendingRewards(params?: CallParams<AsaStakingContractArgs['obj']['getPendingRewards(account)uint64'] | AsaStakingContractArgs['tuple']['getPendingRewards(account)uint64']>): AsaStakingContractComposer<[...TReturns, AsaStakingContractReturns['getPendingRewards(account)uint64'] | undefined]>

  /**
   * Calls the triggerRewardDistribution()void ABI method.
   *
  * Trigger reward distribution manually (admin only)
  Updates accumulated rewards per share if period has passed

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  triggerRewardDistribution(params?: CallParams<AsaStakingContractArgs['obj']['triggerRewardDistribution()void'] | AsaStakingContractArgs['tuple']['triggerRewardDistribution()void']>): AsaStakingContractComposer<[...TReturns, AsaStakingContractReturns['triggerRewardDistribution()void'] | undefined]>

  /**
   * Calls the updateAdmin(account)void ABI method.
   *
  * Update the admin address
  Only the current admin can call this

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateAdmin(params?: CallParams<AsaStakingContractArgs['obj']['updateAdmin(account)void'] | AsaStakingContractArgs['tuple']['updateAdmin(account)void']>): AsaStakingContractComposer<[...TReturns, AsaStakingContractReturns['updateAdmin(account)void'] | undefined]>

  /**
   * Calls the getUserStats(account)uint64[] ABI method.
   *
   * Get current staking statistics for a user
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getUserStats(params?: CallParams<AsaStakingContractArgs['obj']['getUserStats(account)uint64[]'] | AsaStakingContractArgs['tuple']['getUserStats(account)uint64[]']>): AsaStakingContractComposer<[...TReturns, AsaStakingContractReturns['getUserStats(account)uint64[]'] | undefined]>

  /**
   * Calls the getContractStats()uint64[] ABI method.
   *
   * Get contract global statistics
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getContractStats(params?: CallParams<AsaStakingContractArgs['obj']['getContractStats()uint64[]'] | AsaStakingContractArgs['tuple']['getContractStats()uint64[]']>): AsaStakingContractComposer<[...TReturns, AsaStakingContractReturns['getContractStats()uint64[]'] | undefined]>

  /**
   * Calls the emergencyWithdrawRewards(uint64)void ABI method.
   *
   * Emergency withdraw rewards from pool (admin only)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  emergencyWithdrawRewards(params?: CallParams<AsaStakingContractArgs['obj']['emergencyWithdrawRewards(uint64)void'] | AsaStakingContractArgs['tuple']['emergencyWithdrawRewards(uint64)void']>): AsaStakingContractComposer<[...TReturns, AsaStakingContractReturns['emergencyWithdrawRewards(uint64)void'] | undefined]>

  /**
   * Calls the deleteUserBox(account)void ABI method.
   *
  * Delete a user's box (for cleanup)
  Can only be called by the box owner or admin

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  deleteUserBox(params?: CallParams<AsaStakingContractArgs['obj']['deleteUserBox(account)void'] | AsaStakingContractArgs['tuple']['deleteUserBox(account)void']>): AsaStakingContractComposer<[...TReturns, AsaStakingContractReturns['deleteUserBox(account)void'] | undefined]>

  /**
   * Calls the updateWeeklyRewards(uint64)void ABI method.
   *
   * Update weekly rewards amount (admin only)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateWeeklyRewards(params?: CallParams<AsaStakingContractArgs['obj']['updateWeeklyRewards(uint64)void'] | AsaStakingContractArgs['tuple']['updateWeeklyRewards(uint64)void']>): AsaStakingContractComposer<[...TReturns, AsaStakingContractReturns['updateWeeklyRewards(uint64)void'] | undefined]>

  /**
   * Calls the updateRewardPeriod(uint64)void ABI method.
   *
   * Update reward period (admin only)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateRewardPeriod(params?: CallParams<AsaStakingContractArgs['obj']['updateRewardPeriod(uint64)void'] | AsaStakingContractArgs['tuple']['updateRewardPeriod(uint64)void']>): AsaStakingContractComposer<[...TReturns, AsaStakingContractReturns['updateRewardPeriod(uint64)void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the ASAStakingContract smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): AsaStakingContractComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): AsaStakingContractComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<AsaStakingContractComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<AsaStakingContractComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<AsaStakingContractComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<AsaStakingContractComposerResults<TReturns>>
}
export type AsaStakingContractComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

