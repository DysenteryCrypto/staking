{
    "name": "ASAStakingContract",
    "structs": {
        "UserStakeInfo": [
            {
                "name": "stakedAmount",
                "type": "uint64"
            },
            {
                "name": "lastStakeTime",
                "type": "uint64"
            },
            {
                "name": "totalRewardsEarned",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "getUserBoxName",
            "args": [
                {
                    "type": "account",
                    "name": "userAddress"
                }
            ],
            "returns": {
                "type": "address"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Helper function to get a user's box name\nUser address is used as the box name for simplicity",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getUserStakeInfo",
            "args": [
                {
                    "type": "account",
                    "name": "userAddress"
                }
            ],
            "returns": {
                "type": "(uint64,uint64,uint64)",
                "struct": "UserStakeInfo"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Helper function to read user stake info from box storage",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "storeUserStakeInfo",
            "args": [
                {
                    "type": "account",
                    "name": "userAddress"
                },
                {
                    "type": "(uint64,uint64,uint64)",
                    "struct": "UserStakeInfo",
                    "name": "stakeInfo"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Helper function to store user stake info in box storage",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "initialize",
            "args": [
                {
                    "type": "uint64",
                    "name": "assetId"
                },
                {
                    "type": "account",
                    "name": "adminAddress"
                },
                {
                    "type": "uint64",
                    "name": "aprBasisPoints"
                },
                {
                    "type": "uint64",
                    "name": "distributionPeriodSeconds"
                },
                {
                    "type": "uint64",
                    "name": "minimumStake"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Initialize the contract with the ASA token ID and other parameters",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "optInToAsset",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Opt the contract into the ASA",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "stake",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Stake tokens\nRequires a companion ASA transfer transaction",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "withdraw",
            "args": [
                {
                    "type": "uint64",
                    "name": "amount"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Withdraw staked tokens",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "distributeRewards",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Distribute rewards to all stakers\nOnly the admin can call this\nRequires a companion ASA transfer transaction with the rewards",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "calculateUserRewards",
            "args": [
                {
                    "type": "account",
                    "name": "userAddress"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Calculate rewards for a specific user\nThis is a read-only method that doesn't modify state",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "claimRewards",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Claim rewards for the caller\nThis implements the pull-based reward model",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "updateAPR",
            "args": [
                {
                    "type": "uint64",
                    "name": "newAprBasisPoints"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Update the APR basis points\nOnly the admin can call this",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "updateAdmin",
            "args": [
                {
                    "type": "account",
                    "name": "newAdminAddress"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Update the admin address\nOnly the current admin can call this",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getUserStats",
            "args": [
                {
                    "type": "account",
                    "name": "userAddress"
                }
            ],
            "returns": {
                "type": "uint64[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get current staking statistics for a user",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getContractStats",
            "args": [],
            "returns": {
                "type": "uint64[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get contract global statistics",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "deleteUserBox",
            "args": [
                {
                    "type": "account",
                    "name": "userAddress"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Delete a user's box (for cleanup)\nCan only be called by the box owner or admin",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "desc": "ASA Staking Contract for Algorand\n\nThis contract allows users to:\n- Stake an ASA token\n- Earn daily rewards that compound automatically\n- Add to their stake at any time\n- Withdraw part or all of their stake at any time\n- Rewards paid out if staked for at least 24 hours before distribution\n\nThis implementation uses box storage to store user staking information",
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 6,
                "bytes": 7
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "assetId": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "YXNzZXRJZA=="
                },
                "adminAddress": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "YWRtaW5BZGRyZXNz"
                },
                "totalStaked": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dG90YWxTdGFrZWQ="
                },
                "aprBasisPoints": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "YXByQmFzaXNQb2ludHM="
                },
                "lastDistributionTime": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bGFzdERpc3RyaWJ1dGlvblRpbWU="
                },
                "distributionPeriodSeconds": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "ZGlzdHJpYnV0aW9uUGVyaW9kU2Vjb25kcw=="
                },
                "minimumStake": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bWluaW11bVN0YWtl"
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "stakers": {
                    "keyType": "address",
                    "valueType": "UserStakeInfo",
                    "prefix": "c3Rha2Vycw=="
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        646
                    ],
                    "errorMessage": "Already initialized"
                },
                {
                    "pc": [
                        776,
                        978
                    ],
                    "errorMessage": "Asset transfer must be to contract"
                },
                {
                    "pc": [
                        583
                    ],
                    "errorMessage": "Box must have value"
                },
                {
                    "pc": [
                        1003
                    ],
                    "errorMessage": "Distribution period has not passed"
                },
                {
                    "pc": [
                        759,
                        957
                    ],
                    "errorMessage": "Expected 2 txns in group"
                },
                {
                    "pc": [
                        788,
                        987
                    ],
                    "errorMessage": "Incorrect asset ID"
                },
                {
                    "pc": [
                        812
                    ],
                    "errorMessage": "Initial stake below minimum"
                },
                {
                    "pc": [
                        982
                    ],
                    "errorMessage": "Must provide non-zero rewards"
                },
                {
                    "pc": [
                        783
                    ],
                    "errorMessage": "Must stake non-zero amount"
                },
                {
                    "pc": [
                        1117
                    ],
                    "errorMessage": "No rewards to claim"
                },
                {
                    "pc": [
                        862,
                        1110
                    ],
                    "errorMessage": "No stake found"
                },
                {
                    "pc": [
                        278,
                        296,
                        313,
                        336,
                        354,
                        370,
                        382,
                        406,
                        418,
                        434,
                        446,
                        458,
                        492,
                        514,
                        537
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        951
                    ],
                    "errorMessage": "Only admin can distribute rewards"
                },
                {
                    "pc": [
                        1164
                    ],
                    "errorMessage": "Only admin can update APR"
                },
                {
                    "pc": [
                        1181
                    ],
                    "errorMessage": "Only admin can update admin"
                },
                {
                    "pc": [
                        1322
                    ],
                    "errorMessage": "Only box owner or admin can delete box"
                },
                {
                    "pc": [
                        652
                    ],
                    "errorMessage": "Only creator can initialize"
                },
                {
                    "pc": [
                        708
                    ],
                    "errorMessage": "Only creator or admin can opt in"
                },
                {
                    "pc": [
                        889
                    ],
                    "errorMessage": "Remaining stake would be below minimum"
                },
                {
                    "pc": [
                        769,
                        971
                    ],
                    "errorMessage": "Transaction 1 must be asset transfer"
                },
                {
                    "pc": [
                        1331
                    ],
                    "errorMessage": "User still has active stake"
                },
                {
                    "pc": [
                        868
                    ],
                    "errorMessage": "Withdrawal amount exceeds stake"
                },
                {
                    "pc": [
                        871
                    ],
                    "errorMessage": "Withdrawal amount must be positive"
                },
                {
                    "pc": [
                        753
                    ],
                    "errorMessage": "account opted into asset"
                },
                {
                    "pc": [
                        562
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        281,
                        299,
                        316,
                        339,
                        357,
                        373,
                        385,
                        409,
                        421,
                        437,
                        449,
                        461,
                        495,
                        517,
                        540
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        644,
                        690,
                        712,
                        744,
                        793,
                        842,
                        887,
                        911,
                        921,
                        947,
                        961,
                        993,
                        998,
                        1019,
                        1024,
                        1028,
                        1059,
                        1148,
                        1160,
                        1177,
                        1240,
                        1244,
                        1249,
                        1253,
                        1258,
                        1263,
                        1304
                    ],
                    "errorMessage": "check GlobalState exists"
                },
                {
                    "pc": [
                        766,
                        968
                    ],
                    "errorMessage": "transaction type is axfer"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "CiAEAAEECCYJC3RvdGFsU3Rha2VkB2Fzc2V0SWQMYWRtaW5BZGRyZXNzFGxhc3REaXN0cmlidXRpb25UaW1lDmFwckJhc2lzUG9pbnRzDG1pbmltdW1TdGFrZQQVH3x1GWRpc3RyaWJ1dGlvblBlcmlvZFNlY29uZHMHc3Rha2VyczEYQAAVKSJnKCJnJwQiZysiZycHImcnBSJnMRtBAYmCDwSptWs4BBJLoCYEg3hpVARBhLsXBJ/9PlMECJC9WAQh8d3/BLCpOAcEQRzsIwSlrmvRBB5mEr0EgqsexAQVdmsJBL/jFWQE3JoqBTYaAI4PAQUA7gDYALYAqgCeAI4AggBqAF4ATgA8ACUAFAACIkMxGRREMRhENhoBF8AciAPuI0MxGRREMRhEiAOmJwZMULAjQzEZFEQxGEQ2GgEXwByIA10nBkxQsCNDMRkURDEYRDYaARfAHIgDNiNDMRkURDEYRDYaAReIAxUjQzEZFEQxGESIAtMjQzEZFEQxGEQ2GgEXwByIAmUWJwZMULAjQzEZFEQxGESIAhMjQzEZFEQxGEQ2GgEXiAGjI0MxGRREMRhEiAEpI0MxGRREMRhEiADnI0MxGRREMRhENhoBFzYaAhfAHDYaAxc2GgQXNhoFF4gAlyNDMRkURDEYRDYaARfAHDYaAogAakgjQzEZFEQxGEQ2GgEXwByIACYnBkxQsCNDMRkURDEYRDYaARfAHCcGTFCwI0MxGUD+4jEYFEQjQ4oBAScIi/9QSb1FAUEABosAvkRMiYAYAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAATImKAgEnCIv+UEm9RQFBAAWLAIv/v4v/TImKBQAiKWVEFEQxADIJEkQpi/tnKov8ZygiZycEi/1nKzIHZycHi/5nJwWL/2eJigAAIiplRDEAMgkSQAAIMQCLABJBABsjRCIpZUSxMgpMshEishKyFCSyEIHoB7IBs4kiQv/iigAAIillRDIKSwFwAEUBRDIEgQISRCM4EEkkEkQkEkQjOBQyChJEIzgSSU4CRCM4ERJEIicFZUQxAEmI/xVJIltJQAAGiwCLAQ9EiwSLAElOAggWiwNMXAAyBxZcCIsCTIj/IEgiKGVECChMZ4mKAQAxAEmI/txJIltHAkSL/0sBDkSL/0SL/w1BAAyLAov/CSInBWVED0SLAov/CRaLAUxcAIsATIj+20giKGVEi/8JKExnIillRLExAEyyEYv/shKyFCSyEIHoB7IBs4kiKmVEMQASRDIEgQISRCIpZUQjOBBJJBJEJBJEIzgUMgoSRCM4EkQjOBESRDIHIitlRCInB2VECEsBDkQrTGeJigEBIoAAIillRQFEIicEZUQiKGVEQAAEIowAiYv/iP4kSYwAIltJjAFAAAQijACJIitlRIsAJVuBgKMFCAxBAAQijACJiwKBZAuB7QIKgZBOC4sBC4GQTgqMAIkxAEmI/eNJIltJRDEAiP+USURMSwEIFk8CTFwASYEQW0sCCBZcEE8CTIj97kgiKGVECChMZ4mKAQAiKmVEMQASRCcEi/9niYoBACIqZUQxABJEKov/Z4mKAQGL/4j9ikkiW0sBJVtPAoEQW4v/iP80TwMWTwMWUE8CFlBMFlBJFSUKFlcGAkxQiSIpZUQiKGVEIicEZUQiK2VEIicHZUQiJwVlRE8FFk8FFlBPBBZQTwMWUE8CFlBMFlBJFSUKFlcGAkxQiYoBACJJKmVEMQCL/xJAAAgxAIsBEkEAHiNEi/+I/QUiWxREJwiL/1BJjAC9RQFBAASLALxIiSJC/98=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 7,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}