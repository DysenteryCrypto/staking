{
    "name": "ASAStakingContract",
    "structs": {
        "UserStakeInfo": [
            {
                "name": "stakedAmount",
                "type": "uint64"
            },
            {
                "name": "lastStakeTime",
                "type": "uint64"
            },
            {
                "name": "totalRewardsEarned",
                "type": "uint64"
            },
            {
                "name": "lastClaimedPeriod",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "getUserStakeInfo",
            "args": [
                {
                    "type": "account",
                    "name": "userAddress"
                }
            ],
            "returns": {
                "type": "(uint64,uint64,uint64,uint64)",
                "struct": "UserStakeInfo"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Helper function to read user stake info from box storage",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "storeUserStakeInfo",
            "args": [
                {
                    "type": "account",
                    "name": "userAddress"
                },
                {
                    "type": "(uint64,uint64,uint64,uint64)",
                    "struct": "UserStakeInfo",
                    "name": "stakeInfo"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Helper function to store user stake info in box storage",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getCurrentPeriod",
            "args": [],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Calculate the current distribution period",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "initialize",
            "args": [
                {
                    "type": "asset",
                    "name": "asset"
                },
                {
                    "type": "account",
                    "name": "adminAddress"
                },
                {
                    "type": "uint64",
                    "name": "aprBasisPoints"
                },
                {
                    "type": "uint64",
                    "name": "distributionPeriodSeconds"
                },
                {
                    "type": "uint64",
                    "name": "minimumStake"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Initialize the contract with the ASA token ID and other parameters",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "optInToAsset",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Opt the contract into the ASA",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "stake",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Stake tokens\nRequires a companion ASA transfer transaction",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "withdraw",
            "args": [
                {
                    "type": "uint64",
                    "name": "amount"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Withdraw staked tokens",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "addRewards",
            "args": [],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Add rewards to the reward pool\nOnly the admin can call this\nRequires a companion ASA transfer transaction with the rewards",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "calculateUserRewardsForPeriod",
            "args": [
                {
                    "type": "account",
                    "name": "userAddress"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Calculate rewards for a specific user for a given period\nThis calculates rewards per distribution period",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "calculatePendingRewards",
            "args": [
                {
                    "type": "account",
                    "name": "userAddress"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Calculate pending rewards for a user since their last claim",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "distributeRewards",
            "args": [
                {
                    "type": "address[]",
                    "name": "stakerAddresses"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Distribute and compound rewards for multiple stakers\nThis method is designed to be called by a cron job on a daily basis\nOnly admin can call this method",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getActiveStakersCount",
            "args": [
                {
                    "type": "address[]",
                    "name": "stakerAddresses"
                }
            ],
            "returns": {
                "type": "uint64"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get all non-zero stakers count (for monitoring purposes)\nNote: This doesn't return the actual addresses due to box iteration limitations",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "updateAPR",
            "args": [
                {
                    "type": "uint64",
                    "name": "newAprBasisPoints"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Update the APR basis points\nOnly the admin can call this",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "updateAdmin",
            "args": [
                {
                    "type": "account",
                    "name": "newAdminAddress"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Update the admin address\nOnly the current admin can call this",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getUserStats",
            "args": [
                {
                    "type": "account",
                    "name": "userAddress"
                }
            ],
            "returns": {
                "type": "uint64[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get current staking statistics for a user",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "getContractStats",
            "args": [],
            "returns": {
                "type": "uint64[]"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": true,
            "desc": "Get contract global statistics",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "emergencyWithdrawRewards",
            "args": [
                {
                    "type": "uint64",
                    "name": "amount"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Emergency withdraw rewards from pool (admin only)",
            "events": [],
            "recommendations": {}
        },
        {
            "name": "deleteUserBox",
            "args": [
                {
                    "type": "account",
                    "name": "userAddress"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "desc": "Delete a user's box (for cleanup)\nCan only be called by the box owner or admin",
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "desc": "ASA Staking Contract for Algorand with Auto-Compounding\n\nThis contract allows users to:\n- Stake an ASA token\n- Earn rewards that compound automatically when claimed\n- Add to their stake at any time\n- Withdraw part or all of their stake at any time\n- Rewards are calculated based on APR and distributed from a reward pool\n\nThis implementation uses box storage to store user staking information",
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 7,
                "bytes": 8
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "asset": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "YXNzZXQ="
                },
                "adminAddress": {
                    "keyType": "AVMString",
                    "valueType": "address",
                    "key": "YWRtaW5BZGRyZXNz"
                },
                "totalStaked": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dG90YWxTdGFrZWQ="
                },
                "aprBasisPoints": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "YXByQmFzaXNQb2ludHM="
                },
                "lastDistributionTime": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bGFzdERpc3RyaWJ1dGlvblRpbWU="
                },
                "distributionPeriodSeconds": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "ZGlzdHJpYnV0aW9uUGVyaW9kU2Vjb25kcw=="
                },
                "minimumStake": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bWluaW11bVN0YWtl"
                },
                "rewardPool": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "cmV3YXJkUG9vbA=="
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "stakers": {
                    "keyType": "address",
                    "valueType": "UserStakeInfo",
                    "prefix": "c3Rha2Vycw=="
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        771
                    ],
                    "errorMessage": "Already initialized"
                },
                {
                    "pc": [
                        899,
                        1112
                    ],
                    "errorMessage": "Asset transfer must be to contract"
                },
                {
                    "pc": [
                        685
                    ],
                    "errorMessage": "Box must have value"
                },
                {
                    "pc": [
                        876
                    ],
                    "errorMessage": "Contract not initialized"
                },
                {
                    "pc": [
                        882,
                        1091
                    ],
                    "errorMessage": "Expected 2 txns in group"
                },
                {
                    "pc": [
                        911,
                        1124
                    ],
                    "errorMessage": "Incorrect asset ID"
                },
                {
                    "pc": [
                        1353,
                        1512
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        935
                    ],
                    "errorMessage": "Initial stake below minimum"
                },
                {
                    "pc": [
                        1738
                    ],
                    "errorMessage": "Insufficient reward pool"
                },
                {
                    "pc": [
                        1117
                    ],
                    "errorMessage": "Must provide non-zero rewards"
                },
                {
                    "pc": [
                        906
                    ],
                    "errorMessage": "Must stake non-zero amount"
                },
                {
                    "pc": [
                        996
                    ],
                    "errorMessage": "No stake found"
                },
                {
                    "pc": [
                        316,
                        334,
                        350,
                        367,
                        390,
                        408,
                        424,
                        445,
                        460,
                        484,
                        508,
                        520,
                        536,
                        548,
                        560,
                        596,
                        614,
                        636
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        1085
                    ],
                    "errorMessage": "Only admin can add rewards"
                },
                {
                    "pc": [
                        1321
                    ],
                    "errorMessage": "Only admin can distribute rewards"
                },
                {
                    "pc": [
                        1730
                    ],
                    "errorMessage": "Only admin can emergency withdraw"
                },
                {
                    "pc": [
                        1559
                    ],
                    "errorMessage": "Only admin can update APR"
                },
                {
                    "pc": [
                        1576
                    ],
                    "errorMessage": "Only admin can update admin"
                },
                {
                    "pc": [
                        1797
                    ],
                    "errorMessage": "Only box owner or admin can delete box"
                },
                {
                    "pc": [
                        777
                    ],
                    "errorMessage": "Only creator can initialize"
                },
                {
                    "pc": [
                        837
                    ],
                    "errorMessage": "Only creator or admin can opt in"
                },
                {
                    "pc": [
                        1023
                    ],
                    "errorMessage": "Remaining stake would be below minimum"
                },
                {
                    "pc": [
                        1330
                    ],
                    "errorMessage": "Too many stakers in single batch"
                },
                {
                    "pc": [
                        892,
                        1105
                    ],
                    "errorMessage": "Transaction 0 must be asset transfer"
                },
                {
                    "pc": [
                        1806
                    ],
                    "errorMessage": "User still has active stake"
                },
                {
                    "pc": [
                        1002
                    ],
                    "errorMessage": "Withdrawal amount exceeds stake"
                },
                {
                    "pc": [
                        1005
                    ],
                    "errorMessage": "Withdrawal amount must be positive"
                },
                {
                    "pc": [
                        664
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        319,
                        337,
                        353,
                        370,
                        393,
                        411,
                        427,
                        448,
                        463,
                        487,
                        511,
                        523,
                        539,
                        551,
                        563,
                        599,
                        617,
                        639
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        749,
                        769,
                        819,
                        841,
                        871,
                        875,
                        916,
                        976,
                        1021,
                        1045,
                        1055,
                        1081,
                        1095,
                        1128,
                        1149,
                        1153,
                        1161,
                        1317,
                        1404,
                        1455,
                        1465,
                        1555,
                        1572,
                        1645,
                        1649,
                        1654,
                        1659,
                        1664,
                        1669,
                        1673,
                        1724,
                        1734,
                        1742,
                        1752,
                        1779
                    ],
                    "errorMessage": "check GlobalState exists"
                },
                {
                    "pc": [
                        889,
                        1102
                    ],
                    "errorMessage": "transaction type is axfer"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "byteCode": {
        "approval": "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",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 7,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}