/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"name":"ASAStakingContract","structs":{"UserStakeInfo":[{"name":"stakedAmount","type":"uint64"},{"name":"lastStakeTime","type":"uint64"},{"name":"totalRewardsEarned","type":"uint64"},{"name":"lastClaimedPeriod","type":"uint64"}]},"methods":[{"name":"getUserStakeInfo","args":[{"type":"account","name":"userAddress"}],"returns":{"type":"(uint64,uint64,uint64,uint64)","struct":"UserStakeInfo"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Helper function to read user stake info from box storage","events":[],"recommendations":{}},{"name":"storeUserStakeInfo","args":[{"type":"account","name":"userAddress"},{"type":"(uint64,uint64,uint64,uint64)","struct":"UserStakeInfo","name":"stakeInfo"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Helper function to store user stake info in box storage","events":[],"recommendations":{}},{"name":"getCurrentPeriod","args":[],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Calculate the current distribution period","events":[],"recommendations":{}},{"name":"initialize","args":[{"type":"asset","name":"asset"},{"type":"account","name":"adminAddress"},{"type":"uint64","name":"aprBasisPoints"},{"type":"uint64","name":"distributionPeriodSeconds"},{"type":"uint64","name":"minimumStake"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Initialize the contract with the ASA token ID and other parameters","events":[],"recommendations":{}},{"name":"optInToAsset","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Opt the contract into the ASA","events":[],"recommendations":{}},{"name":"stake","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Stake tokens\nRequires a companion ASA transfer transaction","events":[],"recommendations":{}},{"name":"withdraw","args":[{"type":"uint64","name":"amount"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Withdraw staked tokens","events":[],"recommendations":{}},{"name":"addRewards","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Add rewards to the reward pool\nOnly the admin can call this\nRequires a companion ASA transfer transaction with the rewards","events":[],"recommendations":{}},{"name":"calculateUserRewardsForPeriod","args":[{"type":"account","name":"userAddress"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Calculate rewards for a specific user for a given period\nThis calculates rewards per distribution period","events":[],"recommendations":{}},{"name":"calculatePendingRewards","args":[{"type":"account","name":"userAddress"}],"returns":{"type":"uint64"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Calculate pending rewards for a user since their last claim","events":[],"recommendations":{}},{"name":"claimRewards","args":[],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Claim rewards for the caller with auto-compounding\nThis implements the pull-based reward model with automatic compounding","events":[],"recommendations":{}},{"name":"updateAPR","args":[{"type":"uint64","name":"newAprBasisPoints"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Update the APR basis points\nOnly the admin can call this","events":[],"recommendations":{}},{"name":"updateAdmin","args":[{"type":"account","name":"newAdminAddress"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Update the admin address\nOnly the current admin can call this","events":[],"recommendations":{}},{"name":"getUserStats","args":[{"type":"account","name":"userAddress"}],"returns":{"type":"uint64[]"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Get current staking statistics for a user","events":[],"recommendations":{}},{"name":"getContractStats","args":[],"returns":{"type":"uint64[]"},"actions":{"create":[],"call":["NoOp"]},"readonly":true,"desc":"Get contract global statistics","events":[],"recommendations":{}},{"name":"emergencyWithdrawRewards","args":[{"type":"uint64","name":"amount"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Emergency withdraw rewards from pool (admin only)","events":[],"recommendations":{}},{"name":"deleteUserBox","args":[{"type":"account","name":"userAddress"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"desc":"Delete a user's box (for cleanup)\nCan only be called by the box owner or admin","events":[],"recommendations":{}}],"arcs":[22,28],"desc":"ASA Staking Contract for Algorand with Auto-Compounding\n\nThis contract allows users to:\n- Stake an ASA token\n- Earn rewards that compound automatically when claimed\n- Add to their stake at any time\n- Withdraw part or all of their stake at any time\n- Rewards are calculated based on APR and distributed from a reward pool\n\nThis implementation uses box storage to store user staking information","networks":{},"state":{"schema":{"global":{"ints":7,"bytes":8},"local":{"ints":0,"bytes":0}},"keys":{"global":{"asset":{"keyType":"AVMString","valueType":"AVMUint64","key":"YXNzZXQ="},"adminAddress":{"keyType":"AVMString","valueType":"address","key":"YWRtaW5BZGRyZXNz"},"totalStaked":{"keyType":"AVMString","valueType":"AVMUint64","key":"dG90YWxTdGFrZWQ="},"aprBasisPoints":{"keyType":"AVMString","valueType":"AVMUint64","key":"YXByQmFzaXNQb2ludHM="},"lastDistributionTime":{"keyType":"AVMString","valueType":"AVMUint64","key":"bGFzdERpc3RyaWJ1dGlvblRpbWU="},"distributionPeriodSeconds":{"keyType":"AVMString","valueType":"AVMUint64","key":"ZGlzdHJpYnV0aW9uUGVyaW9kU2Vjb25kcw=="},"minimumStake":{"keyType":"AVMString","valueType":"AVMUint64","key":"bWluaW11bVN0YWtl"},"rewardPool":{"keyType":"AVMString","valueType":"AVMUint64","key":"cmV3YXJkUG9vbA=="}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"stakers":{"keyType":"address","valueType":"UserStakeInfo","prefix":"c3Rha2Vycw=="}}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[740],"errorMessage":"Already initialized"},{"pc":[868,1081],"errorMessage":"Asset transfer must be to contract"},{"pc":[654],"errorMessage":"Box must have value"},{"pc":[845],"errorMessage":"Contract not initialized"},{"pc":[851,1060],"errorMessage":"Expected 2 txns in group"},{"pc":[880,1093],"errorMessage":"Incorrect asset ID"},{"pc":[904],"errorMessage":"Initial stake below minimum"},{"pc":[1300,1543],"errorMessage":"Insufficient reward pool"},{"pc":[1086],"errorMessage":"Must provide non-zero rewards"},{"pc":[875],"errorMessage":"Must stake non-zero amount"},{"pc":[1292],"errorMessage":"No rewards to claim"},{"pc":[965,1285],"errorMessage":"No stake found"},{"pc":[309,327,343,360,383,401,417,429,453,477,489,505,517,529,565,583,605],"errorMessage":"OnCompletion is not NoOp"},{"pc":[1054],"errorMessage":"Only admin can add rewards"},{"pc":[1535],"errorMessage":"Only admin can emergency withdraw"},{"pc":[1364],"errorMessage":"Only admin can update APR"},{"pc":[1381],"errorMessage":"Only admin can update admin"},{"pc":[1602],"errorMessage":"Only box owner or admin can delete box"},{"pc":[746],"errorMessage":"Only creator can initialize"},{"pc":[806],"errorMessage":"Only creator or admin can opt in"},{"pc":[992],"errorMessage":"Remaining stake would be below minimum"},{"pc":[861,1074],"errorMessage":"Transaction 0 must be asset transfer"},{"pc":[1611],"errorMessage":"User still has active stake"},{"pc":[971],"errorMessage":"Withdrawal amount exceeds stake"},{"pc":[974],"errorMessage":"Withdrawal amount must be positive"},{"pc":[633],"errorMessage":"can only call when creating"},{"pc":[312,330,346,363,386,404,420,432,456,480,492,508,520,532,568,586,608],"errorMessage":"can only call when not creating"},{"pc":[718,738,788,810,840,844,885,945,990,1014,1024,1050,1064,1097,1118,1122,1130,1296,1337,1347,1360,1377,1450,1454,1459,1464,1469,1474,1478,1529,1539,1547,1557,1584],"errorMessage":"check GlobalState exists"},{"pc":[858,1071],"errorMessage":"transaction type is axfer"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="},"byteCode":{"approval":"CiAEAAEECCYKCnJld2FyZFBvb2wFYXNzZXQLdG90YWxTdGFrZWQMYWRtaW5BZGRyZXNzBBUffHUOYXByQmFzaXNQb2ludHMZZGlzdHJpYnV0aW9uUGVyaW9kU2Vjb25kcwxtaW5pbXVtU3Rha2UUbGFzdERpc3RyaWJ1dGlvblRpbWUHc3Rha2VyczEYQAAdKSJnKzIDZyoiZycFImcnCCJnJwYiZycHImcoImcxG0EBv4IRBDbdBbQEoBpd3AQOk/3mBGZ8XTAEn/0+UwQIkL1YBCHx3f8Es7cBRgQL2M9gBGkErFoEpa5r0QQeZhK9BIKrHsQEFXZrCQS/4xVkBM6WOx0E3JoqBTYaAI4RASoBFAECAN4A0gDGALYAqgCSAHoAbgBeAEwANQAkABQAAiJDMRkURDEYRDYaARfAHIgE5yNDMRkURDEYRDYaAReIBKEjQzEZFEQxGESIBEknBExQsCNDMRkURDEYRDYaARfAHIgD9icETFCwI0MxGRREMRhENhoBF8AciAPPI0MxGRREMRhENhoBF4gDriNDMRkURDEYRIgDUyNDMRkURDEYRDYaARfAHIgC+BYnBExQsCNDMRkURDEYRDYaARfAHIgCghYnBExQsCNDMRkURDEYRIgCMyNDMRkURDEYRDYaAReIAcMjQzEZFEQxGESIAUIjQzEZFEQxGESIAQIjQzEZFEQxGEQ2GgEXwDA2GgIXwBw2GgMXNhoEFzYaBReIAKwjQzEZFEQxGESIAIcWJwRMULAjQzEZFEQxGEQ2GgEXwBw2GgKIAF5II0MxGRREMRhENhoBF8AciAASJwRMULAjQzEZQP66MRgURCNDigEBJwmL/1BJvUUBQQAGiwC+REyJgCAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEyJigIBJwmL/lCL/7+L/4mKAAEiJwZlTElPAkRAAAMiTIkyB4sACkyJigUAIillRBREMQAyCRJEKYv7ZyuL/GcqImcnBYv9ZycIMgdnJwaL/mcnB4v/ZygiZ4mKAAAiK2VEMQAyCRJAAAgxAIsAEkEAGSNEIillRLEyCkyyESKyErIUJLIQIrIBs4kiQv/kigAAIillRCIpZUREMgSBAhJEIjgQSSQSRCQSRCI4FDIKEkQiOBJJTgJEIjgREkQiJwdlRDEASYj/AEcCIltAABGLAIsBD0SI/zcWiwNMXBiMBIsESSJbiwBJTgMIFlwAMgcWXAiLAkyI/whIIiplRAgqTGeJigEAMQBJiP68SSJbRwJEi/9LAQ5Ei/9Ei/8NQQAMiwKL/wkiJwdlRA9EiwKL/wkWiwFMXACLAEyI/sNIIiplRIv/CSpMZyIpZUSxMQBMshGL/7ISshQkshCB6AeyAbOJIitlRDEAEkQyBIECEkQiKWVEIjgQSSQSRCQSRCI4FDIKEkQiOBJJRCI4EU8CEkQiKGVECChMZycIMgdniYoBASKAACInBWVEIiplRCInBmVMTgJEQQAFiwNAAAQijACJi/+I/gBJjAAiW0mMAUAABCKMAImLACVbMgdMgYCjBQgMQQAEIowAiYsCiwMLiwELgYDwrueWCQqMAImKAQGAAEcCi/+I/b5JIltAAAQijACJiP34SYwAiwOBGFtJjAENQQAbiwCLAQmMAosCQAAEIowAiYv/iP9liwILjACJIowCQv/mMQBJiP17SSJbSURLAoj/p0lEIihlREsBD0RMSwEIFk8CTFwASYEQW0sCCBZcEIj9lxZcGE8CTIj9gEgiKmVESwEIKkxnIihlREwJKExniYoBACIrZUQxABJEJwWL/2eJigEAIitlRDEAEkQri/9niYoBAYv/iP0Ji/+I/zpLASJbSwIlW0sDgRBbTwSBGFtPAxZPAxZQTwIWUE8CFlBMFlBJFSUKFlcGAkxQiSIpZUQiKmVEIicFZUQiJwhlRCInBmVEIicHZUQiKGVEiPz5TwcWTwcWUE8GFlBPBRZQTwQWUE8DFlBPAhZQTBZQSRUlChZXBgJMUImKAQAiK2VEMQBLARJEIihlRIv/D0QiKGVEi/8JKExnIillRLGyEYv/shKyFCSyEIHoB7IBs4mKAQAiSStlRDEAi/8SQAAIMQCLARJBAB4jRIv/iPw0IlsURCcJi/9QSYwAvUUBQQAEiwC8SIkiQv/f","clear":"CoEBQw=="},"compilerInfo":{"compiler":"puya","compilerVersion":{"major":4,"minor":7,"patch":0}},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type UserStakeInfo = {
  stakedAmount: bigint,
  lastStakeTime: bigint,
  totalRewardsEarned: bigint,
  lastClaimedPeriod: bigint
}


/**
 * Converts the ABI tuple representation of a UserStakeInfo to the struct representation
 */
export function UserStakeInfoFromTuple(abiTuple: [bigint, bigint, bigint, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.UserStakeInfo, APP_SPEC.structs) as UserStakeInfo
}

/**
 * The argument types for the AsaStakingContract contract
 */
export type AsaStakingContractArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'getUserStakeInfo(account)(uint64,uint64,uint64,uint64)': {
      userAddress: Uint8Array | string
    }
    'storeUserStakeInfo(account,(uint64,uint64,uint64,uint64))void': {
      userAddress: Uint8Array | string
      stakeInfo: UserStakeInfo
    }
    'getCurrentPeriod()uint64': Record<string, never>
    'initialize(asset,account,uint64,uint64,uint64)void': {
      asset: bigint
      adminAddress: Uint8Array | string
      aprBasisPoints: bigint | number
      distributionPeriodSeconds: bigint | number
      minimumStake: bigint | number
    }
    'optInToAsset()void': Record<string, never>
    'stake()void': Record<string, never>
    'withdraw(uint64)void': {
      amount: bigint | number
    }
    'addRewards()void': Record<string, never>
    'calculateUserRewardsForPeriod(account)uint64': {
      userAddress: Uint8Array | string
    }
    'calculatePendingRewards(account)uint64': {
      userAddress: Uint8Array | string
    }
    'claimRewards()void': Record<string, never>
    'updateAPR(uint64)void': {
      newAprBasisPoints: bigint | number
    }
    'updateAdmin(account)void': {
      newAdminAddress: Uint8Array | string
    }
    'getUserStats(account)uint64[]': {
      userAddress: Uint8Array | string
    }
    'getContractStats()uint64[]': Record<string, never>
    'emergencyWithdrawRewards(uint64)void': {
      amount: bigint | number
    }
    'deleteUserBox(account)void': {
      userAddress: Uint8Array | string
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'getUserStakeInfo(account)(uint64,uint64,uint64,uint64)': [userAddress: Uint8Array | string]
    'storeUserStakeInfo(account,(uint64,uint64,uint64,uint64))void': [userAddress: Uint8Array | string, stakeInfo: UserStakeInfo]
    'getCurrentPeriod()uint64': []
    'initialize(asset,account,uint64,uint64,uint64)void': [asset: bigint, adminAddress: Uint8Array | string, aprBasisPoints: bigint | number, distributionPeriodSeconds: bigint | number, minimumStake: bigint | number]
    'optInToAsset()void': []
    'stake()void': []
    'withdraw(uint64)void': [amount: bigint | number]
    'addRewards()void': []
    'calculateUserRewardsForPeriod(account)uint64': [userAddress: Uint8Array | string]
    'calculatePendingRewards(account)uint64': [userAddress: Uint8Array | string]
    'claimRewards()void': []
    'updateAPR(uint64)void': [newAprBasisPoints: bigint | number]
    'updateAdmin(account)void': [newAdminAddress: Uint8Array | string]
    'getUserStats(account)uint64[]': [userAddress: Uint8Array | string]
    'getContractStats()uint64[]': []
    'emergencyWithdrawRewards(uint64)void': [amount: bigint | number]
    'deleteUserBox(account)void': [userAddress: Uint8Array | string]
  }
}

/**
 * The return type for each method
 */
export type AsaStakingContractReturns = {
  'getUserStakeInfo(account)(uint64,uint64,uint64,uint64)': UserStakeInfo
  'storeUserStakeInfo(account,(uint64,uint64,uint64,uint64))void': void
  'getCurrentPeriod()uint64': bigint
  'initialize(asset,account,uint64,uint64,uint64)void': void
  'optInToAsset()void': void
  'stake()void': void
  'withdraw(uint64)void': void
  'addRewards()void': void
  'calculateUserRewardsForPeriod(account)uint64': bigint
  'calculatePendingRewards(account)uint64': bigint
  'claimRewards()void': void
  'updateAPR(uint64)void': void
  'updateAdmin(account)void': void
  'getUserStats(account)uint64[]': bigint[]
  'getContractStats()uint64[]': bigint[]
  'emergencyWithdrawRewards(uint64)void': void
  'deleteUserBox(account)void': void
}

/**
 * Defines the types of available calls and state of the AsaStakingContract smart contract.
 */
export type AsaStakingContractTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'getUserStakeInfo(account)(uint64,uint64,uint64,uint64)' | 'getUserStakeInfo', {
      argsObj: AsaStakingContractArgs['obj']['getUserStakeInfo(account)(uint64,uint64,uint64,uint64)']
      argsTuple: AsaStakingContractArgs['tuple']['getUserStakeInfo(account)(uint64,uint64,uint64,uint64)']
      returns: AsaStakingContractReturns['getUserStakeInfo(account)(uint64,uint64,uint64,uint64)']
    }>
    & Record<'storeUserStakeInfo(account,(uint64,uint64,uint64,uint64))void' | 'storeUserStakeInfo', {
      argsObj: AsaStakingContractArgs['obj']['storeUserStakeInfo(account,(uint64,uint64,uint64,uint64))void']
      argsTuple: AsaStakingContractArgs['tuple']['storeUserStakeInfo(account,(uint64,uint64,uint64,uint64))void']
      returns: AsaStakingContractReturns['storeUserStakeInfo(account,(uint64,uint64,uint64,uint64))void']
    }>
    & Record<'getCurrentPeriod()uint64' | 'getCurrentPeriod', {
      argsObj: AsaStakingContractArgs['obj']['getCurrentPeriod()uint64']
      argsTuple: AsaStakingContractArgs['tuple']['getCurrentPeriod()uint64']
      returns: AsaStakingContractReturns['getCurrentPeriod()uint64']
    }>
    & Record<'initialize(asset,account,uint64,uint64,uint64)void' | 'initialize', {
      argsObj: AsaStakingContractArgs['obj']['initialize(asset,account,uint64,uint64,uint64)void']
      argsTuple: AsaStakingContractArgs['tuple']['initialize(asset,account,uint64,uint64,uint64)void']
      returns: AsaStakingContractReturns['initialize(asset,account,uint64,uint64,uint64)void']
    }>
    & Record<'optInToAsset()void' | 'optInToAsset', {
      argsObj: AsaStakingContractArgs['obj']['optInToAsset()void']
      argsTuple: AsaStakingContractArgs['tuple']['optInToAsset()void']
      returns: AsaStakingContractReturns['optInToAsset()void']
    }>
    & Record<'stake()void' | 'stake', {
      argsObj: AsaStakingContractArgs['obj']['stake()void']
      argsTuple: AsaStakingContractArgs['tuple']['stake()void']
      returns: AsaStakingContractReturns['stake()void']
    }>
    & Record<'withdraw(uint64)void' | 'withdraw', {
      argsObj: AsaStakingContractArgs['obj']['withdraw(uint64)void']
      argsTuple: AsaStakingContractArgs['tuple']['withdraw(uint64)void']
      returns: AsaStakingContractReturns['withdraw(uint64)void']
    }>
    & Record<'addRewards()void' | 'addRewards', {
      argsObj: AsaStakingContractArgs['obj']['addRewards()void']
      argsTuple: AsaStakingContractArgs['tuple']['addRewards()void']
      returns: AsaStakingContractReturns['addRewards()void']
    }>
    & Record<'calculateUserRewardsForPeriod(account)uint64' | 'calculateUserRewardsForPeriod', {
      argsObj: AsaStakingContractArgs['obj']['calculateUserRewardsForPeriod(account)uint64']
      argsTuple: AsaStakingContractArgs['tuple']['calculateUserRewardsForPeriod(account)uint64']
      returns: AsaStakingContractReturns['calculateUserRewardsForPeriod(account)uint64']
    }>
    & Record<'calculatePendingRewards(account)uint64' | 'calculatePendingRewards', {
      argsObj: AsaStakingContractArgs['obj']['calculatePendingRewards(account)uint64']
      argsTuple: AsaStakingContractArgs['tuple']['calculatePendingRewards(account)uint64']
      returns: AsaStakingContractReturns['calculatePendingRewards(account)uint64']
    }>
    & Record<'claimRewards()void' | 'claimRewards', {
      argsObj: AsaStakingContractArgs['obj']['claimRewards()void']
      argsTuple: AsaStakingContractArgs['tuple']['claimRewards()void']
      returns: AsaStakingContractReturns['claimRewards()void']
    }>
    & Record<'updateAPR(uint64)void' | 'updateAPR', {
      argsObj: AsaStakingContractArgs['obj']['updateAPR(uint64)void']
      argsTuple: AsaStakingContractArgs['tuple']['updateAPR(uint64)void']
      returns: AsaStakingContractReturns['updateAPR(uint64)void']
    }>
    & Record<'updateAdmin(account)void' | 'updateAdmin', {
      argsObj: AsaStakingContractArgs['obj']['updateAdmin(account)void']
      argsTuple: AsaStakingContractArgs['tuple']['updateAdmin(account)void']
      returns: AsaStakingContractReturns['updateAdmin(account)void']
    }>
    & Record<'getUserStats(account)uint64[]' | 'getUserStats', {
      argsObj: AsaStakingContractArgs['obj']['getUserStats(account)uint64[]']
      argsTuple: AsaStakingContractArgs['tuple']['getUserStats(account)uint64[]']
      returns: AsaStakingContractReturns['getUserStats(account)uint64[]']
    }>
    & Record<'getContractStats()uint64[]' | 'getContractStats', {
      argsObj: AsaStakingContractArgs['obj']['getContractStats()uint64[]']
      argsTuple: AsaStakingContractArgs['tuple']['getContractStats()uint64[]']
      returns: AsaStakingContractReturns['getContractStats()uint64[]']
    }>
    & Record<'emergencyWithdrawRewards(uint64)void' | 'emergencyWithdrawRewards', {
      argsObj: AsaStakingContractArgs['obj']['emergencyWithdrawRewards(uint64)void']
      argsTuple: AsaStakingContractArgs['tuple']['emergencyWithdrawRewards(uint64)void']
      returns: AsaStakingContractReturns['emergencyWithdrawRewards(uint64)void']
    }>
    & Record<'deleteUserBox(account)void' | 'deleteUserBox', {
      argsObj: AsaStakingContractArgs['obj']['deleteUserBox(account)void']
      argsTuple: AsaStakingContractArgs['tuple']['deleteUserBox(account)void']
      returns: AsaStakingContractReturns['deleteUserBox(account)void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        asset: bigint
        adminAddress: string
        totalStaked: bigint
        aprBasisPoints: bigint
        lastDistributionTime: bigint
        distributionPeriodSeconds: bigint
        minimumStake: bigint
        rewardPool: bigint
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        stakers: Map<string, UserStakeInfo>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type AsaStakingContractSignatures = keyof AsaStakingContractTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type AsaStakingContractNonVoidMethodSignatures = keyof AsaStakingContractTypes['methods'] extends infer T ? T extends keyof AsaStakingContractTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the AsaStakingContract smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends AsaStakingContractSignatures> = AsaStakingContractTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the AsaStakingContract smart contract to the method's return type
 */
export type MethodReturn<TSignature extends AsaStakingContractSignatures> = AsaStakingContractTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = AsaStakingContractTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = AsaStakingContractTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type AsaStakingContractCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type AsaStakingContractDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: AsaStakingContractCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the AsaStakingContract smart contract
 */
export abstract class AsaStakingContractParamsFactory {
  /**
   * Constructs a no op call for the getUserStakeInfo(account)(uint64,uint64,uint64,uint64) ABI method
   *
   * Helper function to read user stake info from box storage
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getUserStakeInfo(params: CallParams<AsaStakingContractArgs['obj']['getUserStakeInfo(account)(uint64,uint64,uint64,uint64)'] | AsaStakingContractArgs['tuple']['getUserStakeInfo(account)(uint64,uint64,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getUserStakeInfo(account)(uint64,uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.userAddress],
    }
  }
  /**
   * Constructs a no op call for the storeUserStakeInfo(account,(uint64,uint64,uint64,uint64))void ABI method
   *
   * Helper function to store user stake info in box storage
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static storeUserStakeInfo(params: CallParams<AsaStakingContractArgs['obj']['storeUserStakeInfo(account,(uint64,uint64,uint64,uint64))void'] | AsaStakingContractArgs['tuple']['storeUserStakeInfo(account,(uint64,uint64,uint64,uint64))void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'storeUserStakeInfo(account,(uint64,uint64,uint64,uint64))void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.userAddress, params.args.stakeInfo],
    }
  }
  /**
   * Constructs a no op call for the getCurrentPeriod()uint64 ABI method
   *
   * Calculate the current distribution period
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getCurrentPeriod(params: CallParams<AsaStakingContractArgs['obj']['getCurrentPeriod()uint64'] | AsaStakingContractArgs['tuple']['getCurrentPeriod()uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getCurrentPeriod()uint64' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the initialize(asset,account,uint64,uint64,uint64)void ABI method
   *
   * Initialize the contract with the ASA token ID and other parameters
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static initialize(params: CallParams<AsaStakingContractArgs['obj']['initialize(asset,account,uint64,uint64,uint64)void'] | AsaStakingContractArgs['tuple']['initialize(asset,account,uint64,uint64,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'initialize(asset,account,uint64,uint64,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.asset, params.args.adminAddress, params.args.aprBasisPoints, params.args.distributionPeriodSeconds, params.args.minimumStake],
    }
  }
  /**
   * Constructs a no op call for the optInToAsset()void ABI method
   *
   * Opt the contract into the ASA
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static optInToAsset(params: CallParams<AsaStakingContractArgs['obj']['optInToAsset()void'] | AsaStakingContractArgs['tuple']['optInToAsset()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'optInToAsset()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the stake()void ABI method
   *
  * Stake tokens
  Requires a companion ASA transfer transaction

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static stake(params: CallParams<AsaStakingContractArgs['obj']['stake()void'] | AsaStakingContractArgs['tuple']['stake()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'stake()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the withdraw(uint64)void ABI method
   *
   * Withdraw staked tokens
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static withdraw(params: CallParams<AsaStakingContractArgs['obj']['withdraw(uint64)void'] | AsaStakingContractArgs['tuple']['withdraw(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'withdraw(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.amount],
    }
  }
  /**
   * Constructs a no op call for the addRewards()void ABI method
   *
  * Add rewards to the reward pool
  Only the admin can call this
  Requires a companion ASA transfer transaction with the rewards

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static addRewards(params: CallParams<AsaStakingContractArgs['obj']['addRewards()void'] | AsaStakingContractArgs['tuple']['addRewards()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'addRewards()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the calculateUserRewardsForPeriod(account)uint64 ABI method
   *
  * Calculate rewards for a specific user for a given period
  This calculates rewards per distribution period

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static calculateUserRewardsForPeriod(params: CallParams<AsaStakingContractArgs['obj']['calculateUserRewardsForPeriod(account)uint64'] | AsaStakingContractArgs['tuple']['calculateUserRewardsForPeriod(account)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'calculateUserRewardsForPeriod(account)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.userAddress],
    }
  }
  /**
   * Constructs a no op call for the calculatePendingRewards(account)uint64 ABI method
   *
   * Calculate pending rewards for a user since their last claim
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static calculatePendingRewards(params: CallParams<AsaStakingContractArgs['obj']['calculatePendingRewards(account)uint64'] | AsaStakingContractArgs['tuple']['calculatePendingRewards(account)uint64']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'calculatePendingRewards(account)uint64' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.userAddress],
    }
  }
  /**
   * Constructs a no op call for the claimRewards()void ABI method
   *
  * Claim rewards for the caller with auto-compounding
  This implements the pull-based reward model with automatic compounding

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static claimRewards(params: CallParams<AsaStakingContractArgs['obj']['claimRewards()void'] | AsaStakingContractArgs['tuple']['claimRewards()void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'claimRewards()void' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the updateAPR(uint64)void ABI method
   *
  * Update the APR basis points
  Only the admin can call this

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateApr(params: CallParams<AsaStakingContractArgs['obj']['updateAPR(uint64)void'] | AsaStakingContractArgs['tuple']['updateAPR(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'updateAPR(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newAprBasisPoints],
    }
  }
  /**
   * Constructs a no op call for the updateAdmin(account)void ABI method
   *
  * Update the admin address
  Only the current admin can call this

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static updateAdmin(params: CallParams<AsaStakingContractArgs['obj']['updateAdmin(account)void'] | AsaStakingContractArgs['tuple']['updateAdmin(account)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'updateAdmin(account)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.newAdminAddress],
    }
  }
  /**
   * Constructs a no op call for the getUserStats(account)uint64[] ABI method
   *
   * Get current staking statistics for a user
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getUserStats(params: CallParams<AsaStakingContractArgs['obj']['getUserStats(account)uint64[]'] | AsaStakingContractArgs['tuple']['getUserStats(account)uint64[]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getUserStats(account)uint64[]' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.userAddress],
    }
  }
  /**
   * Constructs a no op call for the getContractStats()uint64[] ABI method
   *
   * Get contract global statistics
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static getContractStats(params: CallParams<AsaStakingContractArgs['obj']['getContractStats()uint64[]'] | AsaStakingContractArgs['tuple']['getContractStats()uint64[]']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'getContractStats()uint64[]' as const,
      args: Array.isArray(params.args) ? params.args : [],
    }
  }
  /**
   * Constructs a no op call for the emergencyWithdrawRewards(uint64)void ABI method
   *
   * Emergency withdraw rewards from pool (admin only)
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static emergencyWithdrawRewards(params: CallParams<AsaStakingContractArgs['obj']['emergencyWithdrawRewards(uint64)void'] | AsaStakingContractArgs['tuple']['emergencyWithdrawRewards(uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'emergencyWithdrawRewards(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.amount],
    }
  }
  /**
   * Constructs a no op call for the deleteUserBox(account)void ABI method
   *
  * Delete a user's box (for cleanup)
  Can only be called by the box owner or admin

   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static deleteUserBox(params: CallParams<AsaStakingContractArgs['obj']['deleteUserBox(account)void'] | AsaStakingContractArgs['tuple']['deleteUserBox(account)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'deleteUserBox(account)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.userAddress],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the ASAStakingContract smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class AsaStakingContractFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `AsaStakingContractFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new AsaStakingContractClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new AsaStakingContractClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the ASAStakingContract smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: AsaStakingContractDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new AsaStakingContractClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ASAStakingContract smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ASAStakingContract smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the ASAStakingContract smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new AsaStakingContractClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the ASAStakingContract smart contract
 */
export class AsaStakingContractClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `AsaStakingContractClient`
   *
   * @param appClient An `AppClient` instance which has been created with the AsaStakingContract app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `AsaStakingContractClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends AsaStakingContractNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `AsaStakingContractClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<AsaStakingContractClient> {
    return new AsaStakingContractClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `AsaStakingContractClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<AsaStakingContractClient> {
    return new AsaStakingContractClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the ASAStakingContract smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `getUserStakeInfo(account)(uint64,uint64,uint64,uint64)` ABI method.
     *
     * Helper function to read user stake info from box storage
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getUserStakeInfo: (params: CallParams<AsaStakingContractArgs['obj']['getUserStakeInfo(account)(uint64,uint64,uint64,uint64)'] | AsaStakingContractArgs['tuple']['getUserStakeInfo(account)(uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AsaStakingContractParamsFactory.getUserStakeInfo(params))
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `storeUserStakeInfo(account,(uint64,uint64,uint64,uint64))void` ABI method.
     *
     * Helper function to store user stake info in box storage
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    storeUserStakeInfo: (params: CallParams<AsaStakingContractArgs['obj']['storeUserStakeInfo(account,(uint64,uint64,uint64,uint64))void'] | AsaStakingContractArgs['tuple']['storeUserStakeInfo(account,(uint64,uint64,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AsaStakingContractParamsFactory.storeUserStakeInfo(params))
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `getCurrentPeriod()uint64` ABI method.
     *
     * Calculate the current distribution period
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getCurrentPeriod: (params: CallParams<AsaStakingContractArgs['obj']['getCurrentPeriod()uint64'] | AsaStakingContractArgs['tuple']['getCurrentPeriod()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AsaStakingContractParamsFactory.getCurrentPeriod(params))
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `initialize(asset,account,uint64,uint64,uint64)void` ABI method.
     *
     * Initialize the contract with the ASA token ID and other parameters
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    initialize: (params: CallParams<AsaStakingContractArgs['obj']['initialize(asset,account,uint64,uint64,uint64)void'] | AsaStakingContractArgs['tuple']['initialize(asset,account,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AsaStakingContractParamsFactory.initialize(params))
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `optInToAsset()void` ABI method.
     *
     * Opt the contract into the ASA
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    optInToAsset: (params: CallParams<AsaStakingContractArgs['obj']['optInToAsset()void'] | AsaStakingContractArgs['tuple']['optInToAsset()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AsaStakingContractParamsFactory.optInToAsset(params))
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `stake()void` ABI method.
     *
    * Stake tokens
    Requires a companion ASA transfer transaction

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    stake: (params: CallParams<AsaStakingContractArgs['obj']['stake()void'] | AsaStakingContractArgs['tuple']['stake()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AsaStakingContractParamsFactory.stake(params))
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `withdraw(uint64)void` ABI method.
     *
     * Withdraw staked tokens
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    withdraw: (params: CallParams<AsaStakingContractArgs['obj']['withdraw(uint64)void'] | AsaStakingContractArgs['tuple']['withdraw(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AsaStakingContractParamsFactory.withdraw(params))
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `addRewards()void` ABI method.
     *
    * Add rewards to the reward pool
    Only the admin can call this
    Requires a companion ASA transfer transaction with the rewards

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    addRewards: (params: CallParams<AsaStakingContractArgs['obj']['addRewards()void'] | AsaStakingContractArgs['tuple']['addRewards()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AsaStakingContractParamsFactory.addRewards(params))
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `calculateUserRewardsForPeriod(account)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
    * Calculate rewards for a specific user for a given period
    This calculates rewards per distribution period

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    calculateUserRewardsForPeriod: (params: CallParams<AsaStakingContractArgs['obj']['calculateUserRewardsForPeriod(account)uint64'] | AsaStakingContractArgs['tuple']['calculateUserRewardsForPeriod(account)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AsaStakingContractParamsFactory.calculateUserRewardsForPeriod(params))
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `calculatePendingRewards(account)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Calculate pending rewards for a user since their last claim
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    calculatePendingRewards: (params: CallParams<AsaStakingContractArgs['obj']['calculatePendingRewards(account)uint64'] | AsaStakingContractArgs['tuple']['calculatePendingRewards(account)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AsaStakingContractParamsFactory.calculatePendingRewards(params))
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `claimRewards()void` ABI method.
     *
    * Claim rewards for the caller with auto-compounding
    This implements the pull-based reward model with automatic compounding

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    claimRewards: (params: CallParams<AsaStakingContractArgs['obj']['claimRewards()void'] | AsaStakingContractArgs['tuple']['claimRewards()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AsaStakingContractParamsFactory.claimRewards(params))
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `updateAPR(uint64)void` ABI method.
     *
    * Update the APR basis points
    Only the admin can call this

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateApr: (params: CallParams<AsaStakingContractArgs['obj']['updateAPR(uint64)void'] | AsaStakingContractArgs['tuple']['updateAPR(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AsaStakingContractParamsFactory.updateApr(params))
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `updateAdmin(account)void` ABI method.
     *
    * Update the admin address
    Only the current admin can call this

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    updateAdmin: (params: CallParams<AsaStakingContractArgs['obj']['updateAdmin(account)void'] | AsaStakingContractArgs['tuple']['updateAdmin(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AsaStakingContractParamsFactory.updateAdmin(params))
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `getUserStats(account)uint64[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get current staking statistics for a user
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getUserStats: (params: CallParams<AsaStakingContractArgs['obj']['getUserStats(account)uint64[]'] | AsaStakingContractArgs['tuple']['getUserStats(account)uint64[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AsaStakingContractParamsFactory.getUserStats(params))
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `getContractStats()uint64[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get contract global statistics
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    getContractStats: (params: CallParams<AsaStakingContractArgs['obj']['getContractStats()uint64[]'] | AsaStakingContractArgs['tuple']['getContractStats()uint64[]']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.params.call(AsaStakingContractParamsFactory.getContractStats(params))
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `emergencyWithdrawRewards(uint64)void` ABI method.
     *
     * Emergency withdraw rewards from pool (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    emergencyWithdrawRewards: (params: CallParams<AsaStakingContractArgs['obj']['emergencyWithdrawRewards(uint64)void'] | AsaStakingContractArgs['tuple']['emergencyWithdrawRewards(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AsaStakingContractParamsFactory.emergencyWithdrawRewards(params))
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `deleteUserBox(account)void` ABI method.
     *
    * Delete a user's box (for cleanup)
    Can only be called by the box owner or admin

     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    deleteUserBox: (params: CallParams<AsaStakingContractArgs['obj']['deleteUserBox(account)void'] | AsaStakingContractArgs['tuple']['deleteUserBox(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(AsaStakingContractParamsFactory.deleteUserBox(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the ASAStakingContract smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `getUserStakeInfo(account)(uint64,uint64,uint64,uint64)` ABI method.
     *
     * Helper function to read user stake info from box storage
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getUserStakeInfo: (params: CallParams<AsaStakingContractArgs['obj']['getUserStakeInfo(account)(uint64,uint64,uint64,uint64)'] | AsaStakingContractArgs['tuple']['getUserStakeInfo(account)(uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AsaStakingContractParamsFactory.getUserStakeInfo(params))
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `storeUserStakeInfo(account,(uint64,uint64,uint64,uint64))void` ABI method.
     *
     * Helper function to store user stake info in box storage
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    storeUserStakeInfo: (params: CallParams<AsaStakingContractArgs['obj']['storeUserStakeInfo(account,(uint64,uint64,uint64,uint64))void'] | AsaStakingContractArgs['tuple']['storeUserStakeInfo(account,(uint64,uint64,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AsaStakingContractParamsFactory.storeUserStakeInfo(params))
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `getCurrentPeriod()uint64` ABI method.
     *
     * Calculate the current distribution period
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getCurrentPeriod: (params: CallParams<AsaStakingContractArgs['obj']['getCurrentPeriod()uint64'] | AsaStakingContractArgs['tuple']['getCurrentPeriod()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AsaStakingContractParamsFactory.getCurrentPeriod(params))
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `initialize(asset,account,uint64,uint64,uint64)void` ABI method.
     *
     * Initialize the contract with the ASA token ID and other parameters
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    initialize: (params: CallParams<AsaStakingContractArgs['obj']['initialize(asset,account,uint64,uint64,uint64)void'] | AsaStakingContractArgs['tuple']['initialize(asset,account,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AsaStakingContractParamsFactory.initialize(params))
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `optInToAsset()void` ABI method.
     *
     * Opt the contract into the ASA
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    optInToAsset: (params: CallParams<AsaStakingContractArgs['obj']['optInToAsset()void'] | AsaStakingContractArgs['tuple']['optInToAsset()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AsaStakingContractParamsFactory.optInToAsset(params))
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `stake()void` ABI method.
     *
    * Stake tokens
    Requires a companion ASA transfer transaction

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    stake: (params: CallParams<AsaStakingContractArgs['obj']['stake()void'] | AsaStakingContractArgs['tuple']['stake()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AsaStakingContractParamsFactory.stake(params))
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `withdraw(uint64)void` ABI method.
     *
     * Withdraw staked tokens
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    withdraw: (params: CallParams<AsaStakingContractArgs['obj']['withdraw(uint64)void'] | AsaStakingContractArgs['tuple']['withdraw(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AsaStakingContractParamsFactory.withdraw(params))
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `addRewards()void` ABI method.
     *
    * Add rewards to the reward pool
    Only the admin can call this
    Requires a companion ASA transfer transaction with the rewards

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    addRewards: (params: CallParams<AsaStakingContractArgs['obj']['addRewards()void'] | AsaStakingContractArgs['tuple']['addRewards()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AsaStakingContractParamsFactory.addRewards(params))
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `calculateUserRewardsForPeriod(account)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
    * Calculate rewards for a specific user for a given period
    This calculates rewards per distribution period

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    calculateUserRewardsForPeriod: (params: CallParams<AsaStakingContractArgs['obj']['calculateUserRewardsForPeriod(account)uint64'] | AsaStakingContractArgs['tuple']['calculateUserRewardsForPeriod(account)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AsaStakingContractParamsFactory.calculateUserRewardsForPeriod(params))
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `calculatePendingRewards(account)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Calculate pending rewards for a user since their last claim
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    calculatePendingRewards: (params: CallParams<AsaStakingContractArgs['obj']['calculatePendingRewards(account)uint64'] | AsaStakingContractArgs['tuple']['calculatePendingRewards(account)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AsaStakingContractParamsFactory.calculatePendingRewards(params))
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `claimRewards()void` ABI method.
     *
    * Claim rewards for the caller with auto-compounding
    This implements the pull-based reward model with automatic compounding

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    claimRewards: (params: CallParams<AsaStakingContractArgs['obj']['claimRewards()void'] | AsaStakingContractArgs['tuple']['claimRewards()void']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AsaStakingContractParamsFactory.claimRewards(params))
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `updateAPR(uint64)void` ABI method.
     *
    * Update the APR basis points
    Only the admin can call this

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateApr: (params: CallParams<AsaStakingContractArgs['obj']['updateAPR(uint64)void'] | AsaStakingContractArgs['tuple']['updateAPR(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AsaStakingContractParamsFactory.updateApr(params))
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `updateAdmin(account)void` ABI method.
     *
    * Update the admin address
    Only the current admin can call this

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    updateAdmin: (params: CallParams<AsaStakingContractArgs['obj']['updateAdmin(account)void'] | AsaStakingContractArgs['tuple']['updateAdmin(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AsaStakingContractParamsFactory.updateAdmin(params))
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `getUserStats(account)uint64[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get current staking statistics for a user
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getUserStats: (params: CallParams<AsaStakingContractArgs['obj']['getUserStats(account)uint64[]'] | AsaStakingContractArgs['tuple']['getUserStats(account)uint64[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AsaStakingContractParamsFactory.getUserStats(params))
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `getContractStats()uint64[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get contract global statistics
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    getContractStats: (params: CallParams<AsaStakingContractArgs['obj']['getContractStats()uint64[]'] | AsaStakingContractArgs['tuple']['getContractStats()uint64[]']> & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      return this.appClient.createTransaction.call(AsaStakingContractParamsFactory.getContractStats(params))
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `emergencyWithdrawRewards(uint64)void` ABI method.
     *
     * Emergency withdraw rewards from pool (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    emergencyWithdrawRewards: (params: CallParams<AsaStakingContractArgs['obj']['emergencyWithdrawRewards(uint64)void'] | AsaStakingContractArgs['tuple']['emergencyWithdrawRewards(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AsaStakingContractParamsFactory.emergencyWithdrawRewards(params))
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `deleteUserBox(account)void` ABI method.
     *
    * Delete a user's box (for cleanup)
    Can only be called by the box owner or admin

     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    deleteUserBox: (params: CallParams<AsaStakingContractArgs['obj']['deleteUserBox(account)void'] | AsaStakingContractArgs['tuple']['deleteUserBox(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(AsaStakingContractParamsFactory.deleteUserBox(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the ASAStakingContract smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `getUserStakeInfo(account)(uint64,uint64,uint64,uint64)` ABI method.
     *
     * Helper function to read user stake info from box storage
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getUserStakeInfo: async (params: CallParams<AsaStakingContractArgs['obj']['getUserStakeInfo(account)(uint64,uint64,uint64,uint64)'] | AsaStakingContractArgs['tuple']['getUserStakeInfo(account)(uint64,uint64,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AsaStakingContractParamsFactory.getUserStakeInfo(params))
      return {...result, return: result.return as unknown as (undefined | AsaStakingContractReturns['getUserStakeInfo(account)(uint64,uint64,uint64,uint64)'])}
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `storeUserStakeInfo(account,(uint64,uint64,uint64,uint64))void` ABI method.
     *
     * Helper function to store user stake info in box storage
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    storeUserStakeInfo: async (params: CallParams<AsaStakingContractArgs['obj']['storeUserStakeInfo(account,(uint64,uint64,uint64,uint64))void'] | AsaStakingContractArgs['tuple']['storeUserStakeInfo(account,(uint64,uint64,uint64,uint64))void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AsaStakingContractParamsFactory.storeUserStakeInfo(params))
      return {...result, return: result.return as unknown as (undefined | AsaStakingContractReturns['storeUserStakeInfo(account,(uint64,uint64,uint64,uint64))void'])}
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `getCurrentPeriod()uint64` ABI method.
     *
     * Calculate the current distribution period
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getCurrentPeriod: async (params: CallParams<AsaStakingContractArgs['obj']['getCurrentPeriod()uint64'] | AsaStakingContractArgs['tuple']['getCurrentPeriod()uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AsaStakingContractParamsFactory.getCurrentPeriod(params))
      return {...result, return: result.return as unknown as (undefined | AsaStakingContractReturns['getCurrentPeriod()uint64'])}
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `initialize(asset,account,uint64,uint64,uint64)void` ABI method.
     *
     * Initialize the contract with the ASA token ID and other parameters
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    initialize: async (params: CallParams<AsaStakingContractArgs['obj']['initialize(asset,account,uint64,uint64,uint64)void'] | AsaStakingContractArgs['tuple']['initialize(asset,account,uint64,uint64,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AsaStakingContractParamsFactory.initialize(params))
      return {...result, return: result.return as unknown as (undefined | AsaStakingContractReturns['initialize(asset,account,uint64,uint64,uint64)void'])}
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `optInToAsset()void` ABI method.
     *
     * Opt the contract into the ASA
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    optInToAsset: async (params: CallParams<AsaStakingContractArgs['obj']['optInToAsset()void'] | AsaStakingContractArgs['tuple']['optInToAsset()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AsaStakingContractParamsFactory.optInToAsset(params))
      return {...result, return: result.return as unknown as (undefined | AsaStakingContractReturns['optInToAsset()void'])}
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `stake()void` ABI method.
     *
    * Stake tokens
    Requires a companion ASA transfer transaction

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    stake: async (params: CallParams<AsaStakingContractArgs['obj']['stake()void'] | AsaStakingContractArgs['tuple']['stake()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AsaStakingContractParamsFactory.stake(params))
      return {...result, return: result.return as unknown as (undefined | AsaStakingContractReturns['stake()void'])}
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `withdraw(uint64)void` ABI method.
     *
     * Withdraw staked tokens
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    withdraw: async (params: CallParams<AsaStakingContractArgs['obj']['withdraw(uint64)void'] | AsaStakingContractArgs['tuple']['withdraw(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AsaStakingContractParamsFactory.withdraw(params))
      return {...result, return: result.return as unknown as (undefined | AsaStakingContractReturns['withdraw(uint64)void'])}
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `addRewards()void` ABI method.
     *
    * Add rewards to the reward pool
    Only the admin can call this
    Requires a companion ASA transfer transaction with the rewards

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    addRewards: async (params: CallParams<AsaStakingContractArgs['obj']['addRewards()void'] | AsaStakingContractArgs['tuple']['addRewards()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AsaStakingContractParamsFactory.addRewards(params))
      return {...result, return: result.return as unknown as (undefined | AsaStakingContractReturns['addRewards()void'])}
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `calculateUserRewardsForPeriod(account)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
    * Calculate rewards for a specific user for a given period
    This calculates rewards per distribution period

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    calculateUserRewardsForPeriod: async (params: CallParams<AsaStakingContractArgs['obj']['calculateUserRewardsForPeriod(account)uint64'] | AsaStakingContractArgs['tuple']['calculateUserRewardsForPeriod(account)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AsaStakingContractParamsFactory.calculateUserRewardsForPeriod(params))
      return {...result, return: result.return as unknown as (undefined | AsaStakingContractReturns['calculateUserRewardsForPeriod(account)uint64'])}
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `calculatePendingRewards(account)uint64` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Calculate pending rewards for a user since their last claim
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    calculatePendingRewards: async (params: CallParams<AsaStakingContractArgs['obj']['calculatePendingRewards(account)uint64'] | AsaStakingContractArgs['tuple']['calculatePendingRewards(account)uint64']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AsaStakingContractParamsFactory.calculatePendingRewards(params))
      return {...result, return: result.return as unknown as (undefined | AsaStakingContractReturns['calculatePendingRewards(account)uint64'])}
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `claimRewards()void` ABI method.
     *
    * Claim rewards for the caller with auto-compounding
    This implements the pull-based reward model with automatic compounding

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    claimRewards: async (params: CallParams<AsaStakingContractArgs['obj']['claimRewards()void'] | AsaStakingContractArgs['tuple']['claimRewards()void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AsaStakingContractParamsFactory.claimRewards(params))
      return {...result, return: result.return as unknown as (undefined | AsaStakingContractReturns['claimRewards()void'])}
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `updateAPR(uint64)void` ABI method.
     *
    * Update the APR basis points
    Only the admin can call this

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateApr: async (params: CallParams<AsaStakingContractArgs['obj']['updateAPR(uint64)void'] | AsaStakingContractArgs['tuple']['updateAPR(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AsaStakingContractParamsFactory.updateApr(params))
      return {...result, return: result.return as unknown as (undefined | AsaStakingContractReturns['updateAPR(uint64)void'])}
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `updateAdmin(account)void` ABI method.
     *
    * Update the admin address
    Only the current admin can call this

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    updateAdmin: async (params: CallParams<AsaStakingContractArgs['obj']['updateAdmin(account)void'] | AsaStakingContractArgs['tuple']['updateAdmin(account)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AsaStakingContractParamsFactory.updateAdmin(params))
      return {...result, return: result.return as unknown as (undefined | AsaStakingContractReturns['updateAdmin(account)void'])}
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `getUserStats(account)uint64[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get current staking statistics for a user
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getUserStats: async (params: CallParams<AsaStakingContractArgs['obj']['getUserStats(account)uint64[]'] | AsaStakingContractArgs['tuple']['getUserStats(account)uint64[]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AsaStakingContractParamsFactory.getUserStats(params))
      return {...result, return: result.return as unknown as (undefined | AsaStakingContractReturns['getUserStats(account)uint64[]'])}
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `getContractStats()uint64[]` ABI method.
     * 
     * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
     *
     * Get contract global statistics
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    getContractStats: async (params: CallParams<AsaStakingContractArgs['obj']['getContractStats()uint64[]'] | AsaStakingContractArgs['tuple']['getContractStats()uint64[]']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC} = {args: []}) => {
      const result = await this.appClient.send.call(AsaStakingContractParamsFactory.getContractStats(params))
      return {...result, return: result.return as unknown as (undefined | AsaStakingContractReturns['getContractStats()uint64[]'])}
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `emergencyWithdrawRewards(uint64)void` ABI method.
     *
     * Emergency withdraw rewards from pool (admin only)
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    emergencyWithdrawRewards: async (params: CallParams<AsaStakingContractArgs['obj']['emergencyWithdrawRewards(uint64)void'] | AsaStakingContractArgs['tuple']['emergencyWithdrawRewards(uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AsaStakingContractParamsFactory.emergencyWithdrawRewards(params))
      return {...result, return: result.return as unknown as (undefined | AsaStakingContractReturns['emergencyWithdrawRewards(uint64)void'])}
    },

    /**
     * Makes a call to the ASAStakingContract smart contract using the `deleteUserBox(account)void` ABI method.
     *
    * Delete a user's box (for cleanup)
    Can only be called by the box owner or admin

     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    deleteUserBox: async (params: CallParams<AsaStakingContractArgs['obj']['deleteUserBox(account)void'] | AsaStakingContractArgs['tuple']['deleteUserBox(account)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(AsaStakingContractParamsFactory.deleteUserBox(params))
      return {...result, return: result.return as unknown as (undefined | AsaStakingContractReturns['deleteUserBox(account)void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new AsaStakingContractClient(this.appClient.clone(params))
  }

  /**
   * Makes a readonly (simulated) call to the ASAStakingContract smart contract using the `calculateUserRewardsForPeriod(account)uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
  * Calculate rewards for a specific user for a given period
  This calculates rewards per distribution period

   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async calculateUserRewardsForPeriod(params: CallParams<AsaStakingContractArgs['obj']['calculateUserRewardsForPeriod(account)uint64'] | AsaStakingContractArgs['tuple']['calculateUserRewardsForPeriod(account)uint64']>) {
    const result = await this.appClient.send.call(AsaStakingContractParamsFactory.calculateUserRewardsForPeriod(params))
    return result.return as unknown as AsaStakingContractReturns['calculateUserRewardsForPeriod(account)uint64']
  }

  /**
   * Makes a readonly (simulated) call to the ASAStakingContract smart contract using the `calculatePendingRewards(account)uint64` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Calculate pending rewards for a user since their last claim
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async calculatePendingRewards(params: CallParams<AsaStakingContractArgs['obj']['calculatePendingRewards(account)uint64'] | AsaStakingContractArgs['tuple']['calculatePendingRewards(account)uint64']>) {
    const result = await this.appClient.send.call(AsaStakingContractParamsFactory.calculatePendingRewards(params))
    return result.return as unknown as AsaStakingContractReturns['calculatePendingRewards(account)uint64']
  }

  /**
   * Makes a readonly (simulated) call to the ASAStakingContract smart contract using the `getUserStats(account)uint64[]` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Get current staking statistics for a user
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getUserStats(params: CallParams<AsaStakingContractArgs['obj']['getUserStats(account)uint64[]'] | AsaStakingContractArgs['tuple']['getUserStats(account)uint64[]']>) {
    const result = await this.appClient.send.call(AsaStakingContractParamsFactory.getUserStats(params))
    return result.return as unknown as AsaStakingContractReturns['getUserStats(account)uint64[]']
  }

  /**
   * Makes a readonly (simulated) call to the ASAStakingContract smart contract using the `getContractStats()uint64[]` ABI method.
   * 
   * This method is a readonly method; calling it with onComplete of NoOp will result in a simulated transaction rather than a real transaction.
   *
   * Get contract global statistics
   *
   * @param params The params for the smart contract call
   * @returns The call result
   */
  async getContractStats(params: CallParams<AsaStakingContractArgs['obj']['getContractStats()uint64[]'] | AsaStakingContractArgs['tuple']['getContractStats()uint64[]']> = {args: []}) {
    const result = await this.appClient.send.call(AsaStakingContractParamsFactory.getContractStats(params))
    return result.return as unknown as AsaStakingContractReturns['getContractStats()uint64[]']
  }

  /**
   * Methods to access state for the current ASAStakingContract app
   */
  state = {
    /**
     * Methods to access global state for the current ASAStakingContract app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          asset: result.asset,
          adminAddress: result.adminAddress,
          totalStaked: result.totalStaked,
          aprBasisPoints: result.aprBasisPoints,
          lastDistributionTime: result.lastDistributionTime,
          distributionPeriodSeconds: result.distributionPeriodSeconds,
          minimumStake: result.minimumStake,
          rewardPool: result.rewardPool,
        }
      },
      /**
       * Get the current value of the asset key in global state
       */
      asset: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("asset")) as bigint | undefined },
      /**
       * Get the current value of the adminAddress key in global state
       */
      adminAddress: async (): Promise<string | undefined> => { return (await this.appClient.state.global.getValue("adminAddress")) as string | undefined },
      /**
       * Get the current value of the totalStaked key in global state
       */
      totalStaked: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("totalStaked")) as bigint | undefined },
      /**
       * Get the current value of the aprBasisPoints key in global state
       */
      aprBasisPoints: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("aprBasisPoints")) as bigint | undefined },
      /**
       * Get the current value of the lastDistributionTime key in global state
       */
      lastDistributionTime: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("lastDistributionTime")) as bigint | undefined },
      /**
       * Get the current value of the distributionPeriodSeconds key in global state
       */
      distributionPeriodSeconds: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("distributionPeriodSeconds")) as bigint | undefined },
      /**
       * Get the current value of the minimumStake key in global state
       */
      minimumStake: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("minimumStake")) as bigint | undefined },
      /**
       * Get the current value of the rewardPool key in global state
       */
      rewardPool: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("rewardPool")) as bigint | undefined },
    },
    /**
     * Methods to access box state for the current ASAStakingContract app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the stakers map in box state
       */
      stakers: {
        /**
         * Get all current values of the stakers map in box state
         */
        getMap: async (): Promise<Map<string, UserStakeInfo>> => { return (await this.appClient.state.box.getMap("stakers")) as Map<string, UserStakeInfo> },
        /**
         * Get a current value of the stakers map by key from box state
         */
        value: async (key: string): Promise<UserStakeInfo | undefined> => { return await this.appClient.state.box.getMapValue("stakers", key) as UserStakeInfo | undefined },
      },
    },
  }

  public newGroup(): AsaStakingContractComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a getUserStakeInfo(account)(uint64,uint64,uint64,uint64) method call against the ASAStakingContract contract
       */
      getUserStakeInfo(params: CallParams<AsaStakingContractArgs['obj']['getUserStakeInfo(account)(uint64,uint64,uint64,uint64)'] | AsaStakingContractArgs['tuple']['getUserStakeInfo(account)(uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getUserStakeInfo(params)))
        resultMappers.push((v) => client.decodeReturnValue('getUserStakeInfo(account)(uint64,uint64,uint64,uint64)', v))
        return this
      },
      /**
       * Add a storeUserStakeInfo(account,(uint64,uint64,uint64,uint64))void method call against the ASAStakingContract contract
       */
      storeUserStakeInfo(params: CallParams<AsaStakingContractArgs['obj']['storeUserStakeInfo(account,(uint64,uint64,uint64,uint64))void'] | AsaStakingContractArgs['tuple']['storeUserStakeInfo(account,(uint64,uint64,uint64,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.storeUserStakeInfo(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getCurrentPeriod()uint64 method call against the ASAStakingContract contract
       */
      getCurrentPeriod(params: CallParams<AsaStakingContractArgs['obj']['getCurrentPeriod()uint64'] | AsaStakingContractArgs['tuple']['getCurrentPeriod()uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getCurrentPeriod(params)))
        resultMappers.push((v) => client.decodeReturnValue('getCurrentPeriod()uint64', v))
        return this
      },
      /**
       * Add a initialize(asset,account,uint64,uint64,uint64)void method call against the ASAStakingContract contract
       */
      initialize(params: CallParams<AsaStakingContractArgs['obj']['initialize(asset,account,uint64,uint64,uint64)void'] | AsaStakingContractArgs['tuple']['initialize(asset,account,uint64,uint64,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.initialize(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a optInToAsset()void method call against the ASAStakingContract contract
       */
      optInToAsset(params: CallParams<AsaStakingContractArgs['obj']['optInToAsset()void'] | AsaStakingContractArgs['tuple']['optInToAsset()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.optInToAsset(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a stake()void method call against the ASAStakingContract contract
       */
      stake(params: CallParams<AsaStakingContractArgs['obj']['stake()void'] | AsaStakingContractArgs['tuple']['stake()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.stake(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a withdraw(uint64)void method call against the ASAStakingContract contract
       */
      withdraw(params: CallParams<AsaStakingContractArgs['obj']['withdraw(uint64)void'] | AsaStakingContractArgs['tuple']['withdraw(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.withdraw(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a addRewards()void method call against the ASAStakingContract contract
       */
      addRewards(params: CallParams<AsaStakingContractArgs['obj']['addRewards()void'] | AsaStakingContractArgs['tuple']['addRewards()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.addRewards(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a calculateUserRewardsForPeriod(account)uint64 method call against the ASAStakingContract contract
       */
      calculateUserRewardsForPeriod(params: CallParams<AsaStakingContractArgs['obj']['calculateUserRewardsForPeriod(account)uint64'] | AsaStakingContractArgs['tuple']['calculateUserRewardsForPeriod(account)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.calculateUserRewardsForPeriod(params)))
        resultMappers.push((v) => client.decodeReturnValue('calculateUserRewardsForPeriod(account)uint64', v))
        return this
      },
      /**
       * Add a calculatePendingRewards(account)uint64 method call against the ASAStakingContract contract
       */
      calculatePendingRewards(params: CallParams<AsaStakingContractArgs['obj']['calculatePendingRewards(account)uint64'] | AsaStakingContractArgs['tuple']['calculatePendingRewards(account)uint64']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.calculatePendingRewards(params)))
        resultMappers.push((v) => client.decodeReturnValue('calculatePendingRewards(account)uint64', v))
        return this
      },
      /**
       * Add a claimRewards()void method call against the ASAStakingContract contract
       */
      claimRewards(params: CallParams<AsaStakingContractArgs['obj']['claimRewards()void'] | AsaStakingContractArgs['tuple']['claimRewards()void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.claimRewards(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a updateAPR(uint64)void method call against the ASAStakingContract contract
       */
      updateApr(params: CallParams<AsaStakingContractArgs['obj']['updateAPR(uint64)void'] | AsaStakingContractArgs['tuple']['updateAPR(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateApr(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a updateAdmin(account)void method call against the ASAStakingContract contract
       */
      updateAdmin(params: CallParams<AsaStakingContractArgs['obj']['updateAdmin(account)void'] | AsaStakingContractArgs['tuple']['updateAdmin(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.updateAdmin(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a getUserStats(account)uint64[] method call against the ASAStakingContract contract
       */
      getUserStats(params: CallParams<AsaStakingContractArgs['obj']['getUserStats(account)uint64[]'] | AsaStakingContractArgs['tuple']['getUserStats(account)uint64[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getUserStats(params)))
        resultMappers.push((v) => client.decodeReturnValue('getUserStats(account)uint64[]', v))
        return this
      },
      /**
       * Add a getContractStats()uint64[] method call against the ASAStakingContract contract
       */
      getContractStats(params: CallParams<AsaStakingContractArgs['obj']['getContractStats()uint64[]'] | AsaStakingContractArgs['tuple']['getContractStats()uint64[]']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.getContractStats(params)))
        resultMappers.push((v) => client.decodeReturnValue('getContractStats()uint64[]', v))
        return this
      },
      /**
       * Add a emergencyWithdrawRewards(uint64)void method call against the ASAStakingContract contract
       */
      emergencyWithdrawRewards(params: CallParams<AsaStakingContractArgs['obj']['emergencyWithdrawRewards(uint64)void'] | AsaStakingContractArgs['tuple']['emergencyWithdrawRewards(uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.emergencyWithdrawRewards(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a deleteUserBox(account)void method call against the ASAStakingContract contract
       */
      deleteUserBox(params: CallParams<AsaStakingContractArgs['obj']['deleteUserBox(account)void'] | AsaStakingContractArgs['tuple']['deleteUserBox(account)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.deleteUserBox(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the ASAStakingContract contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as AsaStakingContractComposer
  }
}
export type AsaStakingContractComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the getUserStakeInfo(account)(uint64,uint64,uint64,uint64) ABI method.
   *
   * Helper function to read user stake info from box storage
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getUserStakeInfo(params?: CallParams<AsaStakingContractArgs['obj']['getUserStakeInfo(account)(uint64,uint64,uint64,uint64)'] | AsaStakingContractArgs['tuple']['getUserStakeInfo(account)(uint64,uint64,uint64,uint64)']>): AsaStakingContractComposer<[...TReturns, AsaStakingContractReturns['getUserStakeInfo(account)(uint64,uint64,uint64,uint64)'] | undefined]>

  /**
   * Calls the storeUserStakeInfo(account,(uint64,uint64,uint64,uint64))void ABI method.
   *
   * Helper function to store user stake info in box storage
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  storeUserStakeInfo(params?: CallParams<AsaStakingContractArgs['obj']['storeUserStakeInfo(account,(uint64,uint64,uint64,uint64))void'] | AsaStakingContractArgs['tuple']['storeUserStakeInfo(account,(uint64,uint64,uint64,uint64))void']>): AsaStakingContractComposer<[...TReturns, AsaStakingContractReturns['storeUserStakeInfo(account,(uint64,uint64,uint64,uint64))void'] | undefined]>

  /**
   * Calls the getCurrentPeriod()uint64 ABI method.
   *
   * Calculate the current distribution period
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getCurrentPeriod(params?: CallParams<AsaStakingContractArgs['obj']['getCurrentPeriod()uint64'] | AsaStakingContractArgs['tuple']['getCurrentPeriod()uint64']>): AsaStakingContractComposer<[...TReturns, AsaStakingContractReturns['getCurrentPeriod()uint64'] | undefined]>

  /**
   * Calls the initialize(asset,account,uint64,uint64,uint64)void ABI method.
   *
   * Initialize the contract with the ASA token ID and other parameters
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  initialize(params?: CallParams<AsaStakingContractArgs['obj']['initialize(asset,account,uint64,uint64,uint64)void'] | AsaStakingContractArgs['tuple']['initialize(asset,account,uint64,uint64,uint64)void']>): AsaStakingContractComposer<[...TReturns, AsaStakingContractReturns['initialize(asset,account,uint64,uint64,uint64)void'] | undefined]>

  /**
   * Calls the optInToAsset()void ABI method.
   *
   * Opt the contract into the ASA
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  optInToAsset(params?: CallParams<AsaStakingContractArgs['obj']['optInToAsset()void'] | AsaStakingContractArgs['tuple']['optInToAsset()void']>): AsaStakingContractComposer<[...TReturns, AsaStakingContractReturns['optInToAsset()void'] | undefined]>

  /**
   * Calls the stake()void ABI method.
   *
  * Stake tokens
  Requires a companion ASA transfer transaction

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  stake(params?: CallParams<AsaStakingContractArgs['obj']['stake()void'] | AsaStakingContractArgs['tuple']['stake()void']>): AsaStakingContractComposer<[...TReturns, AsaStakingContractReturns['stake()void'] | undefined]>

  /**
   * Calls the withdraw(uint64)void ABI method.
   *
   * Withdraw staked tokens
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  withdraw(params?: CallParams<AsaStakingContractArgs['obj']['withdraw(uint64)void'] | AsaStakingContractArgs['tuple']['withdraw(uint64)void']>): AsaStakingContractComposer<[...TReturns, AsaStakingContractReturns['withdraw(uint64)void'] | undefined]>

  /**
   * Calls the addRewards()void ABI method.
   *
  * Add rewards to the reward pool
  Only the admin can call this
  Requires a companion ASA transfer transaction with the rewards

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  addRewards(params?: CallParams<AsaStakingContractArgs['obj']['addRewards()void'] | AsaStakingContractArgs['tuple']['addRewards()void']>): AsaStakingContractComposer<[...TReturns, AsaStakingContractReturns['addRewards()void'] | undefined]>

  /**
   * Calls the calculateUserRewardsForPeriod(account)uint64 ABI method.
   *
  * Calculate rewards for a specific user for a given period
  This calculates rewards per distribution period

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  calculateUserRewardsForPeriod(params?: CallParams<AsaStakingContractArgs['obj']['calculateUserRewardsForPeriod(account)uint64'] | AsaStakingContractArgs['tuple']['calculateUserRewardsForPeriod(account)uint64']>): AsaStakingContractComposer<[...TReturns, AsaStakingContractReturns['calculateUserRewardsForPeriod(account)uint64'] | undefined]>

  /**
   * Calls the calculatePendingRewards(account)uint64 ABI method.
   *
   * Calculate pending rewards for a user since their last claim
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  calculatePendingRewards(params?: CallParams<AsaStakingContractArgs['obj']['calculatePendingRewards(account)uint64'] | AsaStakingContractArgs['tuple']['calculatePendingRewards(account)uint64']>): AsaStakingContractComposer<[...TReturns, AsaStakingContractReturns['calculatePendingRewards(account)uint64'] | undefined]>

  /**
   * Calls the claimRewards()void ABI method.
   *
  * Claim rewards for the caller with auto-compounding
  This implements the pull-based reward model with automatic compounding

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  claimRewards(params?: CallParams<AsaStakingContractArgs['obj']['claimRewards()void'] | AsaStakingContractArgs['tuple']['claimRewards()void']>): AsaStakingContractComposer<[...TReturns, AsaStakingContractReturns['claimRewards()void'] | undefined]>

  /**
   * Calls the updateAPR(uint64)void ABI method.
   *
  * Update the APR basis points
  Only the admin can call this

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateApr(params?: CallParams<AsaStakingContractArgs['obj']['updateAPR(uint64)void'] | AsaStakingContractArgs['tuple']['updateAPR(uint64)void']>): AsaStakingContractComposer<[...TReturns, AsaStakingContractReturns['updateAPR(uint64)void'] | undefined]>

  /**
   * Calls the updateAdmin(account)void ABI method.
   *
  * Update the admin address
  Only the current admin can call this

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  updateAdmin(params?: CallParams<AsaStakingContractArgs['obj']['updateAdmin(account)void'] | AsaStakingContractArgs['tuple']['updateAdmin(account)void']>): AsaStakingContractComposer<[...TReturns, AsaStakingContractReturns['updateAdmin(account)void'] | undefined]>

  /**
   * Calls the getUserStats(account)uint64[] ABI method.
   *
   * Get current staking statistics for a user
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getUserStats(params?: CallParams<AsaStakingContractArgs['obj']['getUserStats(account)uint64[]'] | AsaStakingContractArgs['tuple']['getUserStats(account)uint64[]']>): AsaStakingContractComposer<[...TReturns, AsaStakingContractReturns['getUserStats(account)uint64[]'] | undefined]>

  /**
   * Calls the getContractStats()uint64[] ABI method.
   *
   * Get contract global statistics
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  getContractStats(params?: CallParams<AsaStakingContractArgs['obj']['getContractStats()uint64[]'] | AsaStakingContractArgs['tuple']['getContractStats()uint64[]']>): AsaStakingContractComposer<[...TReturns, AsaStakingContractReturns['getContractStats()uint64[]'] | undefined]>

  /**
   * Calls the emergencyWithdrawRewards(uint64)void ABI method.
   *
   * Emergency withdraw rewards from pool (admin only)
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  emergencyWithdrawRewards(params?: CallParams<AsaStakingContractArgs['obj']['emergencyWithdrawRewards(uint64)void'] | AsaStakingContractArgs['tuple']['emergencyWithdrawRewards(uint64)void']>): AsaStakingContractComposer<[...TReturns, AsaStakingContractReturns['emergencyWithdrawRewards(uint64)void'] | undefined]>

  /**
   * Calls the deleteUserBox(account)void ABI method.
   *
  * Delete a user's box (for cleanup)
  Can only be called by the box owner or admin

   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  deleteUserBox(params?: CallParams<AsaStakingContractArgs['obj']['deleteUserBox(account)void'] | AsaStakingContractArgs['tuple']['deleteUserBox(account)void']>): AsaStakingContractComposer<[...TReturns, AsaStakingContractReturns['deleteUserBox(account)void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the ASAStakingContract smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): AsaStakingContractComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): AsaStakingContractComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<AsaStakingContractComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<AsaStakingContractComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<AsaStakingContractComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<AsaStakingContractComposerResults<TReturns>>
}
export type AsaStakingContractComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

