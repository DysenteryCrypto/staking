{
    "hints": {
        "getUserBoxName(account)address": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getUserStakeInfo(account)(uint64,uint64,uint64)": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "UserStakeInfo",
                    "elements": [
                        [
                            "stakedAmount",
                            "uint64"
                        ],
                        [
                            "lastStakeTime",
                            "uint64"
                        ],
                        [
                            "totalRewardsEarned",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "storeUserStakeInfo(account,(uint64,uint64,uint64))void": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "stakeInfo": {
                    "name": "UserStakeInfo",
                    "elements": [
                        [
                            "stakedAmount",
                            "uint64"
                        ],
                        [
                            "lastStakeTime",
                            "uint64"
                        ],
                        [
                            "totalRewardsEarned",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "initialize(uint64,account,uint64,uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "optInToAsset()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "stake()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "withdraw(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "distributeRewards()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "calculateUserRewards(account)uint64": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "claimRewards()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "updateAPR(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "updateAdmin(account)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getUserStats(account)uint64[]": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getContractStats()uint64[]": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "deleteUserBox(account)void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 7,
            "num_uints": 6
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "adminAddress": {
                    "type": "bytes",
                    "key": "adminAddress"
                },
                "aprBasisPoints": {
                    "type": "uint64",
                    "key": "aprBasisPoints"
                },
                "assetId": {
                    "type": "uint64",
                    "key": "assetId"
                },
                "distributionPeriodSeconds": {
                    "type": "uint64",
                    "key": "distributionPeriodSeconds"
                },
                "lastDistributionTime": {
                    "type": "uint64",
                    "key": "lastDistributionTime"
                },
                "minimumStake": {
                    "type": "uint64",
                    "key": "minimumStake"
                },
                "totalStaked": {
                    "type": "uint64",
                    "key": "totalStaked"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "ASAStakingContract",
        "desc": "ASA Staking Contract for Algorand\n\nThis contract allows users to:\n- Stake an ASA token\n- Earn daily rewards that compound automatically\n- Add to their stake at any time\n- Withdraw part or all of their stake at any time\n- Rewards paid out if staked for at least 24 hours before distribution\n\nThis implementation uses box storage to store user staking information",
        "methods": [
            {
                "name": "getUserBoxName",
                "args": [
                    {
                        "type": "account",
                        "name": "userAddress"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "address"
                },
                "desc": "Helper function to get a user's box name\nUser address is used as the box name for simplicity"
            },
            {
                "name": "getUserStakeInfo",
                "args": [
                    {
                        "type": "account",
                        "name": "userAddress"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(uint64,uint64,uint64)"
                },
                "desc": "Helper function to read user stake info from box storage"
            },
            {
                "name": "storeUserStakeInfo",
                "args": [
                    {
                        "type": "account",
                        "name": "userAddress"
                    },
                    {
                        "type": "(uint64,uint64,uint64)",
                        "name": "stakeInfo"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Helper function to store user stake info in box storage"
            },
            {
                "name": "initialize",
                "args": [
                    {
                        "type": "uint64",
                        "name": "assetId"
                    },
                    {
                        "type": "account",
                        "name": "adminAddress"
                    },
                    {
                        "type": "uint64",
                        "name": "aprBasisPoints"
                    },
                    {
                        "type": "uint64",
                        "name": "distributionPeriodSeconds"
                    },
                    {
                        "type": "uint64",
                        "name": "minimumStake"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Initialize the contract with the ASA token ID and other parameters"
            },
            {
                "name": "optInToAsset",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Opt the contract into the ASA"
            },
            {
                "name": "stake",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Stake tokens\nRequires a companion ASA transfer transaction"
            },
            {
                "name": "withdraw",
                "args": [
                    {
                        "type": "uint64",
                        "name": "amount"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Withdraw staked tokens"
            },
            {
                "name": "distributeRewards",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Distribute rewards to all stakers\nOnly the admin can call this\nRequires a companion ASA transfer transaction with the rewards"
            },
            {
                "name": "calculateUserRewards",
                "args": [
                    {
                        "type": "account",
                        "name": "userAddress"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "uint64"
                },
                "desc": "Calculate rewards for a specific user\nThis is a read-only method that doesn't modify state"
            },
            {
                "name": "claimRewards",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Claim rewards for the caller\nThis implements the pull-based reward model"
            },
            {
                "name": "updateAPR",
                "args": [
                    {
                        "type": "uint64",
                        "name": "newAprBasisPoints"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Update the APR basis points\nOnly the admin can call this"
            },
            {
                "name": "updateAdmin",
                "args": [
                    {
                        "type": "account",
                        "name": "newAdminAddress"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Update the admin address\nOnly the current admin can call this"
            },
            {
                "name": "getUserStats",
                "args": [
                    {
                        "type": "account",
                        "name": "userAddress"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "uint64[]"
                },
                "desc": "Get current staking statistics for a user"
            },
            {
                "name": "getContractStats",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "uint64[]"
                },
                "desc": "Get contract global statistics"
            },
            {
                "name": "deleteUserBox",
                "args": [
                    {
                        "type": "account",
                        "name": "userAddress"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Delete a user's box (for cleanup)\nCan only be called by the box owner or admin"
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}