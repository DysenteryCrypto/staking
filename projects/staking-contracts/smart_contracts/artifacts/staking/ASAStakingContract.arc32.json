{
    "hints": {
        "getUserStakeInfo(account)(uint64,uint64,uint64,uint64,uint64)": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "output": {
                    "name": "UserStakeInfo",
                    "elements": [
                        [
                            "stakedAmount",
                            "uint64"
                        ],
                        [
                            "firstStakeTime",
                            "uint64"
                        ],
                        [
                            "lastStakeTime",
                            "uint64"
                        ],
                        [
                            "totalRewardsEarned",
                            "uint64"
                        ],
                        [
                            "rewardDebt",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "storeUserStakeInfo(account,(uint64,uint64,uint64,uint64,uint64))void": {
            "call_config": {
                "no_op": "CALL"
            },
            "structs": {
                "stakeInfo": {
                    "name": "UserStakeInfo",
                    "elements": [
                        [
                            "stakedAmount",
                            "uint64"
                        ],
                        [
                            "firstStakeTime",
                            "uint64"
                        ],
                        [
                            "lastStakeTime",
                            "uint64"
                        ],
                        [
                            "totalRewardsEarned",
                            "uint64"
                        ],
                        [
                            "rewardDebt",
                            "uint64"
                        ]
                    ]
                }
            }
        },
        "initialize(asset,account,uint64,uint64,uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "optInToAsset()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "stake()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "withdraw(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "claimRewards()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "addRewards()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getCurrentAPY()uint64": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getPendingRewards(account)uint64": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "triggerRewardDistribution()void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "updateAdmin(account)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getUserStats(account)uint64[]": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "getContractStats()uint64[]": {
            "read_only": true,
            "call_config": {
                "no_op": "CALL"
            }
        },
        "emergencyWithdrawRewards(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "deleteUserBox(account)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "updateWeeklyRewards(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        },
        "updateRewardPeriod(uint64)void": {
            "call_config": {
                "no_op": "CALL"
            }
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBAYWxnb3JhbmRmb3VuZGF0aW9uL2FsZ29yYW5kLXR5cGVzY3JpcHQvYmFzZS1jb250cmFjdC5kLnRzOjpCYXNlQ29udHJhY3QuY2xlYXJTdGF0ZVByb2dyYW0oKSAtPiB1aW50NjQ6Cm1haW46CiAgICBwdXNoaW50IDEgLy8gMQogICAgcmV0dXJuCg=="
    },
    "state": {
        "global": {
            "num_byte_slices": 8,
            "num_uints": 9
        },
        "local": {
            "num_byte_slices": 0,
            "num_uints": 0
        }
    },
    "schema": {
        "global": {
            "declared": {
                "accumulatedRewardsPerShare": {
                    "type": "uint64",
                    "key": "accumulatedRewardsPerShare"
                },
                "adminAddress": {
                    "type": "bytes",
                    "key": "adminAddress"
                },
                "asset": {
                    "type": "uint64",
                    "key": "asset"
                },
                "lastRewardTime": {
                    "type": "uint64",
                    "key": "lastRewardTime"
                },
                "minimumStake": {
                    "type": "uint64",
                    "key": "minimumStake"
                },
                "precision": {
                    "type": "uint64",
                    "key": "precision"
                },
                "rewardPeriod": {
                    "type": "uint64",
                    "key": "rewardPeriod"
                },
                "rewardPool": {
                    "type": "uint64",
                    "key": "rewardPool"
                },
                "totalStaked": {
                    "type": "uint64",
                    "key": "totalStaked"
                },
                "weeklyRewards": {
                    "type": "uint64",
                    "key": "weeklyRewards"
                }
            },
            "reserved": {}
        },
        "local": {
            "declared": {},
            "reserved": {}
        }
    },
    "contract": {
        "name": "ASAStakingContract",
        "desc": "ASA Staking Contract for Algorand with Fixed Weekly Reward Pool\n\nThis contract allows users to:\n- Stake an ASA token\n- Earn proportional rewards from a fixed weekly pool of 100,000 tokens\n- Add to their stake at any time\n- Withdraw part or all of their stake at any time\n- Claim rewards at any time\n- Dynamic APY that adjusts based on total staked amount\n\nThis implementation uses box storage to store user staking information\nand an accumulator pattern for gas-efficient reward distribution",
        "methods": [
            {
                "name": "getUserStakeInfo",
                "args": [
                    {
                        "type": "account",
                        "name": "userAddress"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "(uint64,uint64,uint64,uint64,uint64)"
                },
                "desc": "Helper function to read user stake info from box storage"
            },
            {
                "name": "storeUserStakeInfo",
                "args": [
                    {
                        "type": "account",
                        "name": "userAddress"
                    },
                    {
                        "type": "(uint64,uint64,uint64,uint64,uint64)",
                        "name": "stakeInfo"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Helper function to store user stake info in box storage"
            },
            {
                "name": "initialize",
                "args": [
                    {
                        "type": "asset",
                        "name": "asset"
                    },
                    {
                        "type": "account",
                        "name": "adminAddress"
                    },
                    {
                        "type": "uint64",
                        "name": "minimumStake"
                    },
                    {
                        "type": "uint64",
                        "name": "weeklyRewards"
                    },
                    {
                        "type": "uint64",
                        "name": "rewardPeriod"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Initialize the contract with the ASA token ID and other parameters"
            },
            {
                "name": "optInToAsset",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Opt the contract into the ASA"
            },
            {
                "name": "stake",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Stake tokens\nRequires a companion ASA transfer transaction\nAutomatically claims pending rewards"
            },
            {
                "name": "withdraw",
                "args": [
                    {
                        "type": "uint64",
                        "name": "amount"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Withdraw staked tokens\nAutomatically claims pending rewards"
            },
            {
                "name": "claimRewards",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Claim pending rewards without changing stake"
            },
            {
                "name": "addRewards",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Add rewards to the reward pool\nOnly the admin can call this\nRequires a companion ASA transfer transaction with the rewards"
            },
            {
                "name": "getCurrentAPY",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "uint64"
                },
                "desc": "Calculate current APY based on total staked amount"
            },
            {
                "name": "getPendingRewards",
                "args": [
                    {
                        "type": "account",
                        "name": "userAddress"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "uint64"
                },
                "desc": "Get pending rewards for a specific user"
            },
            {
                "name": "triggerRewardDistribution",
                "args": [],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Trigger reward distribution manually (admin only)\nUpdates accumulated rewards per share if period has passed"
            },
            {
                "name": "updateAdmin",
                "args": [
                    {
                        "type": "account",
                        "name": "newAdminAddress"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Update the admin address\nOnly the current admin can call this"
            },
            {
                "name": "getUserStats",
                "args": [
                    {
                        "type": "account",
                        "name": "userAddress"
                    }
                ],
                "readonly": true,
                "returns": {
                    "type": "uint64[]"
                },
                "desc": "Get current staking statistics for a user"
            },
            {
                "name": "getContractStats",
                "args": [],
                "readonly": true,
                "returns": {
                    "type": "uint64[]"
                },
                "desc": "Get contract global statistics"
            },
            {
                "name": "emergencyWithdrawRewards",
                "args": [
                    {
                        "type": "uint64",
                        "name": "amount"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Emergency withdraw rewards from pool (admin only)"
            },
            {
                "name": "deleteUserBox",
                "args": [
                    {
                        "type": "account",
                        "name": "userAddress"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Delete a user's box (for cleanup)\nCan only be called by the box owner or admin"
            },
            {
                "name": "updateWeeklyRewards",
                "args": [
                    {
                        "type": "uint64",
                        "name": "newWeeklyRewards"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Update weekly rewards amount (admin only)"
            },
            {
                "name": "updateRewardPeriod",
                "args": [
                    {
                        "type": "uint64",
                        "name": "newRewardPeriod"
                    }
                ],
                "readonly": false,
                "returns": {
                    "type": "void"
                },
                "desc": "Update reward period (admin only)"
            }
        ],
        "networks": {}
    },
    "bare_call_config": {
        "no_op": "CREATE"
    }
}