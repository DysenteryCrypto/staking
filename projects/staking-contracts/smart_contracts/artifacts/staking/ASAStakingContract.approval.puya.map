{
  "version": 3,
  "sources": [
    "/home/justin/projects/dod_staking/staking/projects/staking-contracts/smart_contracts/staking/contract.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+CS;AAA2C;AAAlD;AACO;AAAoD;;AAA3D;AACO;AAAkD;AAAzD;AACO;;AAAqD;AAA5D;AACO;;AAA2D;AAAlE;AACO;;AAAgE;AAAvE;AACO;;AAAmD;AAA1D;AACO;AAAiD;AAAxD;AATF;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAmaG;;AAAA;AAAA;AAAA;;AAAA;AAnaH;;;AAAA;AAAA;;AAmaG;;;AAAA;;AA5BA;;AAAA;AAAA;AAAA;;AAAA;AAvYH;;;AAAA;AAuYG;;;AAAA;;AAnBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAnBA;;AAAA;AAAA;AAAA;;AAAA;AAjWH;;;AAAA;AAAA;;AAiWG;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAbA;;AAAA;AAAA;AAAA;;AAAA;AApVH;;;AAAA;AAAA;;AAoVG;;;AAAA;;AAdA;;AAAA;AAAA;AAAA;;AAAA;AAtUH;;;AAAA;AAsUG;;;AAAA;;AApCA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AA5BA;;AAAA;AAAA;AAAA;;AAAA;AAtQH;;;AAAA;AAAA;;AAsQG;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AA9CA;;AAAA;AAAA;AAAA;;AAAA;AAxNH;;;AAAA;AAAA;;AAwNG;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AA5BA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AA5CA;;AAAA;AAAA;AAAA;;AAAA;AAhJH;;;AAAA;AAgJG;;;AAAA;;AA7CA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AArBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AA5BA;;AAAA;AAAA;AAAA;;AAAA;AAlDH;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAkDG;;;AAAA;;AATD;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAPA;;AAAA;AAAA;AAAA;;AAAA;AAlCF;;;AAAA;AAAA;;AAAA;;;AAkCE;;;AAAA;AAAA;;AAlBA;;AAAA;AAAA;AAAA;;AAAA;AAhBF;;;AAAA;AAAA;;AAgBE;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAhBF;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAgBE;;;AAL6D;;AAMrD;;AANqD;AAMrD;AAEM;AAAA;;AAAZ;;;AACiB;;AAAA;AAAA;AAAf;AAAA;AAEO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AAAA;AAYJ;;;AAvB6D;;AAAA;;AAAA;AAwB3D;;AAAA;;;;AAMF;;;AAlCO;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAoCL;;;AAAgC;AAAP;AAAA;AACX;;AAAP;;AAAA;AAAP;AAAA;AAMF;;;AAhDO;AAAA;AAAA;AAAA;AAyDE;AAAP;AAGW;;AAAkB;;AAAtB;AAAP;AA5DK;AA+DL;;AAAA;AA9DK;AA+DL;;AAAA;AA9DK;AA+DoB;AAAzB;AA9DK;;AA+DL;;AAAA;AA9DK;;AA+DoC;;AAAzC;AA9DK;;AA+DL;;AAAA;AA9DK;;AA+DL;;AAAA;AA9DK;AA+DmB;AAAxB;;AAMF;;;AA3EO;AAAA;AAAA;AAAA;AA+EM;;AAAkB;;AAAtB;AAAA;;;AAA4C;;AAAJ;;AAAA;AAAxC;;;;AAAP;AAhFK;AAAA;AAAA;AAAA;AAoFL;AAE0B;;;;;AACT;;;;;AAHjB;;;AAAA;;;AAAA;;;;;;AAaF;;;AAjGO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqGL;AAGc;;AAAc;;AAArB;AAAP;AAGsC;AAAtB;;AAAA;AAAA;AAAA;AAAA;AACwB;AAAjC;AAAP;AADsC;AAEvB;;AAAyB;;AAAjC;AAAP;AAFsC;AAGvB;;AAAA;AAAA;;AAAf;AAHsC;AAIvB;;AAAR;AAAP;AAzGK;AAAA;;AAAA;AAAA;AAgHqB;;AAApB;AACY;;;AAAZ;;AAGQ;AAAa;AAA3B;;;AACS;;AAAA;;AAAA;AAAP;AAE+C;;;AAAjB;AAA9B;;AAAA;AAAA;;;;;;AAI+D;AAAb;AAAa;AAAvB;;AAAA;AAAA;;AAAA;AAAjB;AAAzB;;AACkD;;AAAxB;AAA1B;;AAGA;;AAAA;AAAA;;;AAAA;AAnIK;AAAA;AAAA;AAAA;AAsIoB;AAtIpB;AAsIL;AAAA;;AAMF;;;AAE4B;;AAApB;AACY;;;AAAZ;AAGW;AAAa;AAAA;;AAA9B;AACO;;AAAA;;AAAA;AAAP;AACA;;AAAA;AAII;;AAAA;AAAJ;;;AACQ;;AAAA;;AAAyB;AArJ5B;AAAA;;AAAA;AAAA;AAuJI;AAAP;AAIwC;;AAAA;;AAAA;AAAjB;AAAzB;;AAAA;AAAA;;AAGA;;AAAA;AAAA;;;AAAA;AAlKK;AAAA;AAAA;AAAA;AAqKoB;;AAAA;AArKpB;AAqKL;AAAA;AAvKK;AAAA;AAAA;AAAA;AA2KL;AAEuB;;;;;;;;;;;AAFvB;;;AAKS;;;;;AALT;;AA1KK;AAAA;AAAA;AAAA;AA6LM;;AAAJ;AAAP;AAGc;;AAAc;;AAArB;AAAP;AAjMK;AAAA;AAAA;AAAA;AAqMiC;AAAtB;;AAAA;AAAA;AAAA;AAAA;AACwB;AAAjC;AAAP;AADsC;AAEvB;;AAAyB;;AAAjC;AAAP;AAFsC;AAGvB;;AAAf;AAAA;AAHsC;AAIvB;;AAAR;;AAAA;AAAP;AAlMK;AAAA;AAAA;AAAA;AAqMmB;AArMnB;AAqML;AAAA;AAxMK;;AA2MoC;;AAAzC;;AAOF;;;;;;AAnNO;AAAA;;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAGA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAwND;;;AAAA;;AAAA;;;AACK;AAAP;;AAAA;AAII;;AAAY;;;AAAZ;AAAA;;AAGQ;AAAa;AAAA;AAAA;;AAA3B;;;AACS;AAAP;;AAAA;AAKI;;AAA0B;AAAc;AAInC;;AAAkB;AADI;;;;AACJ;AAAzB;AAAJ;;;AACS;AAAP;;AAAA;AAQI;;AAAA;;AAA8B;AAIZ;;AAAA;AAHc;;;;;;;AAGf;AAEvB;;AAAA;AAMF;;;;;;;AAEQ;;AAAY;;;AAAZ;AAEQ;AAAa;AAA3B;;;AACS;AAAP;;AAAA;AAGoB;;;AAAhB;AAAA;;AACA;;AAA8B;;AAAkB;AAAhD;AAAA;;AAGgC;AAAA;;;AAAoC;;AAAA;;AAAA;;;AAE1E;;AAAA;;;AACS;AAAP;;AAAA;AAII;;AAAkB;;;AAEjB;;AAAA;AAAP;;AAAA;AAT8G;;;;;;AAkBpF;;AACpB;AAAY;;;AAGY;AAAb;AAAa;AAA9B;AAAA;AAGM;;AAAiB;;;AACvB;AAAA;AAnSK;AAAA;AAAA;AAAA;AAsSE;;AAAA;AAAP;AAG0C;AAAA;;AAAA;AAAjB;AAAzB;;AAAA;AAAA;;AAG6E;AAAnB;;AAAmB;AAA7B;;AAAA;AAAjB;AAA/B;;AAG+C;;;AAAjB;AAA9B;;AAGA;;AAAA;AAAA;;;AAAA;AAvTK;AAAA;AAAA;AAAA;AA0ToB;;AAAA;AA1TpB;AA0TL;AAAA;AArTK;AAAA;AAAA;AAAA;AAsTmB;AAAA;AAtTnB;AAsTL;AAAA;;AAOF;;;AAnUO;AAAA;AAAA;AAAA;AAuUM;;AAAJ;AAAP;AArUK;;AAwUL;;AAAA;;AAOF;;;AAjVO;AAAA;AAAA;AAAA;AAqVM;;AAAJ;AAAP;AArVK;AAwVL;;AAAA;;AAMF;;;AAEQ;;AAAY;;;AACZ;;AAAiB;;;AAGE;;AAAb;AAAa;AACC;;AAAd;AAAc;AACK;;AAAnB;;AAAmB;AAED;;AAAlB;;AAAkB;AAJL;;AAAA;AACC;;AAAA;AADD;AAEM;;AAAA;AAFN;AAGvB;;AAAA;AAHuB;AAIK;AAAA;AAJL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAOzB;AA5WK;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAqXH;;;AA5XG;;AAAA;AAEA;;AAAA;AAAA;AACA;;AAAA;AADA;AAEA;;AAAA;AAFA;AAGA;;AAAA;AAHA;AAIA;;AAAA;AAJA;AAKA;;AAAA;AALA;AA0XH;AAAA;AA1XG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AA6XL;AAMF;;;AApYO;AAAA;AAAA;AAAA;AAwYM;;AAAJ;;AAAA;AAAP;AAlYK;AAAA;AAAA;AAAA;AAqYE;;AAAA;AAAP;AArYK;AAAA;AAAA;AAAA;AAwYmB;;AAAA;AAxYnB;AAwYL;AAAA;AA/YK;AAAA;AAAA;AAAA;AAmZL;;;;;;;;;AAAA;;;AAKS;;;;;AALT;;AAcF;;;;AAhaO;AAAA;AAAA;AAAA;AAsaM;;AAAJ;;AAAA;AAAA;;;AAA+B;;AAAJ;;AAAA;AAA3B;;;;AAAP;AAGM;;AAAY;;;AACD;AAAa;AAAvB;AAAP;AAla2D;;AAqarD;;AAraqD;AAqarD;AAAA;;AACM;AAAA;;AAAZ;;;AACU;;AAAA;;;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 4 8"
    },
    "7": {
      "op": "bytecblock \"rewardPool\" \"asset\" \"totalStaked\" \"adminAddress\" 0x151f7c75 \"aprBasisPoints\" \"distributionPeriodSeconds\" \"minimumStake\" \"lastDistributionTime\" \"stakers\""
    },
    "139": {
      "op": "txn ApplicationID",
      "defined_out": [
        "reinterpret_bool%0#0"
      ],
      "stack_out": [
        "reinterpret_bool%0#0"
      ]
    },
    "141": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "144": {
      "op": "bytec_1 // \"asset\"",
      "defined_out": [
        "\"asset\""
      ],
      "stack_out": [
        "\"asset\""
      ]
    },
    "145": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"asset\"",
        "0"
      ],
      "stack_out": [
        "\"asset\"",
        "0"
      ]
    },
    "146": {
      "op": "app_global_put",
      "stack_out": []
    },
    "147": {
      "op": "bytec_3 // \"adminAddress\"",
      "defined_out": [
        "\"adminAddress\""
      ],
      "stack_out": [
        "\"adminAddress\""
      ]
    },
    "148": {
      "op": "global ZeroAddress",
      "defined_out": [
        "\"adminAddress\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "\"adminAddress\"",
        "new_state_value%0#0"
      ]
    },
    "150": {
      "op": "app_global_put",
      "stack_out": []
    },
    "151": {
      "op": "bytec_2 // \"totalStaked\"",
      "defined_out": [
        "\"totalStaked\""
      ],
      "stack_out": [
        "\"totalStaked\""
      ]
    },
    "152": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"totalStaked\"",
        "0"
      ]
    },
    "153": {
      "op": "app_global_put",
      "stack_out": []
    },
    "154": {
      "op": "bytec 5 // \"aprBasisPoints\"",
      "defined_out": [
        "\"aprBasisPoints\""
      ],
      "stack_out": [
        "\"aprBasisPoints\""
      ]
    },
    "156": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"aprBasisPoints\"",
        "0"
      ]
    },
    "157": {
      "op": "app_global_put",
      "stack_out": []
    },
    "158": {
      "op": "bytec 8 // \"lastDistributionTime\"",
      "defined_out": [
        "\"lastDistributionTime\""
      ],
      "stack_out": [
        "\"lastDistributionTime\""
      ]
    },
    "160": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"lastDistributionTime\"",
        "0"
      ]
    },
    "161": {
      "op": "app_global_put",
      "stack_out": []
    },
    "162": {
      "op": "bytec 6 // \"distributionPeriodSeconds\"",
      "defined_out": [
        "\"distributionPeriodSeconds\""
      ],
      "stack_out": [
        "\"distributionPeriodSeconds\""
      ]
    },
    "164": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"distributionPeriodSeconds\"",
        "0"
      ]
    },
    "165": {
      "op": "app_global_put",
      "stack_out": []
    },
    "166": {
      "op": "bytec 7 // \"minimumStake\"",
      "defined_out": [
        "\"minimumStake\""
      ],
      "stack_out": [
        "\"minimumStake\""
      ]
    },
    "168": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"minimumStake\"",
        "0"
      ]
    },
    "169": {
      "op": "app_global_put",
      "stack_out": []
    },
    "170": {
      "op": "bytec_0 // \"rewardPool\"",
      "defined_out": [
        "\"rewardPool\""
      ],
      "stack_out": [
        "\"rewardPool\""
      ]
    },
    "171": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"rewardPool\"",
        "0"
      ]
    },
    "172": {
      "op": "app_global_put",
      "stack_out": []
    },
    "173": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "175": {
      "op": "bz main_bare_routing@24",
      "stack_out": []
    },
    "178": {
      "op": "pushbytess 0x36dd05b4 0xa01a5ddc 0x0e93fde6 0x667c5d30 0x9ffd3e53 0x0890bd58 0x21f1ddff 0xb3b70146 0x0bd8cf60 0x6904ac5a 0xa5ae6bd1 0x1e6612bd 0x82ab1ec4 0x15766b09 0xbfe31564 0xce963b1d 0xdc9a2a05 // method \"getUserStakeInfo(account)(uint64,uint64,uint64,uint64)\", method \"storeUserStakeInfo(account,(uint64,uint64,uint64,uint64))void\", method \"getCurrentPeriod()uint64\", method \"initialize(asset,account,uint64,uint64,uint64)void\", method \"optInToAsset()void\", method \"stake()void\", method \"withdraw(uint64)void\", method \"addRewards()void\", method \"calculateUserRewardsForPeriod(account)uint64\", method \"calculatePendingRewards(account)uint64\", method \"claimRewards()void\", method \"updateAPR(uint64)void\", method \"updateAdmin(account)void\", method \"getUserStats(account)uint64[]\", method \"getContractStats()uint64[]\", method \"emergencyWithdrawRewards(uint64)void\", method \"deleteUserBox(account)void\"",
      "defined_out": [
        "Method(addRewards()void)",
        "Method(calculatePendingRewards(account)uint64)",
        "Method(calculateUserRewardsForPeriod(account)uint64)",
        "Method(claimRewards()void)",
        "Method(deleteUserBox(account)void)",
        "Method(emergencyWithdrawRewards(uint64)void)",
        "Method(getContractStats()uint64[])",
        "Method(getCurrentPeriod()uint64)",
        "Method(getUserStakeInfo(account)(uint64,uint64,uint64,uint64))",
        "Method(getUserStats(account)uint64[])",
        "Method(initialize(asset,account,uint64,uint64,uint64)void)",
        "Method(optInToAsset()void)",
        "Method(stake()void)",
        "Method(storeUserStakeInfo(account,(uint64,uint64,uint64,uint64))void)",
        "Method(updateAPR(uint64)void)",
        "Method(updateAdmin(account)void)",
        "Method(withdraw(uint64)void)"
      ],
      "stack_out": [
        "Method(getUserStakeInfo(account)(uint64,uint64,uint64,uint64))",
        "Method(storeUserStakeInfo(account,(uint64,uint64,uint64,uint64))void)",
        "Method(getCurrentPeriod()uint64)",
        "Method(initialize(asset,account,uint64,uint64,uint64)void)",
        "Method(optInToAsset()void)",
        "Method(stake()void)",
        "Method(withdraw(uint64)void)",
        "Method(addRewards()void)",
        "Method(calculateUserRewardsForPeriod(account)uint64)",
        "Method(calculatePendingRewards(account)uint64)",
        "Method(claimRewards()void)",
        "Method(updateAPR(uint64)void)",
        "Method(updateAdmin(account)void)",
        "Method(getUserStats(account)uint64[])",
        "Method(getContractStats()uint64[])",
        "Method(emergencyWithdrawRewards(uint64)void)",
        "Method(deleteUserBox(account)void)"
      ]
    },
    "265": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(addRewards()void)",
        "Method(calculatePendingRewards(account)uint64)",
        "Method(calculateUserRewardsForPeriod(account)uint64)",
        "Method(claimRewards()void)",
        "Method(deleteUserBox(account)void)",
        "Method(emergencyWithdrawRewards(uint64)void)",
        "Method(getContractStats()uint64[])",
        "Method(getCurrentPeriod()uint64)",
        "Method(getUserStakeInfo(account)(uint64,uint64,uint64,uint64))",
        "Method(getUserStats(account)uint64[])",
        "Method(initialize(asset,account,uint64,uint64,uint64)void)",
        "Method(optInToAsset()void)",
        "Method(stake()void)",
        "Method(storeUserStakeInfo(account,(uint64,uint64,uint64,uint64))void)",
        "Method(updateAPR(uint64)void)",
        "Method(updateAdmin(account)void)",
        "Method(withdraw(uint64)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(getUserStakeInfo(account)(uint64,uint64,uint64,uint64))",
        "Method(storeUserStakeInfo(account,(uint64,uint64,uint64,uint64))void)",
        "Method(getCurrentPeriod()uint64)",
        "Method(initialize(asset,account,uint64,uint64,uint64)void)",
        "Method(optInToAsset()void)",
        "Method(stake()void)",
        "Method(withdraw(uint64)void)",
        "Method(addRewards()void)",
        "Method(calculateUserRewardsForPeriod(account)uint64)",
        "Method(calculatePendingRewards(account)uint64)",
        "Method(claimRewards()void)",
        "Method(updateAPR(uint64)void)",
        "Method(updateAdmin(account)void)",
        "Method(getUserStats(account)uint64[])",
        "Method(getContractStats()uint64[])",
        "Method(emergencyWithdrawRewards(uint64)void)",
        "Method(deleteUserBox(account)void)",
        "tmp%2#0"
      ]
    },
    "268": {
      "op": "match main_getUserStakeInfo_route@5 main_storeUserStakeInfo_route@6 main_getCurrentPeriod_route@7 main_initialize_route@8 main_optInToAsset_route@9 main_stake_route@10 main_withdraw_route@11 main_addRewards_route@12 main_calculateUserRewardsForPeriod_route@13 main_calculatePendingRewards_route@14 main_claimRewards_route@15 main_updateAPR_route@16 main_updateAdmin_route@17 main_getUserStats_route@18 main_getContractStats_route@19 main_emergencyWithdrawRewards_route@20 main_deleteUserBox_route@21",
      "stack_out": []
    },
    "304": {
      "block": "main_after_if_else@28",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "305": {
      "op": "return",
      "stack_out": []
    },
    "306": {
      "block": "main_deleteUserBox_route@21",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%98#0"
      ],
      "stack_out": [
        "tmp%98#0"
      ]
    },
    "308": {
      "op": "!",
      "defined_out": [
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%99#0"
      ]
    },
    "309": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "310": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%100#0"
      ],
      "stack_out": [
        "tmp%100#0"
      ]
    },
    "312": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "313": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%8#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%8#0"
      ]
    },
    "316": {
      "op": "btoi",
      "defined_out": [
        "tmp%102#0"
      ],
      "stack_out": [
        "tmp%102#0"
      ]
    },
    "317": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%103#0"
      ],
      "stack_out": [
        "tmp%103#0"
      ]
    },
    "319": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.deleteUserBox",
      "op": "callsub deleteUserBox",
      "stack_out": []
    },
    "322": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "323": {
      "op": "return",
      "stack_out": []
    },
    "324": {
      "block": "main_emergencyWithdrawRewards_route@20",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%93#0"
      ],
      "stack_out": [
        "tmp%93#0"
      ]
    },
    "326": {
      "op": "!",
      "defined_out": [
        "tmp%94#0"
      ],
      "stack_out": [
        "tmp%94#0"
      ]
    },
    "327": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "328": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%95#0"
      ],
      "stack_out": [
        "tmp%95#0"
      ]
    },
    "330": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "331": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%5#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%5#0"
      ]
    },
    "334": {
      "op": "btoi",
      "defined_out": [
        "tmp%97#0"
      ],
      "stack_out": [
        "tmp%97#0"
      ]
    },
    "335": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.emergencyWithdrawRewards",
      "op": "callsub emergencyWithdrawRewards",
      "stack_out": []
    },
    "338": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "339": {
      "op": "return",
      "stack_out": []
    },
    "340": {
      "block": "main_getContractStats_route@19",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%87#0"
      ]
    },
    "342": {
      "op": "!",
      "defined_out": [
        "tmp%88#0"
      ],
      "stack_out": [
        "tmp%88#0"
      ]
    },
    "343": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "344": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%89#0"
      ],
      "stack_out": [
        "tmp%89#0"
      ]
    },
    "346": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "347": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.getContractStats",
      "op": "callsub getContractStats",
      "defined_out": [
        "tmp%91#0"
      ],
      "stack_out": [
        "tmp%91#0"
      ]
    },
    "350": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%91#0"
      ],
      "stack_out": [
        "tmp%91#0",
        "0x151f7c75"
      ]
    },
    "352": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%91#0"
      ]
    },
    "353": {
      "op": "concat",
      "defined_out": [
        "tmp%92#0"
      ],
      "stack_out": [
        "tmp%92#0"
      ]
    },
    "354": {
      "op": "log",
      "stack_out": []
    },
    "355": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "356": {
      "op": "return",
      "stack_out": []
    },
    "357": {
      "block": "main_getUserStats_route@18",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%79#0"
      ],
      "stack_out": [
        "tmp%79#0"
      ]
    },
    "359": {
      "op": "!",
      "defined_out": [
        "tmp%80#0"
      ],
      "stack_out": [
        "tmp%80#0"
      ]
    },
    "360": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "361": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%81#0"
      ],
      "stack_out": [
        "tmp%81#0"
      ]
    },
    "363": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "364": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%7#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%7#0"
      ]
    },
    "367": {
      "op": "btoi",
      "defined_out": [
        "tmp%83#0"
      ],
      "stack_out": [
        "tmp%83#0"
      ]
    },
    "368": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%84#0"
      ],
      "stack_out": [
        "tmp%84#0"
      ]
    },
    "370": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.getUserStats",
      "op": "callsub getUserStats",
      "defined_out": [
        "tmp%85#0"
      ],
      "stack_out": [
        "tmp%85#0"
      ]
    },
    "373": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%85#0"
      ],
      "stack_out": [
        "tmp%85#0",
        "0x151f7c75"
      ]
    },
    "375": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%85#0"
      ]
    },
    "376": {
      "op": "concat",
      "defined_out": [
        "tmp%86#0"
      ],
      "stack_out": [
        "tmp%86#0"
      ]
    },
    "377": {
      "op": "log",
      "stack_out": []
    },
    "378": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "379": {
      "op": "return",
      "stack_out": []
    },
    "380": {
      "block": "main_updateAdmin_route@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%73#0"
      ]
    },
    "382": {
      "op": "!",
      "defined_out": [
        "tmp%74#0"
      ],
      "stack_out": [
        "tmp%74#0"
      ]
    },
    "383": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "384": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%75#0"
      ]
    },
    "386": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "387": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%6#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%6#0"
      ]
    },
    "390": {
      "op": "btoi",
      "defined_out": [
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%77#0"
      ]
    },
    "391": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%78#0"
      ],
      "stack_out": [
        "tmp%78#0"
      ]
    },
    "393": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.updateAdmin",
      "op": "callsub updateAdmin",
      "stack_out": []
    },
    "396": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "397": {
      "op": "return",
      "stack_out": []
    },
    "398": {
      "block": "main_updateAPR_route@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0"
      ]
    },
    "400": {
      "op": "!",
      "defined_out": [
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%69#0"
      ]
    },
    "401": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "402": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0"
      ]
    },
    "404": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "405": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%4#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%4#0"
      ]
    },
    "408": {
      "op": "btoi",
      "defined_out": [
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0"
      ]
    },
    "409": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.updateAPR",
      "op": "callsub updateAPR",
      "stack_out": []
    },
    "412": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "413": {
      "op": "return",
      "stack_out": []
    },
    "414": {
      "block": "main_claimRewards_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0"
      ]
    },
    "416": {
      "op": "!",
      "defined_out": [
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%65#0"
      ]
    },
    "417": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "418": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0"
      ]
    },
    "420": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "421": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.claimRewards",
      "op": "callsub claimRewards"
    },
    "424": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "425": {
      "op": "return",
      "stack_out": []
    },
    "426": {
      "block": "main_calculatePendingRewards_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "428": {
      "op": "!",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "429": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "430": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0"
      ]
    },
    "432": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "433": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%5#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%5#0"
      ]
    },
    "436": {
      "op": "btoi",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "437": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "439": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.calculatePendingRewards",
      "op": "callsub calculatePendingRewards",
      "defined_out": [
        "to_encode%2#0"
      ],
      "stack_out": [
        "to_encode%2#0"
      ]
    },
    "442": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0"
      ]
    },
    "443": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "val_as_bytes%2#0",
        "0x151f7c75"
      ]
    },
    "445": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%2#0"
      ]
    },
    "446": {
      "op": "concat",
      "defined_out": [
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0"
      ]
    },
    "447": {
      "op": "log",
      "stack_out": []
    },
    "448": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "449": {
      "op": "return",
      "stack_out": []
    },
    "450": {
      "block": "main_calculateUserRewardsForPeriod_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "452": {
      "op": "!",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "453": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "454": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "456": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "457": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%4#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%4#0"
      ]
    },
    "460": {
      "op": "btoi",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "461": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "463": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.calculateUserRewardsForPeriod",
      "op": "callsub calculateUserRewardsForPeriod",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "466": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0"
      ]
    },
    "467": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "0x151f7c75"
      ]
    },
    "469": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ]
    },
    "470": {
      "op": "concat",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "471": {
      "op": "log",
      "stack_out": []
    },
    "472": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "473": {
      "op": "return",
      "stack_out": []
    },
    "474": {
      "block": "main_addRewards_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "476": {
      "op": "!",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "477": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "478": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "480": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "481": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.addRewards",
      "op": "callsub addRewards"
    },
    "484": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "485": {
      "op": "return",
      "stack_out": []
    },
    "486": {
      "block": "main_withdraw_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "488": {
      "op": "!",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "489": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "490": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "492": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "493": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "496": {
      "op": "btoi",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "497": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.withdraw",
      "op": "callsub withdraw",
      "stack_out": []
    },
    "500": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "501": {
      "op": "return",
      "stack_out": []
    },
    "502": {
      "block": "main_stake_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "504": {
      "op": "!",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "505": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "506": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%39#0"
      ],
      "stack_out": [
        "tmp%39#0"
      ]
    },
    "508": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "509": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.stake",
      "op": "callsub stake"
    },
    "512": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "513": {
      "op": "return",
      "stack_out": []
    },
    "514": {
      "block": "main_optInToAsset_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "516": {
      "op": "!",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "517": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "518": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%35#0"
      ]
    },
    "520": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "521": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.optInToAsset",
      "op": "callsub optInToAsset"
    },
    "524": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "525": {
      "op": "return",
      "stack_out": []
    },
    "526": {
      "block": "main_initialize_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "528": {
      "op": "!",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "529": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "530": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "532": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "533": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%2#0"
      ]
    },
    "536": {
      "op": "btoi",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "537": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "539": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%3#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "reinterpret_bytes[1]%3#0"
      ]
    },
    "542": {
      "op": "btoi",
      "defined_out": [
        "tmp%27#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%28#0"
      ]
    },
    "543": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%27#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%29#0"
      ]
    },
    "545": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%27#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%29#0",
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "548": {
      "op": "btoi",
      "defined_out": [
        "tmp%27#0",
        "tmp%29#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%29#0",
        "tmp%30#0"
      ]
    },
    "549": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[8]%1#0",
        "tmp%27#0",
        "tmp%29#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%29#0",
        "tmp%30#0",
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "552": {
      "op": "btoi",
      "defined_out": [
        "tmp%27#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0"
      ]
    },
    "553": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "reinterpret_bytes[8]%2#0",
        "tmp%27#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "556": {
      "op": "btoi",
      "defined_out": [
        "tmp%27#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%27#0",
        "tmp%29#0",
        "tmp%30#0",
        "tmp%31#0",
        "tmp%32#0"
      ]
    },
    "557": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.initialize",
      "op": "callsub initialize",
      "stack_out": []
    },
    "560": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "561": {
      "op": "return",
      "stack_out": []
    },
    "562": {
      "block": "main_getCurrentPeriod_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "564": {
      "op": "!",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "565": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "566": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "568": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "569": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.getCurrentPeriod",
      "op": "callsub getCurrentPeriod",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "572": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "573": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "575": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "576": {
      "op": "concat",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "577": {
      "op": "log",
      "stack_out": []
    },
    "578": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "579": {
      "op": "return",
      "stack_out": []
    },
    "580": {
      "block": "main_storeUserStakeInfo_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "582": {
      "op": "!",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "583": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "584": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "586": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "587": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%1#0"
      ]
    },
    "590": {
      "op": "btoi",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "591": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "593": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[32]%0#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "reinterpret_bytes[32]%0#0"
      ]
    },
    "596": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.storeUserStakeInfo",
      "op": "callsub storeUserStakeInfo",
      "defined_out": [
        "storeUserStakeInfo%0#0"
      ],
      "stack_out": [
        "storeUserStakeInfo%0#0"
      ]
    },
    "599": {
      "op": "pop",
      "stack_out": []
    },
    "600": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "601": {
      "op": "return",
      "stack_out": []
    },
    "602": {
      "block": "main_getUserStakeInfo_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "604": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "605": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "606": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "608": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "609": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "612": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "613": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "615": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.getUserStakeInfo",
      "op": "callsub getUserStakeInfo",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "618": {
      "op": "bytec 4 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "0x151f7c75"
      ]
    },
    "620": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%9#0"
      ]
    },
    "621": {
      "op": "concat",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "622": {
      "op": "log",
      "stack_out": []
    },
    "623": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "624": {
      "op": "return",
      "stack_out": []
    },
    "625": {
      "block": "main_bare_routing@24",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%104#0"
      ],
      "stack_out": [
        "tmp%104#0"
      ]
    },
    "627": {
      "op": "bnz main_after_if_else@28",
      "stack_out": []
    },
    "630": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%105#0"
      ],
      "stack_out": [
        "tmp%105#0"
      ]
    },
    "632": {
      "op": "!",
      "defined_out": [
        "tmp%106#0"
      ],
      "stack_out": [
        "tmp%106#0"
      ]
    },
    "633": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "634": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "635": {
      "op": "return",
      "stack_out": []
    },
    "636": {
      "subroutine": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.getUserStakeInfo",
      "params": {
        "userAddress#0": "bytes"
      },
      "block": "getUserStakeInfo",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "639": {
      "op": "bytec 9 // \"stakers\"",
      "defined_out": [
        "\"stakers\""
      ],
      "stack_out": [
        "\"stakers\""
      ]
    },
    "641": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"stakers\"",
        "userAddress#0 (copy)"
      ],
      "stack_out": [
        "\"stakers\"",
        "userAddress#0 (copy)"
      ]
    },
    "643": {
      "op": "concat",
      "defined_out": [
        "userBox#0"
      ],
      "stack_out": [
        "userBox#0"
      ]
    },
    "644": {
      "op": "dup",
      "defined_out": [
        "userBox#0"
      ],
      "stack_out": [
        "userBox#0",
        "userBox#0"
      ]
    },
    "645": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "userBox#0"
      ],
      "stack_out": [
        "userBox#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "646": {
      "op": "bury 1",
      "stack_out": [
        "userBox#0",
        "maybe_exists%0#0"
      ]
    },
    "648": {
      "op": "bz getUserStakeInfo_else_body@2",
      "stack_out": [
        "userBox#0"
      ]
    },
    "651": {
      "op": "frame_dig 0",
      "stack_out": [
        "userBox#0",
        "userBox#0"
      ]
    },
    "653": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "userBox#0"
      ],
      "stack_out": [
        "userBox#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "654": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "userBox#0",
        "maybe_value%1#0"
      ]
    },
    "655": {
      "op": "swap"
    },
    "656": {
      "retsub": true,
      "op": "retsub"
    },
    "657": {
      "block": "getUserStakeInfo_else_body@2",
      "stack_in": [
        "userBox#0"
      ],
      "op": "pushbytes 0x0000000000000000000000000000000000000000000000000000000000000000",
      "defined_out": [
        "0x0000000000000000000000000000000000000000000000000000000000000000"
      ],
      "stack_out": [
        "userBox#0",
        "0x0000000000000000000000000000000000000000000000000000000000000000"
      ]
    },
    "691": {
      "op": "swap"
    },
    "692": {
      "retsub": true,
      "op": "retsub"
    },
    "693": {
      "subroutine": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.storeUserStakeInfo",
      "params": {
        "userAddress#0": "bytes",
        "stakeInfo#0": "bytes"
      },
      "block": "storeUserStakeInfo",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "696": {
      "op": "bytec 9 // \"stakers\"",
      "defined_out": [
        "\"stakers\""
      ],
      "stack_out": [
        "\"stakers\""
      ]
    },
    "698": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"stakers\"",
        "userAddress#0 (copy)"
      ],
      "stack_out": [
        "\"stakers\"",
        "userAddress#0 (copy)"
      ]
    },
    "700": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "701": {
      "op": "frame_dig -1",
      "defined_out": [
        "stakeInfo#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "stakeInfo#0 (copy)"
      ]
    },
    "703": {
      "op": "box_put",
      "stack_out": []
    },
    "704": {
      "op": "frame_dig -1",
      "stack_out": [
        "stakeInfo#0 (copy)"
      ]
    },
    "706": {
      "retsub": true,
      "op": "retsub"
    },
    "707": {
      "subroutine": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.getCurrentPeriod",
      "params": {},
      "block": "getCurrentPeriod",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "710": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "711": {
      "op": "bytec 6 // \"distributionPeriodSeconds\"",
      "defined_out": [
        "\"distributionPeriodSeconds\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"distributionPeriodSeconds\""
      ]
    },
    "713": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "periodSeconds#0"
      ],
      "stack_out": [
        "periodSeconds#0",
        "maybe_exists%0#0"
      ]
    },
    "714": {
      "op": "swap",
      "stack_out": [
        "maybe_exists%0#0",
        "periodSeconds#0"
      ]
    },
    "715": {
      "op": "dup",
      "stack_out": [
        "maybe_exists%0#0",
        "periodSeconds#0",
        "periodSeconds#0 (copy)"
      ]
    },
    "716": {
      "op": "uncover 2",
      "defined_out": [
        "maybe_exists%0#0",
        "periodSeconds#0"
      ],
      "stack_out": [
        "periodSeconds#0",
        "periodSeconds#0",
        "maybe_exists%0#0"
      ]
    },
    "718": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "periodSeconds#0",
        "periodSeconds#0"
      ]
    },
    "719": {
      "op": "bnz getCurrentPeriod_after_if_else@2",
      "stack_out": [
        "periodSeconds#0"
      ]
    },
    "722": {
      "op": "intc_0 // 0",
      "stack_out": [
        "periodSeconds#0",
        "0"
      ]
    },
    "723": {
      "op": "swap"
    },
    "724": {
      "retsub": true,
      "op": "retsub"
    },
    "725": {
      "block": "getCurrentPeriod_after_if_else@2",
      "stack_in": [
        "periodSeconds#0"
      ],
      "op": "global LatestTimestamp",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "periodSeconds#0",
        "tmp%1#0"
      ]
    },
    "727": {
      "op": "frame_dig 0",
      "defined_out": [
        "periodSeconds#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "periodSeconds#0",
        "tmp%1#0",
        "periodSeconds#0"
      ]
    },
    "729": {
      "op": "/",
      "defined_out": [
        "periodSeconds#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "periodSeconds#0",
        "tmp%2#0"
      ]
    },
    "730": {
      "op": "swap"
    },
    "731": {
      "retsub": true,
      "op": "retsub"
    },
    "732": {
      "subroutine": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.initialize",
      "params": {
        "asset#0": "uint64",
        "adminAddress#0": "bytes",
        "aprBasisPoints#0": "uint64",
        "distributionPeriodSeconds#0": "uint64",
        "minimumStake#0": "uint64"
      },
      "block": "initialize",
      "stack_in": [],
      "op": "proto 5 0"
    },
    "735": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "736": {
      "op": "bytec_1 // \"asset\"",
      "defined_out": [
        "\"asset\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"asset\""
      ]
    },
    "737": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "738": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "739": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "740": {
      "error": "Already initialized",
      "op": "assert // Already initialized",
      "stack_out": []
    },
    "741": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "743": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "745": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "746": {
      "error": "Only creator can initialize",
      "op": "assert // Only creator can initialize",
      "stack_out": []
    },
    "747": {
      "op": "bytec_1 // \"asset\"",
      "stack_out": [
        "\"asset\""
      ]
    },
    "748": {
      "op": "frame_dig -5",
      "defined_out": [
        "\"asset\"",
        "asset#0 (copy)"
      ],
      "stack_out": [
        "\"asset\"",
        "asset#0 (copy)"
      ]
    },
    "750": {
      "op": "app_global_put",
      "stack_out": []
    },
    "751": {
      "op": "bytec_3 // \"adminAddress\"",
      "defined_out": [
        "\"adminAddress\""
      ],
      "stack_out": [
        "\"adminAddress\""
      ]
    },
    "752": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"adminAddress\"",
        "adminAddress#0 (copy)"
      ],
      "stack_out": [
        "\"adminAddress\"",
        "adminAddress#0 (copy)"
      ]
    },
    "754": {
      "op": "app_global_put",
      "stack_out": []
    },
    "755": {
      "op": "bytec_2 // \"totalStaked\"",
      "defined_out": [
        "\"totalStaked\""
      ],
      "stack_out": [
        "\"totalStaked\""
      ]
    },
    "756": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"totalStaked\"",
        "0"
      ]
    },
    "757": {
      "op": "app_global_put",
      "stack_out": []
    },
    "758": {
      "op": "bytec 5 // \"aprBasisPoints\"",
      "defined_out": [
        "\"aprBasisPoints\""
      ],
      "stack_out": [
        "\"aprBasisPoints\""
      ]
    },
    "760": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"aprBasisPoints\"",
        "aprBasisPoints#0 (copy)"
      ],
      "stack_out": [
        "\"aprBasisPoints\"",
        "aprBasisPoints#0 (copy)"
      ]
    },
    "762": {
      "op": "app_global_put",
      "stack_out": []
    },
    "763": {
      "op": "bytec 8 // \"lastDistributionTime\"",
      "defined_out": [
        "\"lastDistributionTime\""
      ],
      "stack_out": [
        "\"lastDistributionTime\""
      ]
    },
    "765": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "\"lastDistributionTime\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "\"lastDistributionTime\"",
        "new_state_value%0#0"
      ]
    },
    "767": {
      "op": "app_global_put",
      "stack_out": []
    },
    "768": {
      "op": "bytec 6 // \"distributionPeriodSeconds\"",
      "defined_out": [
        "\"distributionPeriodSeconds\""
      ],
      "stack_out": [
        "\"distributionPeriodSeconds\""
      ]
    },
    "770": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"distributionPeriodSeconds\"",
        "distributionPeriodSeconds#0 (copy)"
      ],
      "stack_out": [
        "\"distributionPeriodSeconds\"",
        "distributionPeriodSeconds#0 (copy)"
      ]
    },
    "772": {
      "op": "app_global_put",
      "stack_out": []
    },
    "773": {
      "op": "bytec 7 // \"minimumStake\"",
      "defined_out": [
        "\"minimumStake\""
      ],
      "stack_out": [
        "\"minimumStake\""
      ]
    },
    "775": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"minimumStake\"",
        "minimumStake#0 (copy)"
      ],
      "stack_out": [
        "\"minimumStake\"",
        "minimumStake#0 (copy)"
      ]
    },
    "777": {
      "op": "app_global_put",
      "stack_out": []
    },
    "778": {
      "op": "bytec_0 // \"rewardPool\"",
      "defined_out": [
        "\"rewardPool\""
      ],
      "stack_out": [
        "\"rewardPool\""
      ]
    },
    "779": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"rewardPool\"",
        "0"
      ]
    },
    "780": {
      "op": "app_global_put",
      "stack_out": []
    },
    "781": {
      "retsub": true,
      "op": "retsub"
    },
    "782": {
      "subroutine": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.optInToAsset",
      "params": {},
      "block": "optInToAsset",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "785": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "786": {
      "op": "bytec_3 // \"adminAddress\"",
      "defined_out": [
        "\"adminAddress\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"adminAddress\""
      ]
    },
    "787": {
      "op": "app_global_get_ex",
      "defined_out": [
        "adminAddr#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "maybe_exists%0#0"
      ]
    },
    "788": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "adminAddr#0"
      ]
    },
    "789": {
      "op": "txn Sender",
      "defined_out": [
        "adminAddr#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "tmp%0#0"
      ]
    },
    "791": {
      "op": "global CreatorAddress",
      "defined_out": [
        "adminAddr#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "793": {
      "op": "==",
      "defined_out": [
        "adminAddr#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "tmp%2#0"
      ]
    },
    "794": {
      "op": "bnz optInToAsset_bool_true@2",
      "stack_out": [
        "adminAddr#0"
      ]
    },
    "797": {
      "op": "txn Sender",
      "defined_out": [
        "adminAddr#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "tmp%3#0"
      ]
    },
    "799": {
      "op": "frame_dig 0",
      "stack_out": [
        "adminAddr#0",
        "tmp%3#0",
        "adminAddr#0"
      ]
    },
    "801": {
      "op": "==",
      "defined_out": [
        "adminAddr#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "tmp%4#0"
      ]
    },
    "802": {
      "op": "bz optInToAsset_bool_false@3",
      "stack_out": [
        "adminAddr#0"
      ]
    },
    "805": {
      "block": "optInToAsset_bool_true@2",
      "stack_in": [
        "adminAddr#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "or_result%0#0"
      ]
    },
    "806": {
      "block": "optInToAsset_bool_merge@4",
      "stack_in": [
        "adminAddr#0",
        "or_result%0#0"
      ],
      "error": "Only creator or admin can opt in",
      "op": "assert // Only creator or admin can opt in",
      "defined_out": [],
      "stack_out": [
        "adminAddr#0"
      ]
    },
    "807": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "adminAddr#0",
        "0"
      ]
    },
    "808": {
      "op": "bytec_1 // \"asset\"",
      "defined_out": [
        "\"asset\"",
        "0"
      ],
      "stack_out": [
        "adminAddr#0",
        "0",
        "\"asset\""
      ]
    },
    "809": {
      "op": "app_global_get_ex",
      "defined_out": [
        "asset#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "asset#0",
        "maybe_exists%1#0"
      ]
    },
    "810": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "adminAddr#0",
        "asset#0"
      ]
    },
    "811": {
      "op": "itxn_begin"
    },
    "812": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "asset#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "asset#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "814": {
      "op": "swap",
      "stack_out": [
        "adminAddr#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "asset#0"
      ]
    },
    "815": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "adminAddr#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "817": {
      "op": "intc_0 // 0",
      "stack_out": [
        "adminAddr#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "818": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "adminAddr#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "820": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "adminAddr#0"
      ]
    },
    "822": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "adminAddr#0",
        "4"
      ]
    },
    "823": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "adminAddr#0"
      ]
    },
    "825": {
      "op": "intc_0 // 0",
      "stack_out": [
        "adminAddr#0",
        "0"
      ]
    },
    "826": {
      "op": "itxn_field Fee",
      "stack_out": [
        "adminAddr#0"
      ]
    },
    "828": {
      "op": "itxn_submit"
    },
    "829": {
      "retsub": true,
      "op": "retsub"
    },
    "830": {
      "block": "optInToAsset_bool_false@3",
      "stack_in": [
        "adminAddr#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "or_result%0#0"
      ]
    },
    "831": {
      "op": "b optInToAsset_bool_merge@4"
    },
    "834": {
      "subroutine": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.stake",
      "params": {},
      "block": "stake",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "837": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "838": {
      "op": "bytec_1 // \"asset\"",
      "defined_out": [
        "\"asset\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"asset\""
      ]
    },
    "839": {
      "op": "app_global_get_ex",
      "defined_out": [
        "asset#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "asset#0",
        "maybe_exists%0#0"
      ]
    },
    "840": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "asset#0"
      ]
    },
    "841": {
      "op": "intc_0 // 0",
      "stack_out": [
        "asset#0",
        "0"
      ]
    },
    "842": {
      "op": "bytec_1 // \"asset\"",
      "stack_out": [
        "asset#0",
        "0",
        "\"asset\""
      ]
    },
    "843": {
      "op": "app_global_get_ex",
      "defined_out": [
        "asset#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "asset#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "844": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "asset#0",
        "maybe_value%1#0"
      ]
    },
    "845": {
      "error": "Contract not initialized",
      "op": "assert // Contract not initialized",
      "stack_out": [
        "asset#0"
      ]
    },
    "846": {
      "op": "global GroupSize",
      "defined_out": [
        "asset#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "asset#0",
        "tmp%1#0"
      ]
    },
    "848": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "asset#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "asset#0",
        "tmp%1#0",
        "2"
      ]
    },
    "850": {
      "op": "==",
      "defined_out": [
        "asset#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "asset#0",
        "tmp%2#0"
      ]
    },
    "851": {
      "error": "Expected 2 txns in group",
      "op": "assert // Expected 2 txns in group",
      "stack_out": [
        "asset#0"
      ]
    },
    "852": {
      "op": "intc_0 // 0",
      "stack_out": [
        "asset#0",
        "0"
      ]
    },
    "853": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "asset#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "asset#0",
        "gtxn_type%0#0"
      ]
    },
    "855": {
      "op": "dup",
      "defined_out": [
        "asset#0",
        "gtxn_type%0#0",
        "gtxn_type%0#0 (copy)"
      ],
      "stack_out": [
        "asset#0",
        "gtxn_type%0#0",
        "gtxn_type%0#0 (copy)"
      ]
    },
    "856": {
      "op": "intc_2 // axfer",
      "defined_out": [
        "asset#0",
        "axfer",
        "gtxn_type%0#0",
        "gtxn_type%0#0 (copy)"
      ],
      "stack_out": [
        "asset#0",
        "gtxn_type%0#0",
        "gtxn_type%0#0 (copy)",
        "axfer"
      ]
    },
    "857": {
      "op": "==",
      "defined_out": [
        "asset#0",
        "gtxn_type%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "asset#0",
        "gtxn_type%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "858": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "asset#0",
        "gtxn_type%0#0"
      ]
    },
    "859": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4",
        "asset#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "asset#0",
        "gtxn_type%0#0",
        "4"
      ]
    },
    "860": {
      "op": "==",
      "defined_out": [
        "asset#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "asset#0",
        "tmp%4#0"
      ]
    },
    "861": {
      "error": "Transaction 0 must be asset transfer",
      "op": "assert // Transaction 0 must be asset transfer",
      "stack_out": [
        "asset#0"
      ]
    },
    "862": {
      "op": "intc_0 // 0",
      "stack_out": [
        "asset#0",
        "0"
      ]
    },
    "863": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "asset#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "asset#0",
        "tmp%5#0"
      ]
    },
    "865": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "asset#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "asset#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "867": {
      "op": "==",
      "defined_out": [
        "asset#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "asset#0",
        "tmp%7#0"
      ]
    },
    "868": {
      "error": "Asset transfer must be to contract",
      "op": "assert // Asset transfer must be to contract",
      "stack_out": [
        "asset#0"
      ]
    },
    "869": {
      "op": "intc_0 // 0",
      "stack_out": [
        "asset#0",
        "0"
      ]
    },
    "870": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "asset#0",
        "stakeAmount#0"
      ],
      "stack_out": [
        "asset#0",
        "stakeAmount#0"
      ]
    },
    "872": {
      "op": "dup",
      "stack_out": [
        "asset#0",
        "stakeAmount#0",
        "stakeAmount#0"
      ]
    },
    "873": {
      "op": "cover 2",
      "defined_out": [
        "asset#0",
        "stakeAmount#0"
      ],
      "stack_out": [
        "stakeAmount#0",
        "asset#0",
        "stakeAmount#0"
      ]
    },
    "875": {
      "error": "Must stake non-zero amount",
      "op": "assert // Must stake non-zero amount",
      "stack_out": [
        "stakeAmount#0",
        "asset#0"
      ]
    },
    "876": {
      "op": "intc_0 // 0",
      "stack_out": [
        "stakeAmount#0",
        "asset#0",
        "0"
      ]
    },
    "877": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "asset#0",
        "stakeAmount#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "stakeAmount#0",
        "asset#0",
        "tmp%10#0"
      ]
    },
    "879": {
      "op": "==",
      "defined_out": [
        "stakeAmount#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "stakeAmount#0",
        "tmp%11#0"
      ]
    },
    "880": {
      "error": "Incorrect asset ID",
      "op": "assert // Incorrect asset ID",
      "stack_out": [
        "stakeAmount#0"
      ]
    },
    "881": {
      "op": "intc_0 // 0",
      "stack_out": [
        "stakeAmount#0",
        "0"
      ]
    },
    "882": {
      "op": "bytec 7 // \"minimumStake\"",
      "defined_out": [
        "\"minimumStake\"",
        "0",
        "stakeAmount#0"
      ],
      "stack_out": [
        "stakeAmount#0",
        "0",
        "\"minimumStake\""
      ]
    },
    "884": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "minimumStake#0",
        "stakeAmount#0"
      ],
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "maybe_exists%2#0"
      ]
    },
    "885": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0"
      ]
    },
    "886": {
      "op": "txn Sender"
    },
    "888": {
      "op": "dup",
      "defined_out": [
        "minimumStake#0",
        "senderAddress#0",
        "stakeAmount#0"
      ],
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "senderAddress#0"
      ]
    },
    "889": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.getUserStakeInfo",
      "op": "callsub getUserStakeInfo",
      "defined_out": [
        "minimumStake#0",
        "senderAddress#0",
        "stakeAmount#0",
        "stakeInfo#0"
      ],
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0"
      ]
    },
    "892": {
      "op": "dupn 2",
      "defined_out": [
        "minimumStake#0",
        "senderAddress#0",
        "stakeAmount#0",
        "stakeInfo#0",
        "stakeInfo#0 (copy)"
      ],
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#0",
        "stakeInfo#0 (copy)"
      ]
    },
    "894": {
      "op": "intc_0 // 0",
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#0",
        "stakeInfo#0 (copy)",
        "0"
      ]
    },
    "895": {
      "op": "extract_uint64",
      "defined_out": [
        "minimumStake#0",
        "senderAddress#0",
        "stakeAmount#0",
        "stakeInfo#0",
        "stakeInfo#8",
        "tmp%13#0"
      ],
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#8",
        "tmp%13#0"
      ]
    },
    "896": {
      "op": "bnz stake_after_if_else@2",
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#8"
      ]
    },
    "899": {
      "op": "frame_dig 0",
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#8",
        "stakeAmount#0"
      ]
    },
    "901": {
      "op": "frame_dig 1",
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#8",
        "stakeAmount#0",
        "minimumStake#0"
      ]
    },
    "903": {
      "op": ">=",
      "defined_out": [
        "minimumStake#0",
        "senderAddress#0",
        "stakeAmount#0",
        "stakeInfo#0",
        "stakeInfo#8",
        "tmp%15#0"
      ],
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#8",
        "tmp%15#0"
      ]
    },
    "904": {
      "error": "Initial stake below minimum",
      "op": "assert // Initial stake below minimum",
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#8"
      ]
    },
    "905": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.getCurrentPeriod",
      "op": "callsub getCurrentPeriod",
      "defined_out": [
        "minimumStake#0",
        "senderAddress#0",
        "stakeAmount#0",
        "stakeInfo#0",
        "stakeInfo#8",
        "to_encode%0#0"
      ],
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#8",
        "to_encode%0#0"
      ]
    },
    "908": {
      "op": "itob",
      "defined_out": [
        "minimumStake#0",
        "senderAddress#0",
        "stakeAmount#0",
        "stakeInfo#0",
        "stakeInfo#8",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#8",
        "val_as_bytes%0#0"
      ]
    },
    "909": {
      "op": "frame_dig 3",
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#8",
        "val_as_bytes%0#0",
        "stakeInfo#0"
      ]
    },
    "911": {
      "op": "swap",
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#8",
        "stakeInfo#0",
        "val_as_bytes%0#0"
      ]
    },
    "912": {
      "op": "replace2 24",
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#8",
        "stakeInfo#8"
      ]
    },
    "914": {
      "op": "frame_bury 4",
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#8"
      ]
    },
    "916": {
      "block": "stake_after_if_else@2",
      "stack_in": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#8"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "stakeInfo#0"
      ],
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#8",
        "stakeInfo#0"
      ]
    },
    "918": {
      "op": "dup",
      "defined_out": [
        "stakeInfo#0",
        "stakeInfo#0 (copy)"
      ],
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#8",
        "stakeInfo#0",
        "stakeInfo#0 (copy)"
      ]
    },
    "919": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "stakeInfo#0",
        "stakeInfo#0 (copy)"
      ],
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#8",
        "stakeInfo#0",
        "stakeInfo#0 (copy)",
        "0"
      ]
    },
    "920": {
      "op": "extract_uint64",
      "defined_out": [
        "stakeInfo#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#8",
        "stakeInfo#0",
        "tmp%17#0"
      ]
    },
    "921": {
      "op": "frame_dig 0",
      "defined_out": [
        "stakeAmount#0",
        "stakeInfo#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#8",
        "stakeInfo#0",
        "tmp%17#0",
        "stakeAmount#0"
      ]
    },
    "923": {
      "op": "dup",
      "defined_out": [
        "stakeAmount#0",
        "stakeAmount#0 (copy)",
        "stakeInfo#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#8",
        "stakeInfo#0",
        "tmp%17#0",
        "stakeAmount#0 (copy)",
        "stakeAmount#0 (copy)"
      ]
    },
    "924": {
      "op": "cover 3",
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#8",
        "stakeAmount#0",
        "stakeInfo#0",
        "tmp%17#0",
        "stakeAmount#0 (copy)"
      ]
    },
    "926": {
      "op": "+",
      "defined_out": [
        "stakeAmount#0",
        "stakeInfo#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#8",
        "stakeAmount#0",
        "stakeInfo#0",
        "to_encode%1#0"
      ]
    },
    "927": {
      "op": "itob",
      "defined_out": [
        "stakeAmount#0",
        "stakeInfo#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#8",
        "stakeAmount#0",
        "stakeInfo#0",
        "val_as_bytes%1#0"
      ]
    },
    "928": {
      "op": "replace2 0",
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#8",
        "stakeAmount#0",
        "stakeInfo#0"
      ]
    },
    "930": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "stakeAmount#0",
        "stakeInfo#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#8",
        "stakeAmount#0",
        "stakeInfo#0",
        "to_encode%2#0"
      ]
    },
    "932": {
      "op": "itob",
      "defined_out": [
        "stakeAmount#0",
        "stakeInfo#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#8",
        "stakeAmount#0",
        "stakeInfo#0",
        "val_as_bytes%2#0"
      ]
    },
    "933": {
      "op": "replace2 8",
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#8",
        "stakeAmount#0",
        "stakeInfo#0"
      ]
    },
    "935": {
      "op": "frame_dig 2",
      "defined_out": [
        "senderAddress#0",
        "stakeAmount#0",
        "stakeInfo#0"
      ],
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#8",
        "stakeAmount#0",
        "stakeInfo#0",
        "senderAddress#0"
      ]
    },
    "937": {
      "op": "swap",
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#8",
        "stakeAmount#0",
        "senderAddress#0",
        "stakeInfo#0"
      ]
    },
    "938": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.storeUserStakeInfo",
      "op": "callsub storeUserStakeInfo",
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#8",
        "stakeAmount#0",
        "stakeInfo#0"
      ]
    },
    "941": {
      "op": "pop",
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#8",
        "stakeAmount#0"
      ]
    },
    "942": {
      "op": "intc_0 // 0",
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#8",
        "stakeAmount#0",
        "0"
      ]
    },
    "943": {
      "op": "bytec_2 // \"totalStaked\"",
      "defined_out": [
        "\"totalStaked\"",
        "0",
        "senderAddress#0",
        "stakeAmount#0",
        "stakeInfo#0"
      ],
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#8",
        "stakeAmount#0",
        "0",
        "\"totalStaked\""
      ]
    },
    "944": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "senderAddress#0",
        "stakeAmount#0",
        "stakeInfo#0"
      ],
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#8",
        "stakeAmount#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "945": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#8",
        "stakeAmount#0",
        "maybe_value%3#0"
      ]
    },
    "946": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0",
        "senderAddress#0",
        "stakeAmount#0",
        "stakeInfo#0"
      ],
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#8",
        "new_state_value%0#0"
      ]
    },
    "947": {
      "op": "bytec_2 // \"totalStaked\"",
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#8",
        "new_state_value%0#0",
        "\"totalStaked\""
      ]
    },
    "948": {
      "op": "swap",
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#8",
        "\"totalStaked\"",
        "new_state_value%0#0"
      ]
    },
    "949": {
      "op": "app_global_put",
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#8"
      ]
    },
    "950": {
      "retsub": true,
      "op": "retsub"
    },
    "951": {
      "subroutine": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.withdraw",
      "params": {
        "amount#0": "uint64"
      },
      "block": "withdraw",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "954": {
      "op": "txn Sender"
    },
    "956": {
      "op": "dup",
      "defined_out": [
        "senderAddress#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "senderAddress#0"
      ]
    },
    "957": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.getUserStakeInfo",
      "op": "callsub getUserStakeInfo",
      "defined_out": [
        "senderAddress#0",
        "stakeInfo#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0"
      ]
    },
    "960": {
      "op": "dup",
      "defined_out": [
        "senderAddress#0",
        "stakeInfo#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#0"
      ]
    },
    "961": {
      "op": "intc_0 // 0",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#0",
        "0"
      ]
    },
    "962": {
      "op": "extract_uint64",
      "defined_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ]
    },
    "963": {
      "op": "dupn 2",
      "defined_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "965": {
      "error": "No stake found",
      "op": "assert // No stake found",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "966": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "tmp%1#0",
        "amount#0 (copy)"
      ]
    },
    "968": {
      "op": "dig 1",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "tmp%1#0",
        "amount#0 (copy)",
        "tmp%1#0 (copy)"
      ]
    },
    "970": {
      "op": "<=",
      "defined_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "tmp%1#0",
        "tmp%5#0"
      ]
    },
    "971": {
      "error": "Withdrawal amount exceeds stake",
      "op": "assert // Withdrawal amount exceeds stake",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "972": {
      "op": "frame_dig -1",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "tmp%1#0",
        "amount#0 (copy)"
      ]
    },
    "974": {
      "error": "Withdrawal amount must be positive",
      "op": "assert // Withdrawal amount must be positive",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "975": {
      "op": "frame_dig -1",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "tmp%1#0",
        "amount#0 (copy)"
      ]
    },
    "977": {
      "op": ">",
      "defined_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "tmp%9#0"
      ]
    },
    "978": {
      "op": "bz withdraw_after_if_else@2",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ]
    },
    "981": {
      "op": "frame_dig 2",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "983": {
      "op": "frame_dig -1",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "tmp%1#0",
        "amount#0 (copy)"
      ]
    },
    "985": {
      "op": "-",
      "defined_out": [
        "remainingStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "remainingStake#0"
      ]
    },
    "986": {
      "op": "intc_0 // 0",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "remainingStake#0",
        "0"
      ]
    },
    "987": {
      "op": "bytec 7 // \"minimumStake\"",
      "defined_out": [
        "\"minimumStake\"",
        "0",
        "remainingStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "remainingStake#0",
        "0",
        "\"minimumStake\""
      ]
    },
    "989": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "minimumStake#0",
        "remainingStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "remainingStake#0",
        "minimumStake#0",
        "maybe_exists%0#0"
      ]
    },
    "990": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "remainingStake#0",
        "minimumStake#0"
      ]
    },
    "991": {
      "op": ">=",
      "defined_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "tmp%12#0"
      ]
    },
    "992": {
      "error": "Remaining stake would be below minimum",
      "op": "assert // Remaining stake would be below minimum",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ]
    },
    "993": {
      "block": "withdraw_after_if_else@2",
      "stack_in": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "995": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "tmp%1#0",
        "amount#0 (copy)"
      ]
    },
    "997": {
      "op": "-",
      "defined_out": [
        "tmp%1#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "to_encode%0#0"
      ]
    },
    "998": {
      "op": "itob",
      "defined_out": [
        "tmp%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "val_as_bytes%0#0"
      ]
    },
    "999": {
      "op": "frame_dig 1",
      "defined_out": [
        "stakeInfo#0",
        "tmp%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "val_as_bytes%0#0",
        "stakeInfo#0"
      ]
    },
    "1001": {
      "op": "swap",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "stakeInfo#0",
        "val_as_bytes%0#0"
      ]
    },
    "1002": {
      "op": "replace2 0",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "stakeInfo#0"
      ]
    },
    "1004": {
      "op": "frame_dig 0",
      "defined_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "stakeInfo#0",
        "senderAddress#0"
      ]
    },
    "1006": {
      "op": "swap",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "senderAddress#0",
        "stakeInfo#0"
      ]
    },
    "1007": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.storeUserStakeInfo",
      "op": "callsub storeUserStakeInfo",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "stakeInfo#0"
      ]
    },
    "1010": {
      "op": "pop",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ]
    },
    "1011": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "0"
      ]
    },
    "1012": {
      "op": "bytec_2 // \"totalStaked\"",
      "defined_out": [
        "\"totalStaked\"",
        "0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "0",
        "\"totalStaked\""
      ]
    },
    "1013": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1014": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "maybe_value%1#0"
      ]
    },
    "1015": {
      "op": "frame_dig -1",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "maybe_value%1#0",
        "amount#0 (copy)"
      ]
    },
    "1017": {
      "op": "-",
      "defined_out": [
        "new_state_value%0#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "new_state_value%0#0"
      ]
    },
    "1018": {
      "op": "bytec_2 // \"totalStaked\"",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "new_state_value%0#0",
        "\"totalStaked\""
      ]
    },
    "1019": {
      "op": "swap",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "\"totalStaked\"",
        "new_state_value%0#0"
      ]
    },
    "1020": {
      "op": "app_global_put",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ]
    },
    "1021": {
      "op": "intc_0 // 0",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "0"
      ]
    },
    "1022": {
      "op": "bytec_1 // \"asset\"",
      "defined_out": [
        "\"asset\"",
        "0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "0",
        "\"asset\""
      ]
    },
    "1023": {
      "op": "app_global_get_ex",
      "defined_out": [
        "asset#0",
        "maybe_exists%2#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "asset#0",
        "maybe_exists%2#0"
      ]
    },
    "1024": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "asset#0"
      ]
    },
    "1025": {
      "op": "itxn_begin"
    },
    "1026": {
      "op": "txn Sender",
      "defined_out": [
        "asset#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "asset#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "1028": {
      "op": "swap",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "asset#0"
      ]
    },
    "1029": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "1031": {
      "op": "frame_dig -1",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "amount#0 (copy)"
      ]
    },
    "1033": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "1035": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ]
    },
    "1037": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "4"
      ]
    },
    "1038": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ]
    },
    "1040": {
      "op": "pushint 1000 // 1000",
      "defined_out": [
        "1000",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "1000"
      ]
    },
    "1043": {
      "op": "itxn_field Fee",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ]
    },
    "1045": {
      "op": "itxn_submit"
    },
    "1046": {
      "retsub": true,
      "op": "retsub"
    },
    "1047": {
      "subroutine": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.addRewards",
      "params": {},
      "block": "addRewards",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1048": {
      "op": "bytec_3 // \"adminAddress\"",
      "defined_out": [
        "\"adminAddress\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"adminAddress\""
      ]
    },
    "1049": {
      "op": "app_global_get_ex",
      "defined_out": [
        "adminAddr#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "maybe_exists%0#0"
      ]
    },
    "1050": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "adminAddr#0"
      ]
    },
    "1051": {
      "op": "txn Sender",
      "defined_out": [
        "adminAddr#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "tmp%0#0"
      ]
    },
    "1053": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1054": {
      "error": "Only admin can add rewards",
      "op": "assert // Only admin can add rewards",
      "stack_out": []
    },
    "1055": {
      "op": "global GroupSize",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1057": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "2"
      ]
    },
    "1059": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1060": {
      "error": "Expected 2 txns in group",
      "op": "assert // Expected 2 txns in group",
      "stack_out": []
    },
    "1061": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1062": {
      "op": "bytec_1 // \"asset\"",
      "defined_out": [
        "\"asset\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"asset\""
      ]
    },
    "1063": {
      "op": "app_global_get_ex",
      "defined_out": [
        "asset#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "asset#0",
        "maybe_exists%1#0"
      ]
    },
    "1064": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "asset#0"
      ]
    },
    "1065": {
      "op": "intc_0 // 0",
      "stack_out": [
        "asset#0",
        "0"
      ]
    },
    "1066": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "asset#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "asset#0",
        "gtxn_type%0#0"
      ]
    },
    "1068": {
      "op": "dup",
      "defined_out": [
        "asset#0",
        "gtxn_type%0#0",
        "gtxn_type%0#0 (copy)"
      ],
      "stack_out": [
        "asset#0",
        "gtxn_type%0#0",
        "gtxn_type%0#0 (copy)"
      ]
    },
    "1069": {
      "op": "intc_2 // axfer",
      "defined_out": [
        "asset#0",
        "axfer",
        "gtxn_type%0#0",
        "gtxn_type%0#0 (copy)"
      ],
      "stack_out": [
        "asset#0",
        "gtxn_type%0#0",
        "gtxn_type%0#0 (copy)",
        "axfer"
      ]
    },
    "1070": {
      "op": "==",
      "defined_out": [
        "asset#0",
        "gtxn_type%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "asset#0",
        "gtxn_type%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "1071": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "asset#0",
        "gtxn_type%0#0"
      ]
    },
    "1072": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4",
        "asset#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "asset#0",
        "gtxn_type%0#0",
        "4"
      ]
    },
    "1073": {
      "op": "==",
      "defined_out": [
        "asset#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "asset#0",
        "tmp%5#0"
      ]
    },
    "1074": {
      "error": "Transaction 0 must be asset transfer",
      "op": "assert // Transaction 0 must be asset transfer",
      "stack_out": [
        "asset#0"
      ]
    },
    "1075": {
      "op": "intc_0 // 0",
      "stack_out": [
        "asset#0",
        "0"
      ]
    },
    "1076": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "asset#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "asset#0",
        "tmp%6#0"
      ]
    },
    "1078": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "asset#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "asset#0",
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "1080": {
      "op": "==",
      "defined_out": [
        "asset#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "asset#0",
        "tmp%8#0"
      ]
    },
    "1081": {
      "error": "Asset transfer must be to contract",
      "op": "assert // Asset transfer must be to contract",
      "stack_out": [
        "asset#0"
      ]
    },
    "1082": {
      "op": "intc_0 // 0",
      "stack_out": [
        "asset#0",
        "0"
      ]
    },
    "1083": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "asset#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "asset#0",
        "tmp%9#0"
      ]
    },
    "1085": {
      "op": "dup",
      "defined_out": [
        "asset#0",
        "tmp%9#0",
        "tmp%9#0 (copy)"
      ],
      "stack_out": [
        "asset#0",
        "tmp%9#0",
        "tmp%9#0 (copy)"
      ]
    },
    "1086": {
      "error": "Must provide non-zero rewards",
      "op": "assert // Must provide non-zero rewards",
      "stack_out": [
        "asset#0",
        "tmp%9#0"
      ]
    },
    "1087": {
      "op": "intc_0 // 0",
      "stack_out": [
        "asset#0",
        "tmp%9#0",
        "0"
      ]
    },
    "1088": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "asset#0",
        "tmp%11#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "asset#0",
        "tmp%9#0",
        "tmp%11#0"
      ]
    },
    "1090": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%9#0",
        "tmp%11#0",
        "asset#0"
      ]
    },
    "1092": {
      "op": "==",
      "defined_out": [
        "tmp%12#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%12#0"
      ]
    },
    "1093": {
      "error": "Incorrect asset ID",
      "op": "assert // Incorrect asset ID",
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "1094": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%9#0",
        "0"
      ]
    },
    "1095": {
      "op": "bytec_0 // \"rewardPool\"",
      "defined_out": [
        "\"rewardPool\"",
        "0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "0",
        "\"rewardPool\""
      ]
    },
    "1096": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1097": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%9#0",
        "maybe_value%2#0"
      ]
    },
    "1098": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "1099": {
      "op": "bytec_0 // \"rewardPool\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"rewardPool\""
      ]
    },
    "1100": {
      "op": "swap",
      "stack_out": [
        "\"rewardPool\"",
        "new_state_value%0#0"
      ]
    },
    "1101": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1102": {
      "op": "bytec 8 // \"lastDistributionTime\"",
      "defined_out": [
        "\"lastDistributionTime\""
      ],
      "stack_out": [
        "\"lastDistributionTime\""
      ]
    },
    "1104": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "\"lastDistributionTime\"",
        "new_state_value%1#0"
      ],
      "stack_out": [
        "\"lastDistributionTime\"",
        "new_state_value%1#0"
      ]
    },
    "1106": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1107": {
      "retsub": true,
      "op": "retsub"
    },
    "1108": {
      "subroutine": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.calculateUserRewardsForPeriod",
      "params": {
        "userAddress#0": "bytes"
      },
      "block": "calculateUserRewardsForPeriod",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1111": {
      "op": "intc_0 // 0",
      "stack_out": [
        "stakeInfo#0"
      ]
    },
    "1112": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "stakeInfo#0",
        "userStake#0"
      ]
    },
    "1114": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "stakeInfo#0",
        "userStake#0",
        "0"
      ]
    },
    "1115": {
      "op": "bytec 5 // \"aprBasisPoints\"",
      "defined_out": [
        "\"aprBasisPoints\"",
        "0"
      ],
      "stack_out": [
        "stakeInfo#0",
        "userStake#0",
        "0",
        "\"aprBasisPoints\""
      ]
    },
    "1117": {
      "op": "app_global_get_ex",
      "defined_out": [
        "apr#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "stakeInfo#0",
        "userStake#0",
        "apr#0",
        "maybe_exists%0#0"
      ]
    },
    "1118": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "stakeInfo#0",
        "userStake#0",
        "apr#0"
      ]
    },
    "1119": {
      "op": "intc_0 // 0",
      "stack_out": [
        "stakeInfo#0",
        "userStake#0",
        "apr#0",
        "0"
      ]
    },
    "1120": {
      "op": "bytec_2 // \"totalStaked\"",
      "defined_out": [
        "\"totalStaked\"",
        "0",
        "apr#0"
      ],
      "stack_out": [
        "stakeInfo#0",
        "userStake#0",
        "apr#0",
        "0",
        "\"totalStaked\""
      ]
    },
    "1121": {
      "op": "app_global_get_ex",
      "defined_out": [
        "apr#0",
        "maybe_exists%1#0",
        "totalStaked#0"
      ],
      "stack_out": [
        "stakeInfo#0",
        "userStake#0",
        "apr#0",
        "totalStaked#0",
        "maybe_exists%1#0"
      ]
    },
    "1122": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "stakeInfo#0",
        "userStake#0",
        "apr#0",
        "totalStaked#0"
      ]
    },
    "1123": {
      "op": "intc_0 // 0",
      "stack_out": [
        "stakeInfo#0",
        "userStake#0",
        "apr#0",
        "totalStaked#0",
        "0"
      ]
    },
    "1124": {
      "op": "bytec 6 // \"distributionPeriodSeconds\"",
      "defined_out": [
        "\"distributionPeriodSeconds\"",
        "0",
        "apr#0",
        "totalStaked#0"
      ],
      "stack_out": [
        "stakeInfo#0",
        "userStake#0",
        "apr#0",
        "totalStaked#0",
        "0",
        "\"distributionPeriodSeconds\""
      ]
    },
    "1126": {
      "op": "app_global_get_ex",
      "defined_out": [
        "apr#0",
        "maybe_exists%2#0",
        "periodSeconds#0",
        "totalStaked#0"
      ],
      "stack_out": [
        "stakeInfo#0",
        "userStake#0",
        "apr#0",
        "totalStaked#0",
        "periodSeconds#0",
        "maybe_exists%2#0"
      ]
    },
    "1127": {
      "op": "swap",
      "stack_out": [
        "stakeInfo#0",
        "userStake#0",
        "apr#0",
        "totalStaked#0",
        "maybe_exists%2#0",
        "periodSeconds#0"
      ]
    },
    "1128": {
      "op": "cover 2",
      "defined_out": [
        "apr#0",
        "maybe_exists%2#0",
        "periodSeconds#0",
        "totalStaked#0"
      ],
      "stack_out": [
        "stakeInfo#0",
        "userStake#0",
        "apr#0",
        "periodSeconds#0",
        "totalStaked#0",
        "maybe_exists%2#0"
      ]
    },
    "1130": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "stakeInfo#0",
        "userStake#0",
        "apr#0",
        "periodSeconds#0",
        "totalStaked#0"
      ]
    },
    "1131": {
      "op": "bz calculateUserRewardsForPeriod_if_body@2",
      "stack_out": [
        "stakeInfo#0",
        "userStake#0",
        "apr#0",
        "periodSeconds#0"
      ]
    },
    "1134": {
      "op": "frame_dig 3",
      "stack_out": [
        "stakeInfo#0",
        "userStake#0",
        "apr#0",
        "periodSeconds#0",
        "periodSeconds#0"
      ]
    },
    "1136": {
      "op": "bnz calculateUserRewardsForPeriod_after_if_else@3",
      "stack_out": [
        "stakeInfo#0",
        "userStake#0",
        "apr#0",
        "periodSeconds#0"
      ]
    },
    "1139": {
      "block": "calculateUserRewardsForPeriod_if_body@2",
      "stack_in": [
        "stakeInfo#0",
        "userStake#0",
        "apr#0",
        "periodSeconds#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "stakeInfo#0",
        "userStake#0",
        "apr#0",
        "periodSeconds#0",
        "0"
      ]
    },
    "1140": {
      "op": "frame_bury 0"
    },
    "1142": {
      "retsub": true,
      "op": "retsub"
    },
    "1143": {
      "block": "calculateUserRewardsForPeriod_after_if_else@3",
      "stack_in": [
        "stakeInfo#0",
        "userStake#0",
        "apr#0",
        "periodSeconds#0"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "userAddress#0 (copy)"
      ],
      "stack_out": [
        "stakeInfo#0",
        "userStake#0",
        "apr#0",
        "periodSeconds#0",
        "userAddress#0 (copy)"
      ]
    },
    "1145": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.getUserStakeInfo",
      "op": "callsub getUserStakeInfo",
      "defined_out": [
        "stakeInfo#0"
      ],
      "stack_out": [
        "stakeInfo#0",
        "userStake#0",
        "apr#0",
        "periodSeconds#0",
        "stakeInfo#0"
      ]
    },
    "1148": {
      "op": "dup",
      "stack_out": [
        "stakeInfo#0",
        "userStake#0",
        "apr#0",
        "periodSeconds#0",
        "stakeInfo#0",
        "stakeInfo#0"
      ]
    },
    "1149": {
      "op": "frame_bury 0",
      "defined_out": [
        "stakeInfo#0"
      ],
      "stack_out": [
        "stakeInfo#0",
        "userStake#0",
        "apr#0",
        "periodSeconds#0",
        "stakeInfo#0"
      ]
    },
    "1151": {
      "op": "intc_0 // 0",
      "stack_out": [
        "stakeInfo#0",
        "userStake#0",
        "apr#0",
        "periodSeconds#0",
        "stakeInfo#0",
        "0"
      ]
    },
    "1152": {
      "op": "extract_uint64",
      "defined_out": [
        "stakeInfo#0",
        "userStake#0"
      ],
      "stack_out": [
        "stakeInfo#0",
        "userStake#0",
        "apr#0",
        "periodSeconds#0",
        "userStake#0"
      ]
    },
    "1153": {
      "op": "dup",
      "stack_out": [
        "stakeInfo#0",
        "userStake#0",
        "apr#0",
        "periodSeconds#0",
        "userStake#0",
        "userStake#0"
      ]
    },
    "1154": {
      "op": "frame_bury 1",
      "defined_out": [
        "stakeInfo#0",
        "userStake#0"
      ],
      "stack_out": [
        "stakeInfo#0",
        "userStake#0",
        "apr#0",
        "periodSeconds#0",
        "userStake#0"
      ]
    },
    "1156": {
      "op": "bnz calculateUserRewardsForPeriod_after_if_else@5",
      "stack_out": [
        "stakeInfo#0",
        "userStake#0",
        "apr#0",
        "periodSeconds#0"
      ]
    },
    "1159": {
      "op": "intc_0 // 0",
      "stack_out": [
        "stakeInfo#0",
        "userStake#0",
        "apr#0",
        "periodSeconds#0",
        "0"
      ]
    },
    "1160": {
      "op": "frame_bury 0"
    },
    "1162": {
      "retsub": true,
      "op": "retsub"
    },
    "1163": {
      "block": "calculateUserRewardsForPeriod_after_if_else@5",
      "stack_in": [
        "stakeInfo#0",
        "userStake#0",
        "apr#0",
        "periodSeconds#0"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "stakeInfo#0"
      ],
      "stack_out": [
        "stakeInfo#0",
        "userStake#0",
        "apr#0",
        "periodSeconds#0",
        "stakeInfo#0"
      ]
    },
    "1165": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "stakeInfo#0"
      ],
      "stack_out": [
        "stakeInfo#0",
        "userStake#0",
        "apr#0",
        "periodSeconds#0",
        "stakeInfo#0",
        "8"
      ]
    },
    "1166": {
      "op": "extract_uint64",
      "defined_out": [
        "lastStakeTime#0",
        "stakeInfo#0"
      ],
      "stack_out": [
        "stakeInfo#0",
        "userStake#0",
        "apr#0",
        "periodSeconds#0",
        "lastStakeTime#0"
      ]
    },
    "1167": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "lastStakeTime#0",
        "stakeInfo#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "stakeInfo#0",
        "userStake#0",
        "apr#0",
        "periodSeconds#0",
        "lastStakeTime#0",
        "tmp%7#0"
      ]
    },
    "1169": {
      "op": "swap",
      "stack_out": [
        "stakeInfo#0",
        "userStake#0",
        "apr#0",
        "periodSeconds#0",
        "tmp%7#0",
        "lastStakeTime#0"
      ]
    },
    "1170": {
      "op": "pushint 86400 // 86400",
      "defined_out": [
        "86400",
        "lastStakeTime#0",
        "stakeInfo#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "stakeInfo#0",
        "userStake#0",
        "apr#0",
        "periodSeconds#0",
        "tmp%7#0",
        "lastStakeTime#0",
        "86400"
      ]
    },
    "1174": {
      "op": "+",
      "defined_out": [
        "stakeInfo#0",
        "tmp%7#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "stakeInfo#0",
        "userStake#0",
        "apr#0",
        "periodSeconds#0",
        "tmp%7#0",
        "tmp%8#0"
      ]
    },
    "1175": {
      "op": "<",
      "defined_out": [
        "stakeInfo#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "stakeInfo#0",
        "userStake#0",
        "apr#0",
        "periodSeconds#0",
        "tmp%9#0"
      ]
    },
    "1176": {
      "op": "bz calculateUserRewardsForPeriod_after_if_else@7",
      "stack_out": [
        "stakeInfo#0",
        "userStake#0",
        "apr#0",
        "periodSeconds#0"
      ]
    },
    "1179": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "stakeInfo#0"
      ],
      "stack_out": [
        "stakeInfo#0",
        "userStake#0",
        "apr#0",
        "periodSeconds#0",
        "0"
      ]
    },
    "1180": {
      "op": "frame_bury 0"
    },
    "1182": {
      "retsub": true,
      "op": "retsub"
    },
    "1183": {
      "block": "calculateUserRewardsForPeriod_after_if_else@7",
      "stack_in": [
        "stakeInfo#0",
        "userStake#0",
        "apr#0",
        "periodSeconds#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "apr#0"
      ],
      "stack_out": [
        "stakeInfo#0",
        "userStake#0",
        "apr#0",
        "periodSeconds#0",
        "apr#0"
      ]
    },
    "1185": {
      "op": "frame_dig 3",
      "defined_out": [
        "apr#0",
        "periodSeconds#0"
      ],
      "stack_out": [
        "stakeInfo#0",
        "userStake#0",
        "apr#0",
        "periodSeconds#0",
        "apr#0",
        "periodSeconds#0"
      ]
    },
    "1187": {
      "op": "*",
      "defined_out": [
        "apr#0",
        "periodRateNumerator#0",
        "periodSeconds#0"
      ],
      "stack_out": [
        "stakeInfo#0",
        "userStake#0",
        "apr#0",
        "periodSeconds#0",
        "periodRateNumerator#0"
      ]
    },
    "1188": {
      "op": "frame_dig 1",
      "defined_out": [
        "apr#0",
        "periodRateNumerator#0",
        "periodSeconds#0",
        "userStake#0"
      ],
      "stack_out": [
        "stakeInfo#0",
        "userStake#0",
        "apr#0",
        "periodSeconds#0",
        "periodRateNumerator#0",
        "userStake#0"
      ]
    },
    "1190": {
      "op": "*",
      "defined_out": [
        "apr#0",
        "periodSeconds#0",
        "tmp%10#0",
        "userStake#0"
      ],
      "stack_out": [
        "stakeInfo#0",
        "userStake#0",
        "apr#0",
        "periodSeconds#0",
        "tmp%10#0"
      ]
    },
    "1191": {
      "op": "pushint 315360000000 // 315360000000",
      "defined_out": [
        "315360000000",
        "apr#0",
        "periodSeconds#0",
        "tmp%10#0",
        "userStake#0"
      ],
      "stack_out": [
        "stakeInfo#0",
        "userStake#0",
        "apr#0",
        "periodSeconds#0",
        "tmp%10#0",
        "315360000000"
      ]
    },
    "1198": {
      "op": "/",
      "defined_out": [
        "apr#0",
        "periodSeconds#0",
        "reward#0",
        "userStake#0"
      ],
      "stack_out": [
        "stakeInfo#0",
        "userStake#0",
        "apr#0",
        "periodSeconds#0",
        "reward#0"
      ]
    },
    "1199": {
      "op": "frame_bury 0"
    },
    "1201": {
      "retsub": true,
      "op": "retsub"
    },
    "1202": {
      "subroutine": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.calculatePendingRewards",
      "params": {
        "userAddress#0": "bytes"
      },
      "block": "calculatePendingRewards",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1205": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "currentPeriod#0"
      ]
    },
    "1207": {
      "op": "dupn 2",
      "stack_out": [
        "currentPeriod#0",
        "lastClaimedPeriod#0",
        "periodsSinceLastClaim#0"
      ]
    },
    "1209": {
      "op": "frame_dig -1",
      "defined_out": [
        "userAddress#0 (copy)"
      ],
      "stack_out": [
        "currentPeriod#0",
        "lastClaimedPeriod#0",
        "periodsSinceLastClaim#0",
        "userAddress#0 (copy)"
      ]
    },
    "1211": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.getUserStakeInfo",
      "op": "callsub getUserStakeInfo",
      "defined_out": [
        "stakeInfo#0"
      ],
      "stack_out": [
        "currentPeriod#0",
        "lastClaimedPeriod#0",
        "periodsSinceLastClaim#0",
        "stakeInfo#0"
      ]
    },
    "1214": {
      "op": "dup",
      "defined_out": [
        "stakeInfo#0"
      ],
      "stack_out": [
        "currentPeriod#0",
        "lastClaimedPeriod#0",
        "periodsSinceLastClaim#0",
        "stakeInfo#0",
        "stakeInfo#0"
      ]
    },
    "1215": {
      "op": "intc_0 // 0",
      "stack_out": [
        "currentPeriod#0",
        "lastClaimedPeriod#0",
        "periodsSinceLastClaim#0",
        "stakeInfo#0",
        "stakeInfo#0",
        "0"
      ]
    },
    "1216": {
      "op": "extract_uint64",
      "defined_out": [
        "stakeInfo#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "currentPeriod#0",
        "lastClaimedPeriod#0",
        "periodsSinceLastClaim#0",
        "stakeInfo#0",
        "tmp%1#0"
      ]
    },
    "1217": {
      "op": "bnz calculatePendingRewards_after_if_else@2",
      "stack_out": [
        "currentPeriod#0",
        "lastClaimedPeriod#0",
        "periodsSinceLastClaim#0",
        "stakeInfo#0"
      ]
    },
    "1220": {
      "op": "intc_0 // 0",
      "stack_out": [
        "currentPeriod#0",
        "lastClaimedPeriod#0",
        "periodsSinceLastClaim#0",
        "stakeInfo#0",
        "0"
      ]
    },
    "1221": {
      "op": "frame_bury 0"
    },
    "1223": {
      "retsub": true,
      "op": "retsub"
    },
    "1224": {
      "block": "calculatePendingRewards_after_if_else@2",
      "stack_in": [
        "currentPeriod#0",
        "lastClaimedPeriod#0",
        "periodsSinceLastClaim#0",
        "stakeInfo#0"
      ],
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.getCurrentPeriod",
      "op": "callsub getCurrentPeriod",
      "defined_out": [
        "currentPeriod#0"
      ],
      "stack_out": [
        "currentPeriod#0",
        "lastClaimedPeriod#0",
        "periodsSinceLastClaim#0",
        "stakeInfo#0",
        "currentPeriod#0"
      ]
    },
    "1227": {
      "op": "dup",
      "stack_out": [
        "currentPeriod#0",
        "lastClaimedPeriod#0",
        "periodsSinceLastClaim#0",
        "stakeInfo#0",
        "currentPeriod#0",
        "currentPeriod#0"
      ]
    },
    "1228": {
      "op": "frame_bury 0",
      "defined_out": [
        "currentPeriod#0"
      ],
      "stack_out": [
        "currentPeriod#0",
        "lastClaimedPeriod#0",
        "periodsSinceLastClaim#0",
        "stakeInfo#0",
        "currentPeriod#0"
      ]
    },
    "1230": {
      "op": "frame_dig 3",
      "defined_out": [
        "currentPeriod#0",
        "stakeInfo#0"
      ],
      "stack_out": [
        "currentPeriod#0",
        "lastClaimedPeriod#0",
        "periodsSinceLastClaim#0",
        "stakeInfo#0",
        "currentPeriod#0",
        "stakeInfo#0"
      ]
    },
    "1232": {
      "op": "pushint 24 // 24",
      "defined_out": [
        "24",
        "currentPeriod#0",
        "stakeInfo#0"
      ],
      "stack_out": [
        "currentPeriod#0",
        "lastClaimedPeriod#0",
        "periodsSinceLastClaim#0",
        "stakeInfo#0",
        "currentPeriod#0",
        "stakeInfo#0",
        "24"
      ]
    },
    "1234": {
      "op": "extract_uint64",
      "defined_out": [
        "currentPeriod#0",
        "lastClaimedPeriod#0",
        "stakeInfo#0"
      ],
      "stack_out": [
        "currentPeriod#0",
        "lastClaimedPeriod#0",
        "periodsSinceLastClaim#0",
        "stakeInfo#0",
        "currentPeriod#0",
        "lastClaimedPeriod#0"
      ]
    },
    "1235": {
      "op": "dup",
      "stack_out": [
        "currentPeriod#0",
        "lastClaimedPeriod#0",
        "periodsSinceLastClaim#0",
        "stakeInfo#0",
        "currentPeriod#0",
        "lastClaimedPeriod#0",
        "lastClaimedPeriod#0"
      ]
    },
    "1236": {
      "op": "frame_bury 1",
      "defined_out": [
        "currentPeriod#0",
        "lastClaimedPeriod#0",
        "stakeInfo#0"
      ],
      "stack_out": [
        "currentPeriod#0",
        "lastClaimedPeriod#0",
        "periodsSinceLastClaim#0",
        "stakeInfo#0",
        "currentPeriod#0",
        "lastClaimedPeriod#0"
      ]
    },
    "1238": {
      "op": ">",
      "defined_out": [
        "currentPeriod#0",
        "lastClaimedPeriod#0",
        "stakeInfo#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "currentPeriod#0",
        "lastClaimedPeriod#0",
        "periodsSinceLastClaim#0",
        "stakeInfo#0",
        "tmp%4#0"
      ]
    },
    "1239": {
      "op": "bz calculatePendingRewards_ternary_false@4",
      "stack_out": [
        "currentPeriod#0",
        "lastClaimedPeriod#0",
        "periodsSinceLastClaim#0",
        "stakeInfo#0"
      ]
    },
    "1242": {
      "op": "frame_dig 0",
      "stack_out": [
        "currentPeriod#0",
        "lastClaimedPeriod#0",
        "periodsSinceLastClaim#0",
        "stakeInfo#0",
        "currentPeriod#0"
      ]
    },
    "1244": {
      "op": "frame_dig 1",
      "stack_out": [
        "currentPeriod#0",
        "lastClaimedPeriod#0",
        "periodsSinceLastClaim#0",
        "stakeInfo#0",
        "currentPeriod#0",
        "lastClaimedPeriod#0"
      ]
    },
    "1246": {
      "op": "-",
      "defined_out": [
        "currentPeriod#0",
        "lastClaimedPeriod#0",
        "periodsSinceLastClaim#0",
        "stakeInfo#0"
      ],
      "stack_out": [
        "currentPeriod#0",
        "lastClaimedPeriod#0",
        "periodsSinceLastClaim#0",
        "stakeInfo#0",
        "periodsSinceLastClaim#0"
      ]
    },
    "1247": {
      "op": "frame_bury 2",
      "defined_out": [
        "currentPeriod#0",
        "lastClaimedPeriod#0",
        "periodsSinceLastClaim#0",
        "stakeInfo#0"
      ],
      "stack_out": [
        "currentPeriod#0",
        "lastClaimedPeriod#0",
        "periodsSinceLastClaim#0",
        "stakeInfo#0"
      ]
    },
    "1249": {
      "block": "calculatePendingRewards_ternary_merge@5",
      "stack_in": [
        "currentPeriod#0",
        "lastClaimedPeriod#0",
        "periodsSinceLastClaim#0",
        "stakeInfo#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "periodsSinceLastClaim#0"
      ],
      "stack_out": [
        "currentPeriod#0",
        "lastClaimedPeriod#0",
        "periodsSinceLastClaim#0",
        "stakeInfo#0",
        "periodsSinceLastClaim#0"
      ]
    },
    "1251": {
      "op": "bnz calculatePendingRewards_after_if_else@7",
      "stack_out": [
        "currentPeriod#0",
        "lastClaimedPeriod#0",
        "periodsSinceLastClaim#0",
        "stakeInfo#0"
      ]
    },
    "1254": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "periodsSinceLastClaim#0"
      ],
      "stack_out": [
        "currentPeriod#0",
        "lastClaimedPeriod#0",
        "periodsSinceLastClaim#0",
        "stakeInfo#0",
        "0"
      ]
    },
    "1255": {
      "op": "frame_bury 0"
    },
    "1257": {
      "retsub": true,
      "op": "retsub"
    },
    "1258": {
      "block": "calculatePendingRewards_after_if_else@7",
      "stack_in": [
        "currentPeriod#0",
        "lastClaimedPeriod#0",
        "periodsSinceLastClaim#0",
        "stakeInfo#0"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "userAddress#0 (copy)"
      ],
      "stack_out": [
        "currentPeriod#0",
        "lastClaimedPeriod#0",
        "periodsSinceLastClaim#0",
        "stakeInfo#0",
        "userAddress#0 (copy)"
      ]
    },
    "1260": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.calculateUserRewardsForPeriod",
      "op": "callsub calculateUserRewardsForPeriod",
      "defined_out": [
        "rewardPerPeriod#0"
      ],
      "stack_out": [
        "currentPeriod#0",
        "lastClaimedPeriod#0",
        "periodsSinceLastClaim#0",
        "stakeInfo#0",
        "rewardPerPeriod#0"
      ]
    },
    "1263": {
      "op": "frame_dig 2",
      "defined_out": [
        "periodsSinceLastClaim#0",
        "rewardPerPeriod#0"
      ],
      "stack_out": [
        "currentPeriod#0",
        "lastClaimedPeriod#0",
        "periodsSinceLastClaim#0",
        "stakeInfo#0",
        "rewardPerPeriod#0",
        "periodsSinceLastClaim#0"
      ]
    },
    "1265": {
      "op": "*",
      "defined_out": [
        "periodsSinceLastClaim#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "currentPeriod#0",
        "lastClaimedPeriod#0",
        "periodsSinceLastClaim#0",
        "stakeInfo#0",
        "tmp%6#0"
      ]
    },
    "1266": {
      "op": "frame_bury 0"
    },
    "1268": {
      "retsub": true,
      "op": "retsub"
    },
    "1269": {
      "block": "calculatePendingRewards_ternary_false@4",
      "stack_in": [
        "currentPeriod#0",
        "lastClaimedPeriod#0",
        "periodsSinceLastClaim#0",
        "stakeInfo#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "periodsSinceLastClaim#0"
      ],
      "stack_out": [
        "currentPeriod#0",
        "lastClaimedPeriod#0",
        "periodsSinceLastClaim#0",
        "stakeInfo#0",
        "periodsSinceLastClaim#0"
      ]
    },
    "1270": {
      "op": "frame_bury 2",
      "defined_out": [
        "periodsSinceLastClaim#0"
      ],
      "stack_out": [
        "currentPeriod#0",
        "lastClaimedPeriod#0",
        "periodsSinceLastClaim#0",
        "stakeInfo#0"
      ]
    },
    "1272": {
      "op": "b calculatePendingRewards_ternary_merge@5"
    },
    "1275": {
      "subroutine": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.claimRewards",
      "params": {},
      "block": "claimRewards",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "senderAddress#0"
      ],
      "stack_out": [
        "senderAddress#0"
      ]
    },
    "1277": {
      "op": "dup",
      "defined_out": [
        "senderAddress#0",
        "senderAddress#0 (copy)"
      ],
      "stack_out": [
        "senderAddress#0",
        "senderAddress#0 (copy)"
      ]
    },
    "1278": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.getUserStakeInfo",
      "op": "callsub getUserStakeInfo",
      "defined_out": [
        "senderAddress#0",
        "stakeInfo#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0"
      ]
    },
    "1281": {
      "op": "dup",
      "defined_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#0 (copy)"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#0 (copy)"
      ]
    },
    "1282": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#0 (copy)"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#0 (copy)",
        "0"
      ]
    },
    "1283": {
      "op": "extract_uint64",
      "defined_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ]
    },
    "1284": {
      "op": "dup",
      "defined_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "1285": {
      "error": "No stake found",
      "op": "assert // No stake found",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ]
    },
    "1286": {
      "op": "dig 2",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "senderAddress#0 (copy)"
      ]
    },
    "1288": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.calculatePendingRewards",
      "op": "callsub calculatePendingRewards",
      "defined_out": [
        "pendingRewards#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "pendingRewards#0"
      ]
    },
    "1291": {
      "op": "dup",
      "defined_out": [
        "pendingRewards#0",
        "pendingRewards#0 (copy)",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "pendingRewards#0",
        "pendingRewards#0 (copy)"
      ]
    },
    "1292": {
      "error": "No rewards to claim",
      "op": "assert // No rewards to claim",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "pendingRewards#0"
      ]
    },
    "1293": {
      "op": "intc_0 // 0",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "pendingRewards#0",
        "0"
      ]
    },
    "1294": {
      "op": "bytec_0 // \"rewardPool\"",
      "defined_out": [
        "\"rewardPool\"",
        "0",
        "pendingRewards#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "pendingRewards#0",
        "0",
        "\"rewardPool\""
      ]
    },
    "1295": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "pendingRewards#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "pendingRewards#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1296": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "pendingRewards#0",
        "maybe_value%0#0"
      ]
    },
    "1297": {
      "op": "dig 1",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "pendingRewards#0",
        "maybe_value%0#0",
        "pendingRewards#0 (copy)"
      ]
    },
    "1299": {
      "op": ">=",
      "defined_out": [
        "pendingRewards#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "pendingRewards#0",
        "tmp%4#0"
      ]
    },
    "1300": {
      "error": "Insufficient reward pool",
      "op": "assert // Insufficient reward pool",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "pendingRewards#0"
      ]
    },
    "1301": {
      "op": "swap",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "tmp%1#0"
      ]
    },
    "1302": {
      "op": "dig 1",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "tmp%1#0",
        "pendingRewards#0 (copy)"
      ]
    },
    "1304": {
      "op": "+",
      "defined_out": [
        "pendingRewards#0",
        "senderAddress#0",
        "stakeInfo#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "to_encode%0#0"
      ]
    },
    "1305": {
      "op": "itob",
      "defined_out": [
        "pendingRewards#0",
        "senderAddress#0",
        "stakeInfo#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "val_as_bytes%0#0"
      ]
    },
    "1306": {
      "op": "uncover 2",
      "stack_out": [
        "senderAddress#0",
        "pendingRewards#0",
        "val_as_bytes%0#0",
        "stakeInfo#0"
      ]
    },
    "1308": {
      "op": "swap",
      "stack_out": [
        "senderAddress#0",
        "pendingRewards#0",
        "stakeInfo#0",
        "val_as_bytes%0#0"
      ]
    },
    "1309": {
      "op": "replace2 0",
      "stack_out": [
        "senderAddress#0",
        "pendingRewards#0",
        "stakeInfo#0"
      ]
    },
    "1311": {
      "op": "dup",
      "stack_out": [
        "senderAddress#0",
        "pendingRewards#0",
        "stakeInfo#0",
        "stakeInfo#0 (copy)"
      ]
    },
    "1312": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "pendingRewards#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#0 (copy)"
      ],
      "stack_out": [
        "senderAddress#0",
        "pendingRewards#0",
        "stakeInfo#0",
        "stakeInfo#0 (copy)",
        "16"
      ]
    },
    "1314": {
      "op": "extract_uint64",
      "defined_out": [
        "pendingRewards#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "pendingRewards#0",
        "stakeInfo#0",
        "tmp%8#0"
      ]
    },
    "1315": {
      "op": "dig 2",
      "stack_out": [
        "senderAddress#0",
        "pendingRewards#0",
        "stakeInfo#0",
        "tmp%8#0",
        "pendingRewards#0 (copy)"
      ]
    },
    "1317": {
      "op": "+",
      "defined_out": [
        "pendingRewards#0",
        "senderAddress#0",
        "stakeInfo#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "pendingRewards#0",
        "stakeInfo#0",
        "to_encode%1#0"
      ]
    },
    "1318": {
      "op": "itob",
      "defined_out": [
        "pendingRewards#0",
        "senderAddress#0",
        "stakeInfo#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "pendingRewards#0",
        "stakeInfo#0",
        "val_as_bytes%1#0"
      ]
    },
    "1319": {
      "op": "replace2 16",
      "stack_out": [
        "senderAddress#0",
        "pendingRewards#0",
        "stakeInfo#0"
      ]
    },
    "1321": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.getCurrentPeriod",
      "op": "callsub getCurrentPeriod",
      "defined_out": [
        "pendingRewards#0",
        "senderAddress#0",
        "stakeInfo#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "pendingRewards#0",
        "stakeInfo#0",
        "to_encode%2#0"
      ]
    },
    "1324": {
      "op": "itob",
      "defined_out": [
        "pendingRewards#0",
        "senderAddress#0",
        "stakeInfo#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "pendingRewards#0",
        "stakeInfo#0",
        "val_as_bytes%2#0"
      ]
    },
    "1325": {
      "op": "replace2 24",
      "stack_out": [
        "senderAddress#0",
        "pendingRewards#0",
        "stakeInfo#0"
      ]
    },
    "1327": {
      "op": "uncover 2",
      "stack_out": [
        "pendingRewards#0",
        "stakeInfo#0",
        "senderAddress#0"
      ]
    },
    "1329": {
      "op": "swap",
      "stack_out": [
        "pendingRewards#0",
        "senderAddress#0",
        "stakeInfo#0"
      ]
    },
    "1330": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.storeUserStakeInfo",
      "op": "callsub storeUserStakeInfo",
      "stack_out": [
        "pendingRewards#0",
        "stakeInfo#0"
      ]
    },
    "1333": {
      "op": "pop",
      "stack_out": [
        "pendingRewards#0"
      ]
    },
    "1334": {
      "op": "intc_0 // 0",
      "stack_out": [
        "pendingRewards#0",
        "0"
      ]
    },
    "1335": {
      "op": "bytec_2 // \"totalStaked\"",
      "defined_out": [
        "\"totalStaked\"",
        "0",
        "pendingRewards#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "0",
        "\"totalStaked\""
      ]
    },
    "1336": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "pendingRewards#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1337": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "pendingRewards#0",
        "maybe_value%1#0"
      ]
    },
    "1338": {
      "op": "dig 1",
      "stack_out": [
        "pendingRewards#0",
        "maybe_value%1#0",
        "pendingRewards#0 (copy)"
      ]
    },
    "1340": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0",
        "pendingRewards#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "new_state_value%0#0"
      ]
    },
    "1341": {
      "op": "bytec_2 // \"totalStaked\"",
      "stack_out": [
        "pendingRewards#0",
        "new_state_value%0#0",
        "\"totalStaked\""
      ]
    },
    "1342": {
      "op": "swap",
      "stack_out": [
        "pendingRewards#0",
        "\"totalStaked\"",
        "new_state_value%0#0"
      ]
    },
    "1343": {
      "op": "app_global_put",
      "stack_out": [
        "pendingRewards#0"
      ]
    },
    "1344": {
      "op": "intc_0 // 0",
      "stack_out": [
        "pendingRewards#0",
        "0"
      ]
    },
    "1345": {
      "op": "bytec_0 // \"rewardPool\"",
      "stack_out": [
        "pendingRewards#0",
        "0",
        "\"rewardPool\""
      ]
    },
    "1346": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "pendingRewards#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1347": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "pendingRewards#0",
        "maybe_value%2#0"
      ]
    },
    "1348": {
      "op": "swap",
      "stack_out": [
        "maybe_value%2#0",
        "pendingRewards#0"
      ]
    },
    "1349": {
      "op": "-",
      "defined_out": [
        "new_state_value%1#0"
      ],
      "stack_out": [
        "new_state_value%1#0"
      ]
    },
    "1350": {
      "op": "bytec_0 // \"rewardPool\"",
      "stack_out": [
        "new_state_value%1#0",
        "\"rewardPool\""
      ]
    },
    "1351": {
      "op": "swap",
      "stack_out": [
        "\"rewardPool\"",
        "new_state_value%1#0"
      ]
    },
    "1352": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1353": {
      "retsub": true,
      "op": "retsub"
    },
    "1354": {
      "subroutine": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.updateAPR",
      "params": {
        "newAprBasisPoints#0": "uint64"
      },
      "block": "updateAPR",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1357": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1358": {
      "op": "bytec_3 // \"adminAddress\"",
      "defined_out": [
        "\"adminAddress\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"adminAddress\""
      ]
    },
    "1359": {
      "op": "app_global_get_ex",
      "defined_out": [
        "adminAddr#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "maybe_exists%0#0"
      ]
    },
    "1360": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "adminAddr#0"
      ]
    },
    "1361": {
      "op": "txn Sender",
      "defined_out": [
        "adminAddr#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "tmp%0#0"
      ]
    },
    "1363": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1364": {
      "error": "Only admin can update APR",
      "op": "assert // Only admin can update APR",
      "stack_out": []
    },
    "1365": {
      "op": "bytec 5 // \"aprBasisPoints\"",
      "defined_out": [
        "\"aprBasisPoints\""
      ],
      "stack_out": [
        "\"aprBasisPoints\""
      ]
    },
    "1367": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"aprBasisPoints\"",
        "newAprBasisPoints#0 (copy)"
      ],
      "stack_out": [
        "\"aprBasisPoints\"",
        "newAprBasisPoints#0 (copy)"
      ]
    },
    "1369": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1370": {
      "retsub": true,
      "op": "retsub"
    },
    "1371": {
      "subroutine": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.updateAdmin",
      "params": {
        "newAdminAddress#0": "bytes"
      },
      "block": "updateAdmin",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1374": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1375": {
      "op": "bytec_3 // \"adminAddress\"",
      "defined_out": [
        "\"adminAddress\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"adminAddress\""
      ]
    },
    "1376": {
      "op": "app_global_get_ex",
      "defined_out": [
        "adminAddr#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "maybe_exists%0#0"
      ]
    },
    "1377": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "adminAddr#0"
      ]
    },
    "1378": {
      "op": "txn Sender",
      "defined_out": [
        "adminAddr#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "tmp%0#0"
      ]
    },
    "1380": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1381": {
      "error": "Only admin can update admin",
      "op": "assert // Only admin can update admin",
      "stack_out": []
    },
    "1382": {
      "op": "bytec_3 // \"adminAddress\"",
      "stack_out": [
        "\"adminAddress\""
      ]
    },
    "1383": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"adminAddress\"",
        "newAdminAddress#0 (copy)"
      ],
      "stack_out": [
        "\"adminAddress\"",
        "newAdminAddress#0 (copy)"
      ]
    },
    "1385": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1386": {
      "retsub": true,
      "op": "retsub"
    },
    "1387": {
      "subroutine": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.getUserStats",
      "params": {
        "userAddress#0": "bytes"
      },
      "block": "getUserStats",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1390": {
      "op": "frame_dig -1",
      "defined_out": [
        "userAddress#0 (copy)"
      ],
      "stack_out": [
        "userAddress#0 (copy)"
      ]
    },
    "1392": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.getUserStakeInfo",
      "op": "callsub getUserStakeInfo",
      "defined_out": [
        "stakeInfo#0"
      ],
      "stack_out": [
        "stakeInfo#0"
      ]
    },
    "1395": {
      "op": "frame_dig -1",
      "stack_out": [
        "stakeInfo#0",
        "userAddress#0 (copy)"
      ]
    },
    "1397": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.calculatePendingRewards",
      "op": "callsub calculatePendingRewards",
      "defined_out": [
        "pendingRewards#0",
        "stakeInfo#0"
      ],
      "stack_out": [
        "stakeInfo#0",
        "pendingRewards#0"
      ]
    },
    "1400": {
      "op": "dig 1",
      "defined_out": [
        "pendingRewards#0",
        "stakeInfo#0",
        "stakeInfo#0 (copy)"
      ],
      "stack_out": [
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#0 (copy)"
      ]
    },
    "1402": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "pendingRewards#0",
        "stakeInfo#0",
        "stakeInfo#0 (copy)"
      ],
      "stack_out": [
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#0 (copy)",
        "0"
      ]
    },
    "1403": {
      "op": "extract_uint64",
      "defined_out": [
        "pendingRewards#0",
        "stakeInfo#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "stakeInfo#0",
        "pendingRewards#0",
        "tmp%1#0"
      ]
    },
    "1404": {
      "op": "dig 2",
      "stack_out": [
        "stakeInfo#0",
        "pendingRewards#0",
        "tmp%1#0",
        "stakeInfo#0 (copy)"
      ]
    },
    "1406": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "pendingRewards#0",
        "stakeInfo#0",
        "stakeInfo#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "stakeInfo#0",
        "pendingRewards#0",
        "tmp%1#0",
        "stakeInfo#0 (copy)",
        "8"
      ]
    },
    "1407": {
      "op": "extract_uint64",
      "defined_out": [
        "pendingRewards#0",
        "stakeInfo#0",
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "stakeInfo#0",
        "pendingRewards#0",
        "tmp%1#0",
        "tmp%3#0"
      ]
    },
    "1408": {
      "op": "dig 3",
      "stack_out": [
        "stakeInfo#0",
        "pendingRewards#0",
        "tmp%1#0",
        "tmp%3#0",
        "stakeInfo#0 (copy)"
      ]
    },
    "1410": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "pendingRewards#0",
        "stakeInfo#0",
        "stakeInfo#0 (copy)",
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "stakeInfo#0",
        "pendingRewards#0",
        "tmp%1#0",
        "tmp%3#0",
        "stakeInfo#0 (copy)",
        "16"
      ]
    },
    "1412": {
      "op": "extract_uint64",
      "defined_out": [
        "pendingRewards#0",
        "stakeInfo#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "stakeInfo#0",
        "pendingRewards#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0"
      ]
    },
    "1413": {
      "op": "uncover 4",
      "stack_out": [
        "pendingRewards#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "stakeInfo#0"
      ]
    },
    "1415": {
      "op": "pushint 24 // 24",
      "defined_out": [
        "24",
        "pendingRewards#0",
        "stakeInfo#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "stakeInfo#0",
        "24"
      ]
    },
    "1417": {
      "op": "extract_uint64",
      "defined_out": [
        "pendingRewards#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "1418": {
      "op": "uncover 3",
      "stack_out": [
        "pendingRewards#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%1#0"
      ]
    },
    "1420": {
      "op": "itob",
      "defined_out": [
        "array%sub_item%0#1",
        "pendingRewards#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "array%sub_item%0#1"
      ]
    },
    "1421": {
      "op": "uncover 3",
      "stack_out": [
        "pendingRewards#0",
        "tmp%5#0",
        "tmp%7#0",
        "array%sub_item%0#1",
        "tmp%3#0"
      ]
    },
    "1423": {
      "op": "itob",
      "defined_out": [
        "array%sub_item%0#1",
        "array%sub_item%1#1",
        "pendingRewards#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "tmp%5#0",
        "tmp%7#0",
        "array%sub_item%0#1",
        "array%sub_item%1#1"
      ]
    },
    "1424": {
      "op": "concat",
      "defined_out": [
        "array%data%1#1",
        "pendingRewards#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "tmp%5#0",
        "tmp%7#0",
        "array%data%1#1"
      ]
    },
    "1425": {
      "op": "uncover 2",
      "stack_out": [
        "pendingRewards#0",
        "tmp%7#0",
        "array%data%1#1",
        "tmp%5#0"
      ]
    },
    "1427": {
      "op": "itob",
      "defined_out": [
        "array%data%1#1",
        "array%sub_item%2#1",
        "pendingRewards#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "tmp%7#0",
        "array%data%1#1",
        "array%sub_item%2#1"
      ]
    },
    "1428": {
      "op": "concat",
      "defined_out": [
        "array%data%2#1",
        "pendingRewards#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "tmp%7#0",
        "array%data%2#1"
      ]
    },
    "1429": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%7#0",
        "array%data%2#1",
        "pendingRewards#0"
      ]
    },
    "1431": {
      "op": "itob",
      "defined_out": [
        "array%data%2#1",
        "array%sub_item%3#1",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "array%data%2#1",
        "array%sub_item%3#1"
      ]
    },
    "1432": {
      "op": "concat",
      "defined_out": [
        "array%data%3#1",
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0",
        "array%data%3#1"
      ]
    },
    "1433": {
      "op": "swap",
      "stack_out": [
        "array%data%3#1",
        "tmp%7#0"
      ]
    },
    "1434": {
      "op": "itob",
      "defined_out": [
        "array%data%3#1",
        "array%sub_item%4#1"
      ],
      "stack_out": [
        "array%data%3#1",
        "array%sub_item%4#1"
      ]
    },
    "1435": {
      "op": "concat",
      "defined_out": [
        "array%data%4#1"
      ],
      "stack_out": [
        "array%data%4#1"
      ]
    },
    "1436": {
      "op": "dup",
      "defined_out": [
        "array%data%4#1",
        "array%data%4#1 (copy)"
      ],
      "stack_out": [
        "array%data%4#1",
        "array%data%4#1 (copy)"
      ]
    },
    "1437": {
      "op": "len",
      "defined_out": [
        "array%data%4#1",
        "byte_len%0#0"
      ],
      "stack_out": [
        "array%data%4#1",
        "byte_len%0#0"
      ]
    },
    "1438": {
      "op": "intc_3 // 8",
      "stack_out": [
        "array%data%4#1",
        "byte_len%0#0",
        "8"
      ]
    },
    "1439": {
      "op": "/",
      "defined_out": [
        "array%data%4#1",
        "len_%0#0"
      ],
      "stack_out": [
        "array%data%4#1",
        "len_%0#0"
      ]
    },
    "1440": {
      "op": "itob",
      "defined_out": [
        "array%data%4#1",
        "as_bytes%0#0"
      ],
      "stack_out": [
        "array%data%4#1",
        "as_bytes%0#0"
      ]
    },
    "1441": {
      "op": "extract 6 2",
      "defined_out": [
        "array%data%4#1",
        "len_16_bit%0#0"
      ],
      "stack_out": [
        "array%data%4#1",
        "len_16_bit%0#0"
      ]
    },
    "1444": {
      "op": "swap",
      "stack_out": [
        "len_16_bit%0#0",
        "array%data%4#1"
      ]
    },
    "1445": {
      "op": "concat",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "1446": {
      "retsub": true,
      "op": "retsub"
    },
    "1447": {
      "subroutine": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.getContractStats",
      "params": {},
      "block": "getContractStats",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1448": {
      "op": "bytec_1 // \"asset\"",
      "defined_out": [
        "\"asset\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"asset\""
      ]
    },
    "1449": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1450": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1451": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "1452": {
      "op": "bytec_2 // \"totalStaked\"",
      "defined_out": [
        "\"totalStaked\"",
        "0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "\"totalStaked\""
      ]
    },
    "1453": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1454": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "1455": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "0"
      ]
    },
    "1456": {
      "op": "bytec 5 // \"aprBasisPoints\"",
      "defined_out": [
        "\"aprBasisPoints\"",
        "0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "0",
        "\"aprBasisPoints\""
      ]
    },
    "1458": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1459": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ]
    },
    "1460": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "0"
      ]
    },
    "1461": {
      "op": "bytec 8 // \"lastDistributionTime\"",
      "defined_out": [
        "\"lastDistributionTime\"",
        "0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "0",
        "\"lastDistributionTime\""
      ]
    },
    "1463": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1464": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ]
    },
    "1465": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "0"
      ]
    },
    "1466": {
      "op": "bytec 6 // \"distributionPeriodSeconds\"",
      "defined_out": [
        "\"distributionPeriodSeconds\"",
        "0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "0",
        "\"distributionPeriodSeconds\""
      ]
    },
    "1468": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "1469": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0"
      ]
    },
    "1470": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "0"
      ]
    },
    "1471": {
      "op": "bytec 7 // \"minimumStake\"",
      "defined_out": [
        "\"minimumStake\"",
        "0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "0",
        "\"minimumStake\""
      ]
    },
    "1473": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "1474": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0"
      ]
    },
    "1475": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "0"
      ]
    },
    "1476": {
      "op": "bytec_0 // \"rewardPool\"",
      "defined_out": [
        "\"rewardPool\"",
        "0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "0",
        "\"rewardPool\""
      ]
    },
    "1477": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%6#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "1478": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0"
      ]
    },
    "1479": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.getCurrentPeriod",
      "op": "callsub getCurrentPeriod",
      "defined_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "tmp%0#0"
      ]
    },
    "1482": {
      "op": "uncover 7",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "tmp%0#0",
        "maybe_value%0#0"
      ]
    },
    "1484": {
      "op": "itob",
      "defined_out": [
        "array%sub_item%0#1",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "tmp%0#0",
        "array%sub_item%0#1"
      ]
    },
    "1485": {
      "op": "uncover 7",
      "stack_out": [
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "tmp%0#0",
        "array%sub_item%0#1",
        "maybe_value%1#0"
      ]
    },
    "1487": {
      "op": "itob",
      "defined_out": [
        "array%sub_item%0#1",
        "array%sub_item%1#1",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "tmp%0#0",
        "array%sub_item%0#1",
        "array%sub_item%1#1"
      ]
    },
    "1488": {
      "op": "concat",
      "defined_out": [
        "array%data%1#1",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "tmp%0#0",
        "array%data%1#1"
      ]
    },
    "1489": {
      "op": "uncover 6",
      "stack_out": [
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "tmp%0#0",
        "array%data%1#1",
        "maybe_value%2#0"
      ]
    },
    "1491": {
      "op": "itob",
      "defined_out": [
        "array%data%1#1",
        "array%sub_item%2#1",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "tmp%0#0",
        "array%data%1#1",
        "array%sub_item%2#1"
      ]
    },
    "1492": {
      "op": "concat",
      "defined_out": [
        "array%data%2#1",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "tmp%0#0",
        "array%data%2#1"
      ]
    },
    "1493": {
      "op": "uncover 5",
      "stack_out": [
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "tmp%0#0",
        "array%data%2#1",
        "maybe_value%3#0"
      ]
    },
    "1495": {
      "op": "itob",
      "defined_out": [
        "array%data%2#1",
        "array%sub_item%3#1",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "tmp%0#0",
        "array%data%2#1",
        "array%sub_item%3#1"
      ]
    },
    "1496": {
      "op": "concat",
      "defined_out": [
        "array%data%3#1",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "tmp%0#0",
        "array%data%3#1"
      ]
    },
    "1497": {
      "op": "uncover 4",
      "stack_out": [
        "maybe_value%5#0",
        "maybe_value%6#0",
        "tmp%0#0",
        "array%data%3#1",
        "maybe_value%4#0"
      ]
    },
    "1499": {
      "op": "itob",
      "defined_out": [
        "array%data%3#1",
        "array%sub_item%4#1",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "maybe_value%5#0",
        "maybe_value%6#0",
        "tmp%0#0",
        "array%data%3#1",
        "array%sub_item%4#1"
      ]
    },
    "1500": {
      "op": "concat",
      "defined_out": [
        "array%data%4#1",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "maybe_value%5#0",
        "maybe_value%6#0",
        "tmp%0#0",
        "array%data%4#1"
      ]
    },
    "1501": {
      "op": "uncover 3",
      "stack_out": [
        "maybe_value%6#0",
        "tmp%0#0",
        "array%data%4#1",
        "maybe_value%5#0"
      ]
    },
    "1503": {
      "op": "itob",
      "defined_out": [
        "array%data%4#1",
        "array%sub_item%5#1",
        "maybe_value%6#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "maybe_value%6#0",
        "tmp%0#0",
        "array%data%4#1",
        "array%sub_item%5#1"
      ]
    },
    "1504": {
      "op": "concat",
      "defined_out": [
        "array%data%5#1",
        "maybe_value%6#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "maybe_value%6#0",
        "tmp%0#0",
        "array%data%5#1"
      ]
    },
    "1505": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%0#0",
        "array%data%5#1",
        "maybe_value%6#0"
      ]
    },
    "1507": {
      "op": "itob",
      "defined_out": [
        "array%data%5#1",
        "array%sub_item%6#1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "array%data%5#1",
        "array%sub_item%6#1"
      ]
    },
    "1508": {
      "op": "concat",
      "defined_out": [
        "array%data%6#1",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "array%data%6#1"
      ]
    },
    "1509": {
      "op": "swap",
      "stack_out": [
        "array%data%6#1",
        "tmp%0#0"
      ]
    },
    "1510": {
      "op": "itob",
      "defined_out": [
        "array%data%6#1",
        "array%sub_item%7#1"
      ],
      "stack_out": [
        "array%data%6#1",
        "array%sub_item%7#1"
      ]
    },
    "1511": {
      "op": "concat",
      "defined_out": [
        "array%data%7#1"
      ],
      "stack_out": [
        "array%data%7#1"
      ]
    },
    "1512": {
      "op": "dup",
      "defined_out": [
        "array%data%7#1",
        "array%data%7#1 (copy)"
      ],
      "stack_out": [
        "array%data%7#1",
        "array%data%7#1 (copy)"
      ]
    },
    "1513": {
      "op": "len",
      "defined_out": [
        "array%data%7#1",
        "byte_len%0#0"
      ],
      "stack_out": [
        "array%data%7#1",
        "byte_len%0#0"
      ]
    },
    "1514": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "array%data%7#1",
        "byte_len%0#0"
      ],
      "stack_out": [
        "array%data%7#1",
        "byte_len%0#0",
        "8"
      ]
    },
    "1515": {
      "op": "/",
      "defined_out": [
        "array%data%7#1",
        "len_%0#0"
      ],
      "stack_out": [
        "array%data%7#1",
        "len_%0#0"
      ]
    },
    "1516": {
      "op": "itob",
      "defined_out": [
        "array%data%7#1",
        "as_bytes%0#0"
      ],
      "stack_out": [
        "array%data%7#1",
        "as_bytes%0#0"
      ]
    },
    "1517": {
      "op": "extract 6 2",
      "defined_out": [
        "array%data%7#1",
        "len_16_bit%0#0"
      ],
      "stack_out": [
        "array%data%7#1",
        "len_16_bit%0#0"
      ]
    },
    "1520": {
      "op": "swap",
      "stack_out": [
        "len_16_bit%0#0",
        "array%data%7#1"
      ]
    },
    "1521": {
      "op": "concat",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "1522": {
      "retsub": true,
      "op": "retsub"
    },
    "1523": {
      "subroutine": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.emergencyWithdrawRewards",
      "params": {
        "amount#0": "uint64"
      },
      "block": "emergencyWithdrawRewards",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1526": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1527": {
      "op": "bytec_3 // \"adminAddress\"",
      "defined_out": [
        "\"adminAddress\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"adminAddress\""
      ]
    },
    "1528": {
      "op": "app_global_get_ex",
      "defined_out": [
        "adminAddr#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "maybe_exists%0#0"
      ]
    },
    "1529": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "adminAddr#0"
      ]
    },
    "1530": {
      "op": "txn Sender",
      "defined_out": [
        "adminAddr#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "tmp%0#0"
      ]
    },
    "1532": {
      "op": "dig 1",
      "defined_out": [
        "adminAddr#0",
        "adminAddr#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "tmp%0#0",
        "adminAddr#0 (copy)"
      ]
    },
    "1534": {
      "op": "==",
      "defined_out": [
        "adminAddr#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "tmp%1#0"
      ]
    },
    "1535": {
      "error": "Only admin can emergency withdraw",
      "op": "assert // Only admin can emergency withdraw",
      "stack_out": [
        "adminAddr#0"
      ]
    },
    "1536": {
      "op": "intc_0 // 0",
      "stack_out": [
        "adminAddr#0",
        "0"
      ]
    },
    "1537": {
      "op": "bytec_0 // \"rewardPool\"",
      "defined_out": [
        "\"rewardPool\"",
        "0",
        "adminAddr#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "0",
        "\"rewardPool\""
      ]
    },
    "1538": {
      "op": "app_global_get_ex",
      "defined_out": [
        "adminAddr#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1539": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "adminAddr#0",
        "maybe_value%1#0"
      ]
    },
    "1540": {
      "op": "frame_dig -1",
      "defined_out": [
        "adminAddr#0",
        "amount#0 (copy)",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "maybe_value%1#0",
        "amount#0 (copy)"
      ]
    },
    "1542": {
      "op": ">=",
      "defined_out": [
        "adminAddr#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "tmp%2#0"
      ]
    },
    "1543": {
      "error": "Insufficient reward pool",
      "op": "assert // Insufficient reward pool",
      "stack_out": [
        "adminAddr#0"
      ]
    },
    "1544": {
      "op": "intc_0 // 0",
      "stack_out": [
        "adminAddr#0",
        "0"
      ]
    },
    "1545": {
      "op": "bytec_0 // \"rewardPool\"",
      "stack_out": [
        "adminAddr#0",
        "0",
        "\"rewardPool\""
      ]
    },
    "1546": {
      "op": "app_global_get_ex",
      "defined_out": [
        "adminAddr#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1547": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "adminAddr#0",
        "maybe_value%2#0"
      ]
    },
    "1548": {
      "op": "frame_dig -1",
      "stack_out": [
        "adminAddr#0",
        "maybe_value%2#0",
        "amount#0 (copy)"
      ]
    },
    "1550": {
      "op": "-",
      "defined_out": [
        "adminAddr#0",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "new_state_value%0#0"
      ]
    },
    "1551": {
      "op": "bytec_0 // \"rewardPool\"",
      "stack_out": [
        "adminAddr#0",
        "new_state_value%0#0",
        "\"rewardPool\""
      ]
    },
    "1552": {
      "op": "swap",
      "stack_out": [
        "adminAddr#0",
        "\"rewardPool\"",
        "new_state_value%0#0"
      ]
    },
    "1553": {
      "op": "app_global_put",
      "stack_out": [
        "adminAddr#0"
      ]
    },
    "1554": {
      "op": "intc_0 // 0",
      "stack_out": [
        "adminAddr#0",
        "0"
      ]
    },
    "1555": {
      "op": "bytec_1 // \"asset\"",
      "defined_out": [
        "\"asset\"",
        "0",
        "adminAddr#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "0",
        "\"asset\""
      ]
    },
    "1556": {
      "op": "app_global_get_ex",
      "defined_out": [
        "adminAddr#0",
        "asset#0",
        "maybe_exists%3#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "asset#0",
        "maybe_exists%3#0"
      ]
    },
    "1557": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "adminAddr#0",
        "asset#0"
      ]
    },
    "1558": {
      "op": "itxn_begin"
    },
    "1559": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "adminAddr#0"
      ]
    },
    "1561": {
      "op": "frame_dig -1",
      "stack_out": [
        "adminAddr#0",
        "amount#0 (copy)"
      ]
    },
    "1563": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "adminAddr#0"
      ]
    },
    "1565": {
      "op": "itxn_field AssetReceiver",
      "stack_out": []
    },
    "1567": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "4"
      ]
    },
    "1568": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1570": {
      "op": "pushint 1000 // 1000",
      "defined_out": [
        "1000"
      ],
      "stack_out": [
        "1000"
      ]
    },
    "1573": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1575": {
      "op": "itxn_submit"
    },
    "1576": {
      "retsub": true,
      "op": "retsub"
    },
    "1577": {
      "subroutine": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.deleteUserBox",
      "params": {
        "userAddress#0": "bytes"
      },
      "block": "deleteUserBox",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1580": {
      "op": "intc_0 // 0",
      "stack_out": [
        "userBox#0"
      ]
    },
    "1581": {
      "op": "dup",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "userBox#0",
        "0"
      ]
    },
    "1582": {
      "op": "bytec_3 // \"adminAddress\"",
      "defined_out": [
        "\"adminAddress\"",
        "0"
      ],
      "stack_out": [
        "userBox#0",
        "0",
        "\"adminAddress\""
      ]
    },
    "1583": {
      "op": "app_global_get_ex",
      "defined_out": [
        "adminAddr#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "maybe_exists%0#0"
      ]
    },
    "1584": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "userBox#0",
        "adminAddr#0"
      ]
    },
    "1585": {
      "op": "txn Sender",
      "defined_out": [
        "adminAddr#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "tmp%0#0"
      ]
    },
    "1587": {
      "op": "frame_dig -1",
      "defined_out": [
        "adminAddr#0",
        "tmp%0#0",
        "userAddress#0 (copy)"
      ],
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "tmp%0#0",
        "userAddress#0 (copy)"
      ]
    },
    "1589": {
      "op": "==",
      "defined_out": [
        "adminAddr#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "tmp%1#0"
      ]
    },
    "1590": {
      "op": "bnz deleteUserBox_bool_true@2",
      "stack_out": [
        "userBox#0",
        "adminAddr#0"
      ]
    },
    "1593": {
      "op": "txn Sender",
      "defined_out": [
        "adminAddr#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "tmp%2#0"
      ]
    },
    "1595": {
      "op": "frame_dig 1",
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "tmp%2#0",
        "adminAddr#0"
      ]
    },
    "1597": {
      "op": "==",
      "defined_out": [
        "adminAddr#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "tmp%3#0"
      ]
    },
    "1598": {
      "op": "bz deleteUserBox_bool_false@3",
      "stack_out": [
        "userBox#0",
        "adminAddr#0"
      ]
    },
    "1601": {
      "block": "deleteUserBox_bool_true@2",
      "stack_in": [
        "userBox#0",
        "adminAddr#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "or_result%0#0"
      ]
    },
    "1602": {
      "block": "deleteUserBox_bool_merge@4",
      "stack_in": [
        "userBox#0",
        "adminAddr#0",
        "or_result%0#0"
      ],
      "error": "Only box owner or admin can delete box",
      "op": "assert // Only box owner or admin can delete box",
      "defined_out": [],
      "stack_out": [
        "userBox#0",
        "adminAddr#0"
      ]
    },
    "1603": {
      "op": "frame_dig -1",
      "defined_out": [
        "userAddress#0 (copy)"
      ],
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "userAddress#0 (copy)"
      ]
    },
    "1605": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.getUserStakeInfo",
      "op": "callsub getUserStakeInfo",
      "defined_out": [
        "stakeInfo#0"
      ],
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "stakeInfo#0"
      ]
    },
    "1608": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "stakeInfo#0"
      ],
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "stakeInfo#0",
        "0"
      ]
    },
    "1609": {
      "op": "extract_uint64",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "tmp%5#0"
      ]
    },
    "1610": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "tmp%6#0"
      ]
    },
    "1611": {
      "error": "User still has active stake",
      "op": "assert // User still has active stake",
      "stack_out": [
        "userBox#0",
        "adminAddr#0"
      ]
    },
    "1612": {
      "op": "bytec 9 // \"stakers\"",
      "defined_out": [
        "\"stakers\""
      ],
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "\"stakers\""
      ]
    },
    "1614": {
      "op": "frame_dig -1",
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "\"stakers\"",
        "userAddress#0 (copy)"
      ]
    },
    "1616": {
      "op": "concat",
      "defined_out": [
        "userBox#0"
      ],
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "userBox#0"
      ]
    },
    "1617": {
      "op": "dup",
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "userBox#0",
        "userBox#0"
      ]
    },
    "1618": {
      "op": "frame_bury 0",
      "defined_out": [
        "userBox#0"
      ],
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "userBox#0"
      ]
    },
    "1620": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "userBox#0"
      ],
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1621": {
      "op": "bury 1",
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "maybe_exists%1#0"
      ]
    },
    "1623": {
      "op": "bz deleteUserBox_after_if_else@6",
      "stack_out": [
        "userBox#0",
        "adminAddr#0"
      ]
    },
    "1626": {
      "op": "frame_dig 0",
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "userBox#0"
      ]
    },
    "1628": {
      "op": "box_del",
      "defined_out": [
        "userBox#0",
        "{box_del}"
      ],
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "{box_del}"
      ]
    },
    "1629": {
      "op": "pop",
      "stack_out": [
        "userBox#0",
        "adminAddr#0"
      ]
    },
    "1630": {
      "block": "deleteUserBox_after_if_else@6",
      "stack_in": [
        "userBox#0",
        "adminAddr#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "1631": {
      "block": "deleteUserBox_bool_false@3",
      "stack_in": [
        "userBox#0",
        "adminAddr#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "or_result%0#0"
      ]
    },
    "1632": {
      "op": "b deleteUserBox_bool_merge@4"
    }
  }
}