{
  "version": 3,
  "sources": [
    "/home/justin/projects/dod_staking/staking/projects/staking-contracts/smart_contracts/staking/contract.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmDS;AAA2C;AAAlD;AACO;AAAoD;;AAA3D;AACO;AAAkD;AAAzD;AACO;;AAAqD;AAA5D;AACO;;AAAmD;AAA1D;AACO;AAAiD;AAAxD;AACO;;AAAiE;AAAxE;AAGO;;AAAoD;AAA3D;AACO;;AAAmD;AAA1D;AAZF;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAibG;;AAAA;AAAA;AAAA;;AAAA;AAjbH;;;AAAA;AAibG;;;AAAA;;AAhBA;;AAAA;AAAA;AAAA;;AAAA;AAjaH;;;AAAA;AAiaG;;;AAAA;;AAtBA;;AAAA;AAAA;AAAA;;AAAA;AA3YH;;;AAAA;AAAA;;AA2YG;;;AAAA;;AA5BA;;AAAA;AAAA;AAAA;;AAAA;AA/WH;;;AAAA;AA+WG;;;AAAA;;AArBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AApBA;;AAAA;AAAA;AAAA;;AAAA;AAtUH;;;AAAA;AAAA;;AAsUG;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAbA;;AAAA;AAAA;AAAA;;AAAA;AAzTH;;;AAAA;AAAA;;AAyTG;;;AAAA;;AAdA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;AAlSH;;;AAAA;AAAA;;AAkSG;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AApBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAxBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AA/CA;;AAAA;AAAA;AAAA;;AAAA;AAvMH;;;AAAA;AAuMG;;;AAAA;;AAjDA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAtBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AA/BA;;AAAA;AAAA;AAAA;;AAAA;AAjGH;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAiGG;;;AAAA;;AA3DD;;AAAA;AAAA;AAAA;;AAAA;AAtCF;;;AAAA;AAAA;;AAAA;;;AAsCE;;;AAAA;AAAA;;AAnBA;;AAAA;AAAA;AAAA;;AAAA;AAnBF;;;AAAA;AAAA;;AAmBE;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAnBF;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAmBE;;;AAL6D;;AAMrD;;AANqD;AAMrD;AAEM;AAAA;;AAAZ;;;AACiB;;AAAA;AAAA;AAAf;AAAA;AAEO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AAAA;AAaJ;;;AAxB6D;;AAAA;;AAAA;AAyB3D;;AAAA;;;;AAMF;;;AAC6B;;AAArB;AAzCD;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAOA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAuCc;AAAf;AAAA;;;AA/CC;AAAA;AAAA;AAAA;AA+CD;;;AAE6B;;AAAA;;AAAA;AAAA;;AAAA;AAAzB;;AAAA;AAAA;;AAAwB;AA1C3B;AAAA;;AAAA;AAAA;AA8CG;;AAAuB;AArD1B;AAAA;AAAA;AAAA;AAyDG;;AAAA;AAAyB;AArD5B;AAAA;;AAAA;AAAA;AAuDqC;AAvDrC;;AAuDH;AAAA;AAG0C;AAAA;;AAAA;AAAd;;AAAA;AA7DzB;;AA6DH;AAAA;AA3DG;AAAA;AAAA;AAAA;AA8DqB;AAAA;AA9DrB;AA8DH;AAAA;;AAOJ;;;;;;AACQ;;AAAY;;;AAAZ;AAEQ;AAAa;AAAA;AAA3B;;;AACS;AAAP;;AAAA;AAxEG;AAAA;;AAAA;AAAA;AA6EC;;AAA2B;;AAAW;AAAtC;AAAA;;AAGA;;AAAA;;AAAsB;AAAtB;AAAA;;AACyB;AAAA;;;AAA+B;;AAAA;;AAAA;AAE9D;;AAAA;AAF6F;;;;AAQ/F;;;AA/FO;AAAA;AAAA;AAAA;AAwGE;AAAP;AAGW;;AAAkB;;AAAtB;AAAP;AA3GK;AA8GL;;AAAA;AA7GK;AA8GL;;AAAA;AA7GK;AA8GoB;AAAzB;AA7GK;;AA8G8B;;AAAnC;AA7GK;;AA8GL;;AAAA;AA7GK;AA8GmB;AAAxB;AA7GK;;AA8GmC;AAAxC;AA3GK;;AA8GL;;AAAA;AA7GK;;AA8GL;;AAAA;;AAMF;;;AA7HO;AAAA;AAAA;AAAA;AAiIM;;AAAkB;;AAAtB;AAAA;;;AAA4C;;AAAJ;;AAAA;AAAxC;;;;AAAP;AAlIK;AAAA;AAAA;AAAA;AAsIL;AAE0B;;;;;AACT;;;;;AAHjB;;;AAAA;;;AAAA;;;;;;AAcF;;;AApJO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAwJL;AAGc;;AAAc;;AAArB;AAAP;AAGsC;AAAtB;;AAAA;AAAA;AAAA;AAAA;AACwB;AAAjC;AAAP;AADsC;AAEvB;;AAAyB;;AAAjC;AAAP;AAFsC;AAGvB;;AAAA;AAAA;;AAAf;AAHsC;AAIvB;;AAAR;AAAP;AA9JK;AAAA;;AAAA;AAAA;AAmKqB;;AAApB;AAGY;;;AAAZ;;AAGQ;AAAa;AAA3B;;;AACS;;AAAA;;AAAA;AAAP;AAEmD;;AAAxB;AAA3B;;AAAA;AAAA;;;;;;AAI+D;AAAb;AAAa;AAAvB;;AAAA;AAAA;;AAAA;AAAjB;AAAzB;;AACkD;;AAAxB;AAA1B;;AAG+D;AAAb;AAAa;AAlL1D;AAAA;;AAAA;AAAA;AAkLmC;AAAjB;AAAvB;;AAGA;;AAAA;AAAA;;;AAAA;AAzLK;AAAA;AAAA;AAAA;AA4LoB;AA5LpB;AA4LL;AAAA;;AAOF;;;AAE4B;;AAApB;AACY;;;AAAZ;AAGW;AAAa;AAAA;;AAA9B;AACO;;AAAA;;AAAA;AAAP;AACA;;AAAA;AAII;;AAAA;AAAJ;;;AACQ;;AAAA;;AAAyB;AA9M5B;AAAA;;AAAA;AAAA;AAgNI;AAAP;AAIwC;;AAAA;;AAAA;AAAjB;AAAzB;;AAAA;AAAA;;AAG+D;AAAb;AAAa;AArN1D;AAAA;;AAAA;AAAA;AAqNmC;AAAjB;AAAvB;;AAGA;;AAAA;AAAA;;AAAA;;;AAAA;AA5NK;AAAA;AAAA;AAAA;AA+NoB;;AAAA;AA/NpB;AA+NL;AAAA;AAjOK;AAAA;AAAA;AAAA;AAqOL;;;;;;;;;AAAA;;;AAKS;;;;;AALT;;AApOK;AAAA;AAAA;AAAA;AAuPM;;AAAJ;AAAP;AAGc;;AAAc;;AAArB;AAAP;AA3PK;AAAA;AAAA;AAAA;AA+PiC;AAAtB;;AAAA;AAAA;AAAA;AAAA;AACwB;AAAjC;AAAP;AADsC;AAEvB;;AAAyB;;AAAjC;AAAP;AAFsC;AAGvB;;AAAf;AAAA;AAHsC;AAIvB;;AAAR;;AAAA;AAAP;AA9PK;AAAA;AAAA;AAAA;AAiQmB;AAjQnB;AAiQL;AAAA;;AAMF;;;AA1QO;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AA8QL;;;AACS;AAAP;AAAA;AAxQG;AAAA;;AAAA;AAAA;AA4QyB;;AAAA;AAGO;;AAAhB;AAAf;;AAAc;AAEpB;AAAA;AAMF;;;AAES;;AAAA;;;AAAP;AAjSK;AAAA;AAAA;AAAA;AA4SM;;AAAJ;AAAP;AAGA;;;;AAOF;;;AAtTO;AAAA;AAAA;AAAA;AA0TM;;AAAJ;AAAP;AA1TK;AA6TL;;AAAA;;AAMF;;;AAEQ;;AAAY;;;AACZ;;AAAiB;;;AAGE;;AAAb;AAAa;AACE;;AAAf;AAAe;AACD;;AAAd;;AAAc;AACK;;AAAnB;;AAAmB;AAER;;AAAX;;AAAW;AALE;;AAAA;AACE;;AAAA;AADF;AAEC;;AAAA;AAFD;AAGM;;AAAA;AAHN;AAIvB;;AAAA;AAJuB;AAKF;AAAA;AALE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAQzB;AAQmB;;;AA1Vd;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAOA;AAAA;;AAAA;AAAA;AANA;AAAA;;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AANA;;AAAA;AAEA;;AAAA;AAAA;AA6VH;;AAAA;AA7VG;AACA;;AAAA;AADA;AAQA;;AAAA;AARA;AAEA;;AAAA;AAFA;AAGA;;AAAA;AAHA;AAIA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAqWL;AAMF;;;AA5WO;AAAA;AAAA;AAAA;AAgXM;;AAAJ;;AAAA;AAAP;AA5WK;AAAA;AAAA;AAAA;AA+WE;;AAAA;AAAP;AA/WK;AAAA;AAAA;AAAA;AAkXmB;;AAAA;AAlXnB;AAkXL;AAAA;AAvXK;AAAA;AAAA;AAAA;AA2XL;;;;;;;;;AAAA;;;AAKS;;;;;AALT;;AAcF;;;;AAxYO;AAAA;AAAA;AAAA;AA8YM;;AAAJ;;AAAA;AAAA;;;AAA+B;;AAAJ;;AAAA;AAA3B;;;;AAAP;AAGM;;AAAY;;;AACD;AAAa;AAAvB;AAAP;AAvY2D;;AA0YrD;;AA1YqD;AA0YrD;AAAA;;AACM;AAAA;;AAAZ;;;AACU;;AAAA;;;;;;;AAOZ;;;AA9ZO;AAAA;AAAA;AAAA;AAkaM;;AAAJ;AAAP;AAGA;;;AA7ZK;;AAgaL;;AAAA;;AAMF;;;AA9aO;AAAA;AAAA;AAAA;AAkbM;;AAAJ;AAAP;AAGA;;;AA5aK;;AA+aL;;AAAA;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 4 8"
    },
    "7": {
      "op": "bytecblock \"adminAddress\" \"asset\" \"totalStaked\" \"rewardPool\" \"accumulatedRewardsPerShare\" \"lastRewardTime\" \"minimumStake\" \"weeklyRewards\" \"rewardPeriod\" 0x151f7c75 \"stakers\""
    },
    "146": {
      "op": "txn ApplicationID",
      "defined_out": [
        "reinterpret_bool%0#0"
      ],
      "stack_out": [
        "reinterpret_bool%0#0"
      ]
    },
    "148": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "151": {
      "op": "bytec_1 // \"asset\"",
      "defined_out": [
        "\"asset\""
      ],
      "stack_out": [
        "\"asset\""
      ]
    },
    "152": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"asset\"",
        "0"
      ],
      "stack_out": [
        "\"asset\"",
        "0"
      ]
    },
    "153": {
      "op": "app_global_put",
      "stack_out": []
    },
    "154": {
      "op": "bytec_0 // \"adminAddress\"",
      "defined_out": [
        "\"adminAddress\""
      ],
      "stack_out": [
        "\"adminAddress\""
      ]
    },
    "155": {
      "op": "global ZeroAddress",
      "defined_out": [
        "\"adminAddress\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "\"adminAddress\"",
        "new_state_value%0#0"
      ]
    },
    "157": {
      "op": "app_global_put",
      "stack_out": []
    },
    "158": {
      "op": "bytec_2 // \"totalStaked\"",
      "defined_out": [
        "\"totalStaked\""
      ],
      "stack_out": [
        "\"totalStaked\""
      ]
    },
    "159": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"totalStaked\"",
        "0"
      ]
    },
    "160": {
      "op": "app_global_put",
      "stack_out": []
    },
    "161": {
      "op": "bytec 5 // \"lastRewardTime\"",
      "defined_out": [
        "\"lastRewardTime\""
      ],
      "stack_out": [
        "\"lastRewardTime\""
      ]
    },
    "163": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"lastRewardTime\"",
        "0"
      ]
    },
    "164": {
      "op": "app_global_put",
      "stack_out": []
    },
    "165": {
      "op": "bytec 6 // \"minimumStake\"",
      "defined_out": [
        "\"minimumStake\""
      ],
      "stack_out": [
        "\"minimumStake\""
      ]
    },
    "167": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"minimumStake\"",
        "0"
      ]
    },
    "168": {
      "op": "app_global_put",
      "stack_out": []
    },
    "169": {
      "op": "bytec_3 // \"rewardPool\"",
      "defined_out": [
        "\"rewardPool\""
      ],
      "stack_out": [
        "\"rewardPool\""
      ]
    },
    "170": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"rewardPool\"",
        "0"
      ]
    },
    "171": {
      "op": "app_global_put",
      "stack_out": []
    },
    "172": {
      "op": "bytec 4 // \"accumulatedRewardsPerShare\"",
      "defined_out": [
        "\"accumulatedRewardsPerShare\""
      ],
      "stack_out": [
        "\"accumulatedRewardsPerShare\""
      ]
    },
    "174": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"accumulatedRewardsPerShare\"",
        "0"
      ]
    },
    "175": {
      "op": "app_global_put",
      "stack_out": []
    },
    "176": {
      "op": "bytec 7 // \"weeklyRewards\"",
      "defined_out": [
        "\"weeklyRewards\""
      ],
      "stack_out": [
        "\"weeklyRewards\""
      ]
    },
    "178": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"weeklyRewards\"",
        "0"
      ]
    },
    "179": {
      "op": "app_global_put",
      "stack_out": []
    },
    "180": {
      "op": "bytec 8 // \"rewardPeriod\"",
      "defined_out": [
        "\"rewardPeriod\""
      ],
      "stack_out": [
        "\"rewardPeriod\""
      ]
    },
    "182": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"rewardPeriod\"",
        "0"
      ]
    },
    "183": {
      "op": "app_global_put",
      "stack_out": []
    },
    "184": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "186": {
      "op": "bz main_bare_routing@24",
      "stack_out": []
    },
    "189": {
      "op": "pushbytess 0x5d789521 0x080f6ecd 0x667c5d30 0x9ffd3e53 0x0890bd58 0x21f1ddff 0xb3b70146 0xbf8b766d 0x183838e9 0x21b1b022 0x82ab1ec4 0x15766b09 0xbfe31564 0xce963b1d 0xdc9a2a05 0x1e2b52ab 0x1b874ad6 // method \"getUserStakeInfo(account)(uint64,uint64,uint64,uint64,uint64)\", method \"storeUserStakeInfo(account,(uint64,uint64,uint64,uint64,uint64))void\", method \"initialize(asset,account,uint64,uint64,uint64)void\", method \"optInToAsset()void\", method \"stake()void\", method \"withdraw(uint64)void\", method \"addRewards()void\", method \"getCurrentAPY()uint64\", method \"getPendingRewards(account)uint64\", method \"triggerRewardDistribution()void\", method \"updateAdmin(account)void\", method \"getUserStats(account)uint64[]\", method \"getContractStats()uint64[]\", method \"emergencyWithdrawRewards(uint64)void\", method \"deleteUserBox(account)void\", method \"updateWeeklyRewards(uint64)void\", method \"updateRewardPeriod(uint64)void\"",
      "defined_out": [
        "Method(addRewards()void)",
        "Method(deleteUserBox(account)void)",
        "Method(emergencyWithdrawRewards(uint64)void)",
        "Method(getContractStats()uint64[])",
        "Method(getCurrentAPY()uint64)",
        "Method(getPendingRewards(account)uint64)",
        "Method(getUserStakeInfo(account)(uint64,uint64,uint64,uint64,uint64))",
        "Method(getUserStats(account)uint64[])",
        "Method(initialize(asset,account,uint64,uint64,uint64)void)",
        "Method(optInToAsset()void)",
        "Method(stake()void)",
        "Method(storeUserStakeInfo(account,(uint64,uint64,uint64,uint64,uint64))void)",
        "Method(triggerRewardDistribution()void)",
        "Method(updateAdmin(account)void)",
        "Method(updateRewardPeriod(uint64)void)",
        "Method(updateWeeklyRewards(uint64)void)",
        "Method(withdraw(uint64)void)"
      ],
      "stack_out": [
        "Method(getUserStakeInfo(account)(uint64,uint64,uint64,uint64,uint64))",
        "Method(storeUserStakeInfo(account,(uint64,uint64,uint64,uint64,uint64))void)",
        "Method(initialize(asset,account,uint64,uint64,uint64)void)",
        "Method(optInToAsset()void)",
        "Method(stake()void)",
        "Method(withdraw(uint64)void)",
        "Method(addRewards()void)",
        "Method(getCurrentAPY()uint64)",
        "Method(getPendingRewards(account)uint64)",
        "Method(triggerRewardDistribution()void)",
        "Method(updateAdmin(account)void)",
        "Method(getUserStats(account)uint64[])",
        "Method(getContractStats()uint64[])",
        "Method(emergencyWithdrawRewards(uint64)void)",
        "Method(deleteUserBox(account)void)",
        "Method(updateWeeklyRewards(uint64)void)",
        "Method(updateRewardPeriod(uint64)void)"
      ]
    },
    "276": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(addRewards()void)",
        "Method(deleteUserBox(account)void)",
        "Method(emergencyWithdrawRewards(uint64)void)",
        "Method(getContractStats()uint64[])",
        "Method(getCurrentAPY()uint64)",
        "Method(getPendingRewards(account)uint64)",
        "Method(getUserStakeInfo(account)(uint64,uint64,uint64,uint64,uint64))",
        "Method(getUserStats(account)uint64[])",
        "Method(initialize(asset,account,uint64,uint64,uint64)void)",
        "Method(optInToAsset()void)",
        "Method(stake()void)",
        "Method(storeUserStakeInfo(account,(uint64,uint64,uint64,uint64,uint64))void)",
        "Method(triggerRewardDistribution()void)",
        "Method(updateAdmin(account)void)",
        "Method(updateRewardPeriod(uint64)void)",
        "Method(updateWeeklyRewards(uint64)void)",
        "Method(withdraw(uint64)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(getUserStakeInfo(account)(uint64,uint64,uint64,uint64,uint64))",
        "Method(storeUserStakeInfo(account,(uint64,uint64,uint64,uint64,uint64))void)",
        "Method(initialize(asset,account,uint64,uint64,uint64)void)",
        "Method(optInToAsset()void)",
        "Method(stake()void)",
        "Method(withdraw(uint64)void)",
        "Method(addRewards()void)",
        "Method(getCurrentAPY()uint64)",
        "Method(getPendingRewards(account)uint64)",
        "Method(triggerRewardDistribution()void)",
        "Method(updateAdmin(account)void)",
        "Method(getUserStats(account)uint64[])",
        "Method(getContractStats()uint64[])",
        "Method(emergencyWithdrawRewards(uint64)void)",
        "Method(deleteUserBox(account)void)",
        "Method(updateWeeklyRewards(uint64)void)",
        "Method(updateRewardPeriod(uint64)void)",
        "tmp%2#0"
      ]
    },
    "279": {
      "op": "match main_getUserStakeInfo_route@5 main_storeUserStakeInfo_route@6 main_initialize_route@7 main_optInToAsset_route@8 main_stake_route@9 main_withdraw_route@10 main_addRewards_route@11 main_getCurrentAPY_route@12 main_getPendingRewards_route@13 main_triggerRewardDistribution_route@14 main_updateAdmin_route@15 main_getUserStats_route@16 main_getContractStats_route@17 main_emergencyWithdrawRewards_route@18 main_deleteUserBox_route@19 main_updateWeeklyRewards_route@20 main_updateRewardPeriod_route@21",
      "stack_out": []
    },
    "315": {
      "block": "main_after_if_else@28",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "316": {
      "op": "return",
      "stack_out": []
    },
    "317": {
      "block": "main_updateRewardPeriod_route@21",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%97#0"
      ],
      "stack_out": [
        "tmp%97#0"
      ]
    },
    "319": {
      "op": "!",
      "defined_out": [
        "tmp%98#0"
      ],
      "stack_out": [
        "tmp%98#0"
      ]
    },
    "320": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "321": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%99#0"
      ],
      "stack_out": [
        "tmp%99#0"
      ]
    },
    "323": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "324": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%6#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%6#0"
      ]
    },
    "327": {
      "op": "btoi",
      "defined_out": [
        "tmp%101#0"
      ],
      "stack_out": [
        "tmp%101#0"
      ]
    },
    "328": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.updateRewardPeriod",
      "op": "callsub updateRewardPeriod",
      "stack_out": []
    },
    "331": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "332": {
      "op": "return",
      "stack_out": []
    },
    "333": {
      "block": "main_updateWeeklyRewards_route@20",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%92#0"
      ],
      "stack_out": [
        "tmp%92#0"
      ]
    },
    "335": {
      "op": "!",
      "defined_out": [
        "tmp%93#0"
      ],
      "stack_out": [
        "tmp%93#0"
      ]
    },
    "336": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "337": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%94#0"
      ],
      "stack_out": [
        "tmp%94#0"
      ]
    },
    "339": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "340": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%5#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%5#0"
      ]
    },
    "343": {
      "op": "btoi",
      "defined_out": [
        "tmp%96#0"
      ],
      "stack_out": [
        "tmp%96#0"
      ]
    },
    "344": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.updateWeeklyRewards",
      "op": "callsub updateWeeklyRewards",
      "stack_out": []
    },
    "347": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "348": {
      "op": "return",
      "stack_out": []
    },
    "349": {
      "block": "main_deleteUserBox_route@19",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%86#0"
      ],
      "stack_out": [
        "tmp%86#0"
      ]
    },
    "351": {
      "op": "!",
      "defined_out": [
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%87#0"
      ]
    },
    "352": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "353": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%88#0"
      ],
      "stack_out": [
        "tmp%88#0"
      ]
    },
    "355": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "356": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%7#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%7#0"
      ]
    },
    "359": {
      "op": "btoi",
      "defined_out": [
        "tmp%90#0"
      ],
      "stack_out": [
        "tmp%90#0"
      ]
    },
    "360": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%91#0"
      ],
      "stack_out": [
        "tmp%91#0"
      ]
    },
    "362": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.deleteUserBox",
      "op": "callsub deleteUserBox",
      "stack_out": []
    },
    "365": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "366": {
      "op": "return",
      "stack_out": []
    },
    "367": {
      "block": "main_emergencyWithdrawRewards_route@18",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%81#0"
      ],
      "stack_out": [
        "tmp%81#0"
      ]
    },
    "369": {
      "op": "!",
      "defined_out": [
        "tmp%82#0"
      ],
      "stack_out": [
        "tmp%82#0"
      ]
    },
    "370": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "371": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%83#0"
      ],
      "stack_out": [
        "tmp%83#0"
      ]
    },
    "373": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "374": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%4#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%4#0"
      ]
    },
    "377": {
      "op": "btoi",
      "defined_out": [
        "tmp%85#0"
      ],
      "stack_out": [
        "tmp%85#0"
      ]
    },
    "378": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.emergencyWithdrawRewards",
      "op": "callsub emergencyWithdrawRewards",
      "stack_out": []
    },
    "381": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "382": {
      "op": "return",
      "stack_out": []
    },
    "383": {
      "block": "main_getContractStats_route@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%75#0"
      ]
    },
    "385": {
      "op": "!",
      "defined_out": [
        "tmp%76#0"
      ],
      "stack_out": [
        "tmp%76#0"
      ]
    },
    "386": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "387": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%77#0"
      ]
    },
    "389": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "390": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.getContractStats",
      "op": "callsub getContractStats",
      "defined_out": [
        "tmp%79#0"
      ],
      "stack_out": [
        "tmp%79#0"
      ]
    },
    "393": {
      "op": "bytec 9 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%79#0"
      ],
      "stack_out": [
        "tmp%79#0",
        "0x151f7c75"
      ]
    },
    "395": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%79#0"
      ]
    },
    "396": {
      "op": "concat",
      "defined_out": [
        "tmp%80#0"
      ],
      "stack_out": [
        "tmp%80#0"
      ]
    },
    "397": {
      "op": "log",
      "stack_out": []
    },
    "398": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "399": {
      "op": "return",
      "stack_out": []
    },
    "400": {
      "block": "main_getUserStats_route@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%67#0"
      ]
    },
    "402": {
      "op": "!",
      "defined_out": [
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0"
      ]
    },
    "403": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "404": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%69#0"
      ]
    },
    "406": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "407": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%6#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%6#0"
      ]
    },
    "410": {
      "op": "btoi",
      "defined_out": [
        "tmp%71#0"
      ],
      "stack_out": [
        "tmp%71#0"
      ]
    },
    "411": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0"
      ]
    },
    "413": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.getUserStats",
      "op": "callsub getUserStats",
      "defined_out": [
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%73#0"
      ]
    },
    "416": {
      "op": "bytec 9 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%73#0",
        "0x151f7c75"
      ]
    },
    "418": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%73#0"
      ]
    },
    "419": {
      "op": "concat",
      "defined_out": [
        "tmp%74#0"
      ],
      "stack_out": [
        "tmp%74#0"
      ]
    },
    "420": {
      "op": "log",
      "stack_out": []
    },
    "421": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "422": {
      "op": "return",
      "stack_out": []
    },
    "423": {
      "block": "main_updateAdmin_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "425": {
      "op": "!",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "426": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "427": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0"
      ]
    },
    "429": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "430": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%5#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%5#0"
      ]
    },
    "433": {
      "op": "btoi",
      "defined_out": [
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%65#0"
      ]
    },
    "434": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0"
      ]
    },
    "436": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.updateAdmin",
      "op": "callsub updateAdmin",
      "stack_out": []
    },
    "439": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "440": {
      "op": "return",
      "stack_out": []
    },
    "441": {
      "block": "main_triggerRewardDistribution_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "443": {
      "op": "!",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "444": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "445": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0"
      ]
    },
    "447": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "448": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.triggerRewardDistribution",
      "op": "callsub triggerRewardDistribution"
    },
    "451": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "452": {
      "op": "return",
      "stack_out": []
    },
    "453": {
      "block": "main_getPendingRewards_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "455": {
      "op": "!",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "456": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "457": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%52#0"
      ],
      "stack_out": [
        "tmp%52#0"
      ]
    },
    "459": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "460": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%4#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%4#0"
      ]
    },
    "463": {
      "op": "btoi",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "464": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "466": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.getPendingRewards",
      "op": "callsub getPendingRewards",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "469": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0"
      ]
    },
    "470": {
      "op": "bytec 9 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "0x151f7c75"
      ]
    },
    "472": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ]
    },
    "473": {
      "op": "concat",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "474": {
      "op": "log",
      "stack_out": []
    },
    "475": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "476": {
      "op": "return",
      "stack_out": []
    },
    "477": {
      "block": "main_getCurrentAPY_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "479": {
      "op": "!",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "480": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "481": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "483": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "484": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.getCurrentAPY",
      "op": "callsub getCurrentAPY",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "487": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "488": {
      "op": "bytec 9 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "490": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "491": {
      "op": "concat",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "492": {
      "op": "log",
      "stack_out": []
    },
    "493": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "494": {
      "op": "return",
      "stack_out": []
    },
    "495": {
      "block": "main_addRewards_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "497": {
      "op": "!",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "498": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "499": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "501": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "502": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.addRewards",
      "op": "callsub addRewards"
    },
    "505": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "506": {
      "op": "return",
      "stack_out": []
    },
    "507": {
      "block": "main_withdraw_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "509": {
      "op": "!",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "510": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "511": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "513": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "514": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "517": {
      "op": "btoi",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "518": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.withdraw",
      "op": "callsub withdraw",
      "stack_out": []
    },
    "521": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "522": {
      "op": "return",
      "stack_out": []
    },
    "523": {
      "block": "main_stake_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "525": {
      "op": "!",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "526": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "527": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "529": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "530": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.stake",
      "op": "callsub stake"
    },
    "533": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "534": {
      "op": "return",
      "stack_out": []
    },
    "535": {
      "block": "main_optInToAsset_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "537": {
      "op": "!",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "538": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "539": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "541": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "542": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.optInToAsset",
      "op": "callsub optInToAsset"
    },
    "545": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "546": {
      "op": "return",
      "stack_out": []
    },
    "547": {
      "block": "main_initialize_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "549": {
      "op": "!",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "550": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "551": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "553": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "554": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%2#0"
      ]
    },
    "557": {
      "op": "btoi",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "558": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "560": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%3#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "reinterpret_bytes[1]%3#0"
      ]
    },
    "563": {
      "op": "btoi",
      "defined_out": [
        "tmp%22#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "tmp%23#0"
      ]
    },
    "564": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%22#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "tmp%24#0"
      ]
    },
    "566": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%22#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "tmp%24#0",
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "569": {
      "op": "btoi",
      "defined_out": [
        "tmp%22#0",
        "tmp%24#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "tmp%24#0",
        "tmp%25#0"
      ]
    },
    "570": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[8]%1#0",
        "tmp%22#0",
        "tmp%24#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "tmp%24#0",
        "tmp%25#0",
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "573": {
      "op": "btoi",
      "defined_out": [
        "tmp%22#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%26#0"
      ]
    },
    "574": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "reinterpret_bytes[8]%2#0",
        "tmp%22#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%26#0",
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "577": {
      "op": "btoi",
      "defined_out": [
        "tmp%22#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%26#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%26#0",
        "tmp%27#0"
      ]
    },
    "578": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.initialize",
      "op": "callsub initialize",
      "stack_out": []
    },
    "581": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "582": {
      "op": "return",
      "stack_out": []
    },
    "583": {
      "block": "main_storeUserStakeInfo_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "585": {
      "op": "!",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "586": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "587": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "589": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "590": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%1#0"
      ]
    },
    "593": {
      "op": "btoi",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "594": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "596": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[40]%0#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "reinterpret_bytes[40]%0#0"
      ]
    },
    "599": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.storeUserStakeInfo",
      "op": "callsub storeUserStakeInfo",
      "defined_out": [
        "storeUserStakeInfo%0#0"
      ],
      "stack_out": [
        "storeUserStakeInfo%0#0"
      ]
    },
    "602": {
      "op": "pop",
      "stack_out": []
    },
    "603": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "604": {
      "op": "return",
      "stack_out": []
    },
    "605": {
      "block": "main_getUserStakeInfo_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "607": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "608": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "609": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "611": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "612": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "615": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "616": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "618": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.getUserStakeInfo",
      "op": "callsub getUserStakeInfo",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "621": {
      "op": "bytec 9 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "0x151f7c75"
      ]
    },
    "623": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%9#0"
      ]
    },
    "624": {
      "op": "concat",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "625": {
      "op": "log",
      "stack_out": []
    },
    "626": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "627": {
      "op": "return",
      "stack_out": []
    },
    "628": {
      "block": "main_bare_routing@24",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%102#0"
      ],
      "stack_out": [
        "tmp%102#0"
      ]
    },
    "630": {
      "op": "bnz main_after_if_else@28",
      "stack_out": []
    },
    "633": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%103#0"
      ],
      "stack_out": [
        "tmp%103#0"
      ]
    },
    "635": {
      "op": "!",
      "defined_out": [
        "tmp%104#0"
      ],
      "stack_out": [
        "tmp%104#0"
      ]
    },
    "636": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "637": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "638": {
      "op": "return",
      "stack_out": []
    },
    "639": {
      "subroutine": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.getUserStakeInfo",
      "params": {
        "userAddress#0": "bytes"
      },
      "block": "getUserStakeInfo",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "642": {
      "op": "bytec 10 // \"stakers\"",
      "defined_out": [
        "\"stakers\""
      ],
      "stack_out": [
        "\"stakers\""
      ]
    },
    "644": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"stakers\"",
        "userAddress#0 (copy)"
      ],
      "stack_out": [
        "\"stakers\"",
        "userAddress#0 (copy)"
      ]
    },
    "646": {
      "op": "concat",
      "defined_out": [
        "userBox#0"
      ],
      "stack_out": [
        "userBox#0"
      ]
    },
    "647": {
      "op": "dup",
      "defined_out": [
        "userBox#0"
      ],
      "stack_out": [
        "userBox#0",
        "userBox#0"
      ]
    },
    "648": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "userBox#0"
      ],
      "stack_out": [
        "userBox#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "649": {
      "op": "bury 1",
      "stack_out": [
        "userBox#0",
        "maybe_exists%0#0"
      ]
    },
    "651": {
      "op": "bz getUserStakeInfo_else_body@2",
      "stack_out": [
        "userBox#0"
      ]
    },
    "654": {
      "op": "frame_dig 0",
      "stack_out": [
        "userBox#0",
        "userBox#0"
      ]
    },
    "656": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "userBox#0"
      ],
      "stack_out": [
        "userBox#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "657": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "userBox#0",
        "maybe_value%1#0"
      ]
    },
    "658": {
      "op": "swap"
    },
    "659": {
      "retsub": true,
      "op": "retsub"
    },
    "660": {
      "block": "getUserStakeInfo_else_body@2",
      "stack_in": [
        "userBox#0"
      ],
      "op": "pushbytes 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "defined_out": [
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000"
      ],
      "stack_out": [
        "userBox#0",
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000"
      ]
    },
    "702": {
      "op": "swap"
    },
    "703": {
      "retsub": true,
      "op": "retsub"
    },
    "704": {
      "subroutine": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.storeUserStakeInfo",
      "params": {
        "userAddress#0": "bytes",
        "stakeInfo#0": "bytes"
      },
      "block": "storeUserStakeInfo",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "707": {
      "op": "bytec 10 // \"stakers\"",
      "defined_out": [
        "\"stakers\""
      ],
      "stack_out": [
        "\"stakers\""
      ]
    },
    "709": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"stakers\"",
        "userAddress#0 (copy)"
      ],
      "stack_out": [
        "\"stakers\"",
        "userAddress#0 (copy)"
      ]
    },
    "711": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "712": {
      "op": "frame_dig -1",
      "defined_out": [
        "stakeInfo#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "stakeInfo#0 (copy)"
      ]
    },
    "714": {
      "op": "box_put",
      "stack_out": []
    },
    "715": {
      "op": "frame_dig -1",
      "stack_out": [
        "stakeInfo#0 (copy)"
      ]
    },
    "717": {
      "retsub": true,
      "op": "retsub"
    },
    "718": {
      "subroutine": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.updateRewards",
      "params": {},
      "block": "updateRewards",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "721": {
      "op": "global LatestTimestamp"
    },
    "723": {
      "op": "dup"
    },
    "724": {
      "op": "intc_0 // 0"
    },
    "725": {
      "op": "bytec 5 // \"lastRewardTime\"",
      "defined_out": [
        "\"lastRewardTime\"",
        "0",
        "currentTime#0"
      ],
      "stack_out": [
        "currentTime#0",
        "currentTime#0",
        "0",
        "\"lastRewardTime\""
      ]
    },
    "727": {
      "op": "app_global_get_ex",
      "defined_out": [
        "currentTime#0",
        "lastReward#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "currentTime#0",
        "currentTime#0",
        "lastReward#0",
        "maybe_exists%0#0"
      ]
    },
    "728": {
      "op": "swap",
      "stack_out": [
        "currentTime#0",
        "currentTime#0",
        "maybe_exists%0#0",
        "lastReward#0"
      ]
    },
    "729": {
      "op": "dup",
      "stack_out": [
        "currentTime#0",
        "currentTime#0",
        "maybe_exists%0#0",
        "lastReward#0",
        "lastReward#0 (copy)"
      ]
    },
    "730": {
      "op": "cover 2",
      "stack_out": [
        "currentTime#0",
        "currentTime#0",
        "lastReward#0",
        "maybe_exists%0#0",
        "lastReward#0"
      ]
    },
    "732": {
      "op": "cover 3",
      "defined_out": [
        "currentTime#0",
        "lastReward#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "currentTime#0",
        "lastReward#0",
        "maybe_exists%0#0"
      ]
    },
    "734": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "currentTime#0",
        "lastReward#0"
      ]
    },
    "735": {
      "op": "intc_0 // 0",
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "currentTime#0",
        "lastReward#0",
        "0"
      ]
    },
    "736": {
      "op": "bytec 8 // \"rewardPeriod\"",
      "defined_out": [
        "\"rewardPeriod\"",
        "0",
        "currentTime#0",
        "lastReward#0"
      ],
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "currentTime#0",
        "lastReward#0",
        "0",
        "\"rewardPeriod\""
      ]
    },
    "738": {
      "op": "app_global_get_ex",
      "defined_out": [
        "currentTime#0",
        "lastReward#0",
        "maybe_exists%1#0",
        "rewardPeriod#0"
      ],
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "maybe_exists%1#0"
      ]
    },
    "739": {
      "op": "swap",
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "currentTime#0",
        "lastReward#0",
        "maybe_exists%1#0",
        "rewardPeriod#0"
      ]
    },
    "740": {
      "op": "dup",
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "currentTime#0",
        "lastReward#0",
        "maybe_exists%1#0",
        "rewardPeriod#0",
        "rewardPeriod#0 (copy)"
      ]
    },
    "741": {
      "op": "cover 2",
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "maybe_exists%1#0",
        "rewardPeriod#0"
      ]
    },
    "743": {
      "op": "cover 4",
      "defined_out": [
        "currentTime#0",
        "lastReward#0",
        "maybe_exists%1#0",
        "rewardPeriod#0"
      ],
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "maybe_exists%1#0"
      ]
    },
    "745": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0"
      ]
    },
    "746": {
      "op": "+",
      "defined_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "currentTime#0",
        "tmp%0#0"
      ]
    },
    "747": {
      "op": ">=",
      "defined_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "tmp%1#0"
      ]
    },
    "748": {
      "op": "bz updateRewards_after_if_else@3",
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0"
      ]
    },
    "751": {
      "op": "intc_0 // 0",
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "0"
      ]
    },
    "752": {
      "op": "bytec_2 // \"totalStaked\"",
      "defined_out": [
        "\"totalStaked\"",
        "0",
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0"
      ],
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "0",
        "\"totalStaked\""
      ]
    },
    "753": {
      "op": "app_global_get_ex",
      "defined_out": [
        "currentTime#0",
        "lastReward#0",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "rewardPeriod#0"
      ],
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "754": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "maybe_value%2#0"
      ]
    },
    "755": {
      "op": "bz updateRewards_after_if_else@3",
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0"
      ]
    },
    "758": {
      "op": "frame_dig 0",
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "currentTime#0"
      ]
    },
    "760": {
      "op": "frame_dig 1",
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "currentTime#0",
        "lastReward#0"
      ]
    },
    "762": {
      "op": "dup",
      "defined_out": [
        "currentTime#0",
        "lastReward#0",
        "lastReward#0 (copy)",
        "rewardPeriod#0"
      ],
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "currentTime#0",
        "lastReward#0 (copy)",
        "lastReward#0 (copy)"
      ]
    },
    "763": {
      "op": "cover 2",
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "lastReward#0",
        "currentTime#0",
        "lastReward#0 (copy)"
      ]
    },
    "765": {
      "op": "-",
      "defined_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "lastReward#0",
        "tmp%3#0"
      ]
    },
    "766": {
      "op": "frame_dig 2",
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "lastReward#0",
        "tmp%3#0",
        "rewardPeriod#0"
      ]
    },
    "768": {
      "op": "dup",
      "defined_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "rewardPeriod#0 (copy)",
        "tmp%3#0"
      ],
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "lastReward#0",
        "tmp%3#0",
        "rewardPeriod#0 (copy)",
        "rewardPeriod#0 (copy)"
      ]
    },
    "769": {
      "op": "cover 2",
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "lastReward#0",
        "rewardPeriod#0",
        "tmp%3#0",
        "rewardPeriod#0 (copy)"
      ]
    },
    "771": {
      "op": "/",
      "defined_out": [
        "currentTime#0",
        "lastReward#0",
        "periodsPassed#0",
        "rewardPeriod#0"
      ],
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "lastReward#0",
        "rewardPeriod#0",
        "periodsPassed#0"
      ]
    },
    "772": {
      "op": "intc_0 // 0",
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "lastReward#0",
        "rewardPeriod#0",
        "periodsPassed#0",
        "0"
      ]
    },
    "773": {
      "op": "bytec 7 // \"weeklyRewards\"",
      "defined_out": [
        "\"weeklyRewards\"",
        "0",
        "currentTime#0",
        "lastReward#0",
        "periodsPassed#0",
        "rewardPeriod#0"
      ],
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "lastReward#0",
        "rewardPeriod#0",
        "periodsPassed#0",
        "0",
        "\"weeklyRewards\""
      ]
    },
    "775": {
      "op": "app_global_get_ex",
      "defined_out": [
        "currentTime#0",
        "lastReward#0",
        "maybe_exists%3#0",
        "periodsPassed#0",
        "rewardPerPeriod#0",
        "rewardPeriod#0"
      ],
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "lastReward#0",
        "rewardPeriod#0",
        "periodsPassed#0",
        "rewardPerPeriod#0",
        "maybe_exists%3#0"
      ]
    },
    "776": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "lastReward#0",
        "rewardPeriod#0",
        "periodsPassed#0",
        "rewardPerPeriod#0"
      ]
    },
    "777": {
      "op": "dig 1",
      "defined_out": [
        "currentTime#0",
        "lastReward#0",
        "periodsPassed#0",
        "periodsPassed#0 (copy)",
        "rewardPerPeriod#0",
        "rewardPeriod#0"
      ],
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "lastReward#0",
        "rewardPeriod#0",
        "periodsPassed#0",
        "rewardPerPeriod#0",
        "periodsPassed#0 (copy)"
      ]
    },
    "779": {
      "op": "*",
      "defined_out": [
        "currentTime#0",
        "lastReward#0",
        "periodsPassed#0",
        "rewardPeriod#0",
        "totalRewards#0"
      ],
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "lastReward#0",
        "rewardPeriod#0",
        "periodsPassed#0",
        "totalRewards#0"
      ]
    },
    "780": {
      "op": "intc_0 // 0",
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "lastReward#0",
        "rewardPeriod#0",
        "periodsPassed#0",
        "totalRewards#0",
        "0"
      ]
    },
    "781": {
      "op": "bytec_2 // \"totalStaked\"",
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "lastReward#0",
        "rewardPeriod#0",
        "periodsPassed#0",
        "totalRewards#0",
        "0",
        "\"totalStaked\""
      ]
    },
    "782": {
      "op": "app_global_get_ex",
      "defined_out": [
        "currentTime#0",
        "lastReward#0",
        "maybe_exists%4#0",
        "periodsPassed#0",
        "rewardPeriod#0",
        "totalRewards#0",
        "totalStaked#0"
      ],
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "lastReward#0",
        "rewardPeriod#0",
        "periodsPassed#0",
        "totalRewards#0",
        "totalStaked#0",
        "maybe_exists%4#0"
      ]
    },
    "783": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "lastReward#0",
        "rewardPeriod#0",
        "periodsPassed#0",
        "totalRewards#0",
        "totalStaked#0"
      ]
    },
    "784": {
      "op": "dig 1",
      "defined_out": [
        "currentTime#0",
        "lastReward#0",
        "periodsPassed#0",
        "rewardPeriod#0",
        "totalRewards#0",
        "totalRewards#0 (copy)",
        "totalStaked#0"
      ],
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "lastReward#0",
        "rewardPeriod#0",
        "periodsPassed#0",
        "totalRewards#0",
        "totalStaked#0",
        "totalRewards#0 (copy)"
      ]
    },
    "786": {
      "op": "swap",
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "lastReward#0",
        "rewardPeriod#0",
        "periodsPassed#0",
        "totalRewards#0",
        "totalRewards#0 (copy)",
        "totalStaked#0"
      ]
    },
    "787": {
      "op": "/",
      "defined_out": [
        "currentTime#0",
        "lastReward#0",
        "periodsPassed#0",
        "rewardPerShare#0",
        "rewardPeriod#0",
        "totalRewards#0"
      ],
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "lastReward#0",
        "rewardPeriod#0",
        "periodsPassed#0",
        "totalRewards#0",
        "rewardPerShare#0"
      ]
    },
    "788": {
      "op": "intc_0 // 0",
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "lastReward#0",
        "rewardPeriod#0",
        "periodsPassed#0",
        "totalRewards#0",
        "rewardPerShare#0",
        "0"
      ]
    },
    "789": {
      "op": "bytec 4 // \"accumulatedRewardsPerShare\"",
      "defined_out": [
        "\"accumulatedRewardsPerShare\"",
        "0",
        "currentTime#0",
        "lastReward#0",
        "periodsPassed#0",
        "rewardPerShare#0",
        "rewardPeriod#0",
        "totalRewards#0"
      ],
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "lastReward#0",
        "rewardPeriod#0",
        "periodsPassed#0",
        "totalRewards#0",
        "rewardPerShare#0",
        "0",
        "\"accumulatedRewardsPerShare\""
      ]
    },
    "791": {
      "op": "app_global_get_ex",
      "defined_out": [
        "currentTime#0",
        "lastReward#0",
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "periodsPassed#0",
        "rewardPerShare#0",
        "rewardPeriod#0",
        "totalRewards#0"
      ],
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "lastReward#0",
        "rewardPeriod#0",
        "periodsPassed#0",
        "totalRewards#0",
        "rewardPerShare#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "792": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "lastReward#0",
        "rewardPeriod#0",
        "periodsPassed#0",
        "totalRewards#0",
        "rewardPerShare#0",
        "maybe_value%5#0"
      ]
    },
    "793": {
      "op": "+",
      "defined_out": [
        "currentTime#0",
        "lastReward#0",
        "new_state_value%0#0",
        "periodsPassed#0",
        "rewardPeriod#0",
        "totalRewards#0"
      ],
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "lastReward#0",
        "rewardPeriod#0",
        "periodsPassed#0",
        "totalRewards#0",
        "new_state_value%0#0"
      ]
    },
    "794": {
      "op": "bytec 4 // \"accumulatedRewardsPerShare\"",
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "lastReward#0",
        "rewardPeriod#0",
        "periodsPassed#0",
        "totalRewards#0",
        "new_state_value%0#0",
        "\"accumulatedRewardsPerShare\""
      ]
    },
    "796": {
      "op": "swap",
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "lastReward#0",
        "rewardPeriod#0",
        "periodsPassed#0",
        "totalRewards#0",
        "\"accumulatedRewardsPerShare\"",
        "new_state_value%0#0"
      ]
    },
    "797": {
      "op": "app_global_put",
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "lastReward#0",
        "rewardPeriod#0",
        "periodsPassed#0",
        "totalRewards#0"
      ]
    },
    "798": {
      "op": "swap",
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "lastReward#0",
        "rewardPeriod#0",
        "totalRewards#0",
        "periodsPassed#0"
      ]
    },
    "799": {
      "op": "uncover 2",
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "lastReward#0",
        "totalRewards#0",
        "periodsPassed#0",
        "rewardPeriod#0"
      ]
    },
    "801": {
      "op": "*",
      "defined_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "tmp%4#0",
        "totalRewards#0"
      ],
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "lastReward#0",
        "totalRewards#0",
        "tmp%4#0"
      ]
    },
    "802": {
      "op": "uncover 2",
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "totalRewards#0",
        "tmp%4#0",
        "lastReward#0"
      ]
    },
    "804": {
      "op": "+",
      "defined_out": [
        "currentTime#0",
        "lastReward#0",
        "new_state_value%1#0",
        "rewardPeriod#0",
        "totalRewards#0"
      ],
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "totalRewards#0",
        "new_state_value%1#0"
      ]
    },
    "805": {
      "op": "bytec 5 // \"lastRewardTime\"",
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "totalRewards#0",
        "new_state_value%1#0",
        "\"lastRewardTime\""
      ]
    },
    "807": {
      "op": "swap",
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "totalRewards#0",
        "\"lastRewardTime\"",
        "new_state_value%1#0"
      ]
    },
    "808": {
      "op": "app_global_put",
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "totalRewards#0"
      ]
    },
    "809": {
      "op": "intc_0 // 0",
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "totalRewards#0",
        "0"
      ]
    },
    "810": {
      "op": "bytec_3 // \"rewardPool\"",
      "defined_out": [
        "\"rewardPool\"",
        "0",
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "totalRewards#0"
      ],
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "totalRewards#0",
        "0",
        "\"rewardPool\""
      ]
    },
    "811": {
      "op": "app_global_get_ex",
      "defined_out": [
        "currentTime#0",
        "lastReward#0",
        "maybe_exists%6#0",
        "maybe_value%6#0",
        "rewardPeriod#0",
        "totalRewards#0"
      ],
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "totalRewards#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "812": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "totalRewards#0",
        "maybe_value%6#0"
      ]
    },
    "813": {
      "op": "swap",
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "maybe_value%6#0",
        "totalRewards#0"
      ]
    },
    "814": {
      "op": "-",
      "defined_out": [
        "currentTime#0",
        "lastReward#0",
        "new_state_value%2#0",
        "rewardPeriod#0"
      ],
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "new_state_value%2#0"
      ]
    },
    "815": {
      "op": "bytec_3 // \"rewardPool\"",
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "new_state_value%2#0",
        "\"rewardPool\""
      ]
    },
    "816": {
      "op": "swap",
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "\"rewardPool\"",
        "new_state_value%2#0"
      ]
    },
    "817": {
      "op": "app_global_put",
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0"
      ]
    },
    "818": {
      "block": "updateRewards_after_if_else@3",
      "stack_in": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "819": {
      "subroutine": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.calculatePendingRewards",
      "params": {
        "userAddress#0": "bytes"
      },
      "block": "calculatePendingRewards",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "822": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "totalEarned#0"
      ]
    },
    "824": {
      "op": "dup",
      "stack_out": [
        "totalEarned#0",
        "userRewardDebt#0"
      ]
    },
    "825": {
      "op": "frame_dig -1",
      "defined_out": [
        "userAddress#0 (copy)"
      ],
      "stack_out": [
        "totalEarned#0",
        "userRewardDebt#0",
        "userAddress#0 (copy)"
      ]
    },
    "827": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.getUserStakeInfo",
      "op": "callsub getUserStakeInfo",
      "defined_out": [
        "stakeInfo#0"
      ],
      "stack_out": [
        "totalEarned#0",
        "userRewardDebt#0",
        "stakeInfo#0"
      ]
    },
    "830": {
      "op": "dup",
      "defined_out": [
        "stakeInfo#0"
      ],
      "stack_out": [
        "totalEarned#0",
        "userRewardDebt#0",
        "stakeInfo#0",
        "stakeInfo#0"
      ]
    },
    "831": {
      "op": "intc_0 // 0",
      "stack_out": [
        "totalEarned#0",
        "userRewardDebt#0",
        "stakeInfo#0",
        "stakeInfo#0",
        "0"
      ]
    },
    "832": {
      "op": "extract_uint64",
      "defined_out": [
        "stakeInfo#0",
        "userStake#0"
      ],
      "stack_out": [
        "totalEarned#0",
        "userRewardDebt#0",
        "stakeInfo#0",
        "userStake#0"
      ]
    },
    "833": {
      "op": "dup",
      "defined_out": [
        "stakeInfo#0",
        "userStake#0"
      ],
      "stack_out": [
        "totalEarned#0",
        "userRewardDebt#0",
        "stakeInfo#0",
        "userStake#0",
        "userStake#0"
      ]
    },
    "834": {
      "op": "bnz calculatePendingRewards_after_if_else@2",
      "stack_out": [
        "totalEarned#0",
        "userRewardDebt#0",
        "stakeInfo#0",
        "userStake#0"
      ]
    },
    "837": {
      "op": "intc_0 // 0",
      "stack_out": [
        "totalEarned#0",
        "userRewardDebt#0",
        "stakeInfo#0",
        "userStake#0",
        "0"
      ]
    },
    "838": {
      "op": "frame_bury 0"
    },
    "840": {
      "retsub": true,
      "op": "retsub"
    },
    "841": {
      "block": "calculatePendingRewards_after_if_else@2",
      "stack_in": [
        "totalEarned#0",
        "userRewardDebt#0",
        "stakeInfo#0",
        "userStake#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "totalEarned#0",
        "userRewardDebt#0",
        "stakeInfo#0",
        "userStake#0",
        "0"
      ]
    },
    "842": {
      "op": "bytec 4 // \"accumulatedRewardsPerShare\"",
      "defined_out": [
        "\"accumulatedRewardsPerShare\"",
        "0"
      ],
      "stack_out": [
        "totalEarned#0",
        "userRewardDebt#0",
        "stakeInfo#0",
        "userStake#0",
        "0",
        "\"accumulatedRewardsPerShare\""
      ]
    },
    "844": {
      "op": "app_global_get_ex",
      "defined_out": [
        "accRewardsPerShare#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "totalEarned#0",
        "userRewardDebt#0",
        "stakeInfo#0",
        "userStake#0",
        "accRewardsPerShare#0",
        "maybe_exists%0#0"
      ]
    },
    "845": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "totalEarned#0",
        "userRewardDebt#0",
        "stakeInfo#0",
        "userStake#0",
        "accRewardsPerShare#0"
      ]
    },
    "846": {
      "op": "frame_dig 2",
      "defined_out": [
        "accRewardsPerShare#0",
        "stakeInfo#0"
      ],
      "stack_out": [
        "totalEarned#0",
        "userRewardDebt#0",
        "stakeInfo#0",
        "userStake#0",
        "accRewardsPerShare#0",
        "stakeInfo#0"
      ]
    },
    "848": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "accRewardsPerShare#0",
        "stakeInfo#0"
      ],
      "stack_out": [
        "totalEarned#0",
        "userRewardDebt#0",
        "stakeInfo#0",
        "userStake#0",
        "accRewardsPerShare#0",
        "stakeInfo#0",
        "32"
      ]
    },
    "850": {
      "op": "extract_uint64",
      "defined_out": [
        "accRewardsPerShare#0",
        "stakeInfo#0",
        "userRewardDebt#0"
      ],
      "stack_out": [
        "totalEarned#0",
        "userRewardDebt#0",
        "stakeInfo#0",
        "userStake#0",
        "accRewardsPerShare#0",
        "userRewardDebt#0"
      ]
    },
    "851": {
      "op": "dup",
      "stack_out": [
        "totalEarned#0",
        "userRewardDebt#0",
        "stakeInfo#0",
        "userStake#0",
        "accRewardsPerShare#0",
        "userRewardDebt#0",
        "userRewardDebt#0"
      ]
    },
    "852": {
      "op": "frame_bury 1",
      "defined_out": [
        "accRewardsPerShare#0",
        "stakeInfo#0",
        "userRewardDebt#0"
      ],
      "stack_out": [
        "totalEarned#0",
        "userRewardDebt#0",
        "stakeInfo#0",
        "userStake#0",
        "accRewardsPerShare#0",
        "userRewardDebt#0"
      ]
    },
    "854": {
      "op": "frame_dig 3",
      "defined_out": [
        "accRewardsPerShare#0",
        "stakeInfo#0",
        "userRewardDebt#0",
        "userStake#0"
      ],
      "stack_out": [
        "totalEarned#0",
        "userRewardDebt#0",
        "stakeInfo#0",
        "userStake#0",
        "accRewardsPerShare#0",
        "userRewardDebt#0",
        "userStake#0"
      ]
    },
    "856": {
      "op": "uncover 2",
      "stack_out": [
        "totalEarned#0",
        "userRewardDebt#0",
        "stakeInfo#0",
        "userStake#0",
        "userRewardDebt#0",
        "userStake#0",
        "accRewardsPerShare#0"
      ]
    },
    "858": {
      "op": "*",
      "defined_out": [
        "stakeInfo#0",
        "totalEarned#0",
        "userRewardDebt#0",
        "userStake#0"
      ],
      "stack_out": [
        "totalEarned#0",
        "userRewardDebt#0",
        "stakeInfo#0",
        "userStake#0",
        "userRewardDebt#0",
        "totalEarned#0"
      ]
    },
    "859": {
      "op": "dup",
      "stack_out": [
        "totalEarned#0",
        "userRewardDebt#0",
        "stakeInfo#0",
        "userStake#0",
        "userRewardDebt#0",
        "totalEarned#0",
        "totalEarned#0"
      ]
    },
    "860": {
      "op": "frame_bury 0",
      "defined_out": [
        "stakeInfo#0",
        "totalEarned#0",
        "userRewardDebt#0",
        "userStake#0"
      ],
      "stack_out": [
        "totalEarned#0",
        "userRewardDebt#0",
        "stakeInfo#0",
        "userStake#0",
        "userRewardDebt#0",
        "totalEarned#0"
      ]
    },
    "862": {
      "op": "<",
      "defined_out": [
        "stakeInfo#0",
        "tmp%5#0",
        "totalEarned#0",
        "userRewardDebt#0",
        "userStake#0"
      ],
      "stack_out": [
        "totalEarned#0",
        "userRewardDebt#0",
        "stakeInfo#0",
        "userStake#0",
        "tmp%5#0"
      ]
    },
    "863": {
      "op": "bz calculatePendingRewards_ternary_false@4",
      "stack_out": [
        "totalEarned#0",
        "userRewardDebt#0",
        "stakeInfo#0",
        "userStake#0"
      ]
    },
    "866": {
      "op": "frame_dig 0",
      "stack_out": [
        "totalEarned#0",
        "userRewardDebt#0",
        "stakeInfo#0",
        "userStake#0",
        "totalEarned#0"
      ]
    },
    "868": {
      "op": "frame_dig 1",
      "stack_out": [
        "totalEarned#0",
        "userRewardDebt#0",
        "stakeInfo#0",
        "userStake#0",
        "totalEarned#0",
        "userRewardDebt#0"
      ]
    },
    "870": {
      "op": "-",
      "defined_out": [
        "pendingRewards#0",
        "stakeInfo#0",
        "totalEarned#0",
        "userRewardDebt#0",
        "userStake#0"
      ],
      "stack_out": [
        "totalEarned#0",
        "userRewardDebt#0",
        "stakeInfo#0",
        "userStake#0",
        "pendingRewards#0"
      ]
    },
    "871": {
      "block": "calculatePendingRewards_ternary_merge@5",
      "stack_in": [
        "totalEarned#0",
        "userRewardDebt#0",
        "stakeInfo#0",
        "userStake#0",
        "pendingRewards#0"
      ],
      "op": "frame_bury 0",
      "defined_out": [
        "pendingRewards#0"
      ]
    },
    "873": {
      "retsub": true,
      "op": "retsub"
    },
    "874": {
      "block": "calculatePendingRewards_ternary_false@4",
      "stack_in": [
        "totalEarned#0",
        "userRewardDebt#0",
        "stakeInfo#0",
        "userStake#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "pendingRewards#0"
      ],
      "stack_out": [
        "totalEarned#0",
        "userRewardDebt#0",
        "stakeInfo#0",
        "userStake#0",
        "pendingRewards#0"
      ]
    },
    "875": {
      "op": "b calculatePendingRewards_ternary_merge@5"
    },
    "878": {
      "subroutine": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.initialize",
      "params": {
        "asset#0": "uint64",
        "adminAddress#0": "bytes",
        "minimumStake#0": "uint64",
        "weeklyRewards#0": "uint64",
        "rewardPeriod#0": "uint64"
      },
      "block": "initialize",
      "stack_in": [],
      "op": "proto 5 0"
    },
    "881": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "882": {
      "op": "bytec_1 // \"asset\"",
      "defined_out": [
        "\"asset\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"asset\""
      ]
    },
    "883": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "884": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "885": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "886": {
      "error": "Already initialized",
      "op": "assert // Already initialized",
      "stack_out": []
    },
    "887": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "889": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "891": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "892": {
      "error": "Only creator can initialize",
      "op": "assert // Only creator can initialize",
      "stack_out": []
    },
    "893": {
      "op": "bytec_1 // \"asset\"",
      "stack_out": [
        "\"asset\""
      ]
    },
    "894": {
      "op": "frame_dig -5",
      "defined_out": [
        "\"asset\"",
        "asset#0 (copy)"
      ],
      "stack_out": [
        "\"asset\"",
        "asset#0 (copy)"
      ]
    },
    "896": {
      "op": "app_global_put",
      "stack_out": []
    },
    "897": {
      "op": "bytec_0 // \"adminAddress\"",
      "defined_out": [
        "\"adminAddress\""
      ],
      "stack_out": [
        "\"adminAddress\""
      ]
    },
    "898": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"adminAddress\"",
        "adminAddress#0 (copy)"
      ],
      "stack_out": [
        "\"adminAddress\"",
        "adminAddress#0 (copy)"
      ]
    },
    "900": {
      "op": "app_global_put",
      "stack_out": []
    },
    "901": {
      "op": "bytec_2 // \"totalStaked\"",
      "defined_out": [
        "\"totalStaked\""
      ],
      "stack_out": [
        "\"totalStaked\""
      ]
    },
    "902": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"totalStaked\"",
        "0"
      ]
    },
    "903": {
      "op": "app_global_put",
      "stack_out": []
    },
    "904": {
      "op": "bytec 5 // \"lastRewardTime\"",
      "defined_out": [
        "\"lastRewardTime\""
      ],
      "stack_out": [
        "\"lastRewardTime\""
      ]
    },
    "906": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "\"lastRewardTime\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "\"lastRewardTime\"",
        "new_state_value%0#0"
      ]
    },
    "908": {
      "op": "app_global_put",
      "stack_out": []
    },
    "909": {
      "op": "bytec 6 // \"minimumStake\"",
      "defined_out": [
        "\"minimumStake\""
      ],
      "stack_out": [
        "\"minimumStake\""
      ]
    },
    "911": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"minimumStake\"",
        "minimumStake#0 (copy)"
      ],
      "stack_out": [
        "\"minimumStake\"",
        "minimumStake#0 (copy)"
      ]
    },
    "913": {
      "op": "app_global_put",
      "stack_out": []
    },
    "914": {
      "op": "bytec_3 // \"rewardPool\"",
      "defined_out": [
        "\"rewardPool\""
      ],
      "stack_out": [
        "\"rewardPool\""
      ]
    },
    "915": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"rewardPool\"",
        "0"
      ]
    },
    "916": {
      "op": "app_global_put",
      "stack_out": []
    },
    "917": {
      "op": "bytec 4 // \"accumulatedRewardsPerShare\"",
      "defined_out": [
        "\"accumulatedRewardsPerShare\""
      ],
      "stack_out": [
        "\"accumulatedRewardsPerShare\""
      ]
    },
    "919": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"accumulatedRewardsPerShare\"",
        "0"
      ]
    },
    "920": {
      "op": "app_global_put",
      "stack_out": []
    },
    "921": {
      "op": "bytec 7 // \"weeklyRewards\"",
      "defined_out": [
        "\"weeklyRewards\""
      ],
      "stack_out": [
        "\"weeklyRewards\""
      ]
    },
    "923": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"weeklyRewards\"",
        "weeklyRewards#0 (copy)"
      ],
      "stack_out": [
        "\"weeklyRewards\"",
        "weeklyRewards#0 (copy)"
      ]
    },
    "925": {
      "op": "app_global_put",
      "stack_out": []
    },
    "926": {
      "op": "bytec 8 // \"rewardPeriod\"",
      "defined_out": [
        "\"rewardPeriod\""
      ],
      "stack_out": [
        "\"rewardPeriod\""
      ]
    },
    "928": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"rewardPeriod\"",
        "rewardPeriod#0 (copy)"
      ],
      "stack_out": [
        "\"rewardPeriod\"",
        "rewardPeriod#0 (copy)"
      ]
    },
    "930": {
      "op": "app_global_put",
      "stack_out": []
    },
    "931": {
      "retsub": true,
      "op": "retsub"
    },
    "932": {
      "subroutine": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.optInToAsset",
      "params": {},
      "block": "optInToAsset",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "935": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "936": {
      "op": "bytec_0 // \"adminAddress\"",
      "defined_out": [
        "\"adminAddress\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"adminAddress\""
      ]
    },
    "937": {
      "op": "app_global_get_ex",
      "defined_out": [
        "adminAddr#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "maybe_exists%0#0"
      ]
    },
    "938": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "adminAddr#0"
      ]
    },
    "939": {
      "op": "txn Sender",
      "defined_out": [
        "adminAddr#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "tmp%0#0"
      ]
    },
    "941": {
      "op": "global CreatorAddress",
      "defined_out": [
        "adminAddr#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "943": {
      "op": "==",
      "defined_out": [
        "adminAddr#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "tmp%2#0"
      ]
    },
    "944": {
      "op": "bnz optInToAsset_bool_true@2",
      "stack_out": [
        "adminAddr#0"
      ]
    },
    "947": {
      "op": "txn Sender",
      "defined_out": [
        "adminAddr#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "tmp%3#0"
      ]
    },
    "949": {
      "op": "frame_dig 0",
      "stack_out": [
        "adminAddr#0",
        "tmp%3#0",
        "adminAddr#0"
      ]
    },
    "951": {
      "op": "==",
      "defined_out": [
        "adminAddr#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "tmp%4#0"
      ]
    },
    "952": {
      "op": "bz optInToAsset_bool_false@3",
      "stack_out": [
        "adminAddr#0"
      ]
    },
    "955": {
      "block": "optInToAsset_bool_true@2",
      "stack_in": [
        "adminAddr#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "or_result%0#0"
      ]
    },
    "956": {
      "block": "optInToAsset_bool_merge@4",
      "stack_in": [
        "adminAddr#0",
        "or_result%0#0"
      ],
      "error": "Only creator or admin can opt in",
      "op": "assert // Only creator or admin can opt in",
      "defined_out": [],
      "stack_out": [
        "adminAddr#0"
      ]
    },
    "957": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "adminAddr#0",
        "0"
      ]
    },
    "958": {
      "op": "bytec_1 // \"asset\"",
      "defined_out": [
        "\"asset\"",
        "0"
      ],
      "stack_out": [
        "adminAddr#0",
        "0",
        "\"asset\""
      ]
    },
    "959": {
      "op": "app_global_get_ex",
      "defined_out": [
        "asset#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "asset#0",
        "maybe_exists%1#0"
      ]
    },
    "960": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "adminAddr#0",
        "asset#0"
      ]
    },
    "961": {
      "op": "itxn_begin"
    },
    "962": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "asset#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "asset#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "964": {
      "op": "swap",
      "stack_out": [
        "adminAddr#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "asset#0"
      ]
    },
    "965": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "adminAddr#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "967": {
      "op": "intc_0 // 0",
      "stack_out": [
        "adminAddr#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "968": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "adminAddr#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "970": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "adminAddr#0"
      ]
    },
    "972": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "adminAddr#0",
        "4"
      ]
    },
    "973": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "adminAddr#0"
      ]
    },
    "975": {
      "op": "intc_0 // 0",
      "stack_out": [
        "adminAddr#0",
        "0"
      ]
    },
    "976": {
      "op": "itxn_field Fee",
      "stack_out": [
        "adminAddr#0"
      ]
    },
    "978": {
      "op": "itxn_submit"
    },
    "979": {
      "retsub": true,
      "op": "retsub"
    },
    "980": {
      "block": "optInToAsset_bool_false@3",
      "stack_in": [
        "adminAddr#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "or_result%0#0"
      ]
    },
    "981": {
      "op": "b optInToAsset_bool_merge@4"
    },
    "984": {
      "subroutine": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.stake",
      "params": {},
      "block": "stake",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "987": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "988": {
      "op": "bytec_1 // \"asset\"",
      "defined_out": [
        "\"asset\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"asset\""
      ]
    },
    "989": {
      "op": "app_global_get_ex",
      "defined_out": [
        "asset#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "asset#0",
        "maybe_exists%0#0"
      ]
    },
    "990": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "asset#0"
      ]
    },
    "991": {
      "op": "intc_0 // 0",
      "stack_out": [
        "asset#0",
        "0"
      ]
    },
    "992": {
      "op": "bytec_1 // \"asset\"",
      "stack_out": [
        "asset#0",
        "0",
        "\"asset\""
      ]
    },
    "993": {
      "op": "app_global_get_ex",
      "defined_out": [
        "asset#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "asset#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "994": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "asset#0",
        "maybe_value%1#0"
      ]
    },
    "995": {
      "error": "Contract not initialized",
      "op": "assert // Contract not initialized",
      "stack_out": [
        "asset#0"
      ]
    },
    "996": {
      "op": "global GroupSize",
      "defined_out": [
        "asset#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "asset#0",
        "tmp%1#0"
      ]
    },
    "998": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "asset#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "asset#0",
        "tmp%1#0",
        "2"
      ]
    },
    "1000": {
      "op": "==",
      "defined_out": [
        "asset#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "asset#0",
        "tmp%2#0"
      ]
    },
    "1001": {
      "error": "Expected 2 txns in group",
      "op": "assert // Expected 2 txns in group",
      "stack_out": [
        "asset#0"
      ]
    },
    "1002": {
      "op": "intc_0 // 0",
      "stack_out": [
        "asset#0",
        "0"
      ]
    },
    "1003": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "asset#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "asset#0",
        "gtxn_type%0#0"
      ]
    },
    "1005": {
      "op": "dup",
      "defined_out": [
        "asset#0",
        "gtxn_type%0#0",
        "gtxn_type%0#0 (copy)"
      ],
      "stack_out": [
        "asset#0",
        "gtxn_type%0#0",
        "gtxn_type%0#0 (copy)"
      ]
    },
    "1006": {
      "op": "intc_2 // axfer",
      "defined_out": [
        "asset#0",
        "axfer",
        "gtxn_type%0#0",
        "gtxn_type%0#0 (copy)"
      ],
      "stack_out": [
        "asset#0",
        "gtxn_type%0#0",
        "gtxn_type%0#0 (copy)",
        "axfer"
      ]
    },
    "1007": {
      "op": "==",
      "defined_out": [
        "asset#0",
        "gtxn_type%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "asset#0",
        "gtxn_type%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "1008": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "asset#0",
        "gtxn_type%0#0"
      ]
    },
    "1009": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4",
        "asset#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "asset#0",
        "gtxn_type%0#0",
        "4"
      ]
    },
    "1010": {
      "op": "==",
      "defined_out": [
        "asset#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "asset#0",
        "tmp%4#0"
      ]
    },
    "1011": {
      "error": "Transaction 0 must be asset transfer",
      "op": "assert // Transaction 0 must be asset transfer",
      "stack_out": [
        "asset#0"
      ]
    },
    "1012": {
      "op": "intc_0 // 0",
      "stack_out": [
        "asset#0",
        "0"
      ]
    },
    "1013": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "asset#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "asset#0",
        "tmp%5#0"
      ]
    },
    "1015": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "asset#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "asset#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "1017": {
      "op": "==",
      "defined_out": [
        "asset#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "asset#0",
        "tmp%7#0"
      ]
    },
    "1018": {
      "error": "Asset transfer must be to contract",
      "op": "assert // Asset transfer must be to contract",
      "stack_out": [
        "asset#0"
      ]
    },
    "1019": {
      "op": "intc_0 // 0",
      "stack_out": [
        "asset#0",
        "0"
      ]
    },
    "1020": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "asset#0",
        "stakeAmount#0"
      ],
      "stack_out": [
        "asset#0",
        "stakeAmount#0"
      ]
    },
    "1022": {
      "op": "dup",
      "stack_out": [
        "asset#0",
        "stakeAmount#0",
        "stakeAmount#0"
      ]
    },
    "1023": {
      "op": "cover 2",
      "defined_out": [
        "asset#0",
        "stakeAmount#0"
      ],
      "stack_out": [
        "stakeAmount#0",
        "asset#0",
        "stakeAmount#0"
      ]
    },
    "1025": {
      "error": "Must stake non-zero amount",
      "op": "assert // Must stake non-zero amount",
      "stack_out": [
        "stakeAmount#0",
        "asset#0"
      ]
    },
    "1026": {
      "op": "intc_0 // 0",
      "stack_out": [
        "stakeAmount#0",
        "asset#0",
        "0"
      ]
    },
    "1027": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "asset#0",
        "stakeAmount#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "stakeAmount#0",
        "asset#0",
        "tmp%10#0"
      ]
    },
    "1029": {
      "op": "==",
      "defined_out": [
        "stakeAmount#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "stakeAmount#0",
        "tmp%11#0"
      ]
    },
    "1030": {
      "error": "Incorrect asset ID",
      "op": "assert // Incorrect asset ID",
      "stack_out": [
        "stakeAmount#0"
      ]
    },
    "1031": {
      "op": "intc_0 // 0",
      "stack_out": [
        "stakeAmount#0",
        "0"
      ]
    },
    "1032": {
      "op": "bytec 6 // \"minimumStake\"",
      "defined_out": [
        "\"minimumStake\"",
        "0",
        "stakeAmount#0"
      ],
      "stack_out": [
        "stakeAmount#0",
        "0",
        "\"minimumStake\""
      ]
    },
    "1034": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "minimumStake#0",
        "stakeAmount#0"
      ],
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "maybe_exists%2#0"
      ]
    },
    "1035": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0"
      ]
    },
    "1036": {
      "op": "txn Sender"
    },
    "1038": {
      "op": "dup",
      "defined_out": [
        "minimumStake#0",
        "senderAddress#0",
        "stakeAmount#0"
      ],
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "senderAddress#0"
      ]
    },
    "1039": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.getUserStakeInfo",
      "op": "callsub getUserStakeInfo",
      "defined_out": [
        "minimumStake#0",
        "senderAddress#0",
        "stakeAmount#0",
        "stakeInfo#0"
      ],
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0"
      ]
    },
    "1042": {
      "op": "dupn 2",
      "defined_out": [
        "minimumStake#0",
        "senderAddress#0",
        "stakeAmount#0",
        "stakeInfo#0",
        "stakeInfo#0 (copy)"
      ],
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#0",
        "stakeInfo#0 (copy)"
      ]
    },
    "1044": {
      "op": "intc_0 // 0",
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#0",
        "stakeInfo#0 (copy)",
        "0"
      ]
    },
    "1045": {
      "op": "extract_uint64",
      "defined_out": [
        "minimumStake#0",
        "senderAddress#0",
        "stakeAmount#0",
        "stakeInfo#0",
        "stakeInfo#9",
        "tmp%13#0"
      ],
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#9",
        "tmp%13#0"
      ]
    },
    "1046": {
      "op": "bnz stake_after_if_else@2",
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#9"
      ]
    },
    "1049": {
      "op": "frame_dig 0",
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#9",
        "stakeAmount#0"
      ]
    },
    "1051": {
      "op": "frame_dig 1",
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#9",
        "stakeAmount#0",
        "minimumStake#0"
      ]
    },
    "1053": {
      "op": ">=",
      "defined_out": [
        "minimumStake#0",
        "senderAddress#0",
        "stakeAmount#0",
        "stakeInfo#0",
        "stakeInfo#9",
        "tmp%15#0"
      ],
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#9",
        "tmp%15#0"
      ]
    },
    "1054": {
      "error": "Initial stake below minimum",
      "op": "assert // Initial stake below minimum",
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#9"
      ]
    },
    "1055": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "minimumStake#0",
        "senderAddress#0",
        "stakeAmount#0",
        "stakeInfo#0",
        "stakeInfo#9",
        "to_encode%0#0"
      ],
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#9",
        "to_encode%0#0"
      ]
    },
    "1057": {
      "op": "itob",
      "defined_out": [
        "minimumStake#0",
        "senderAddress#0",
        "stakeAmount#0",
        "stakeInfo#0",
        "stakeInfo#9",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#9",
        "val_as_bytes%0#0"
      ]
    },
    "1058": {
      "op": "frame_dig 3",
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#9",
        "val_as_bytes%0#0",
        "stakeInfo#0"
      ]
    },
    "1060": {
      "op": "swap",
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#9",
        "stakeInfo#0",
        "val_as_bytes%0#0"
      ]
    },
    "1061": {
      "op": "replace2 8",
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#9",
        "stakeInfo#9"
      ]
    },
    "1063": {
      "op": "frame_bury 4",
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#9"
      ]
    },
    "1065": {
      "block": "stake_after_if_else@2",
      "stack_in": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#9"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "stakeInfo#0"
      ],
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#9",
        "stakeInfo#0"
      ]
    },
    "1067": {
      "op": "dup",
      "defined_out": [
        "stakeInfo#0",
        "stakeInfo#0 (copy)"
      ],
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#9",
        "stakeInfo#0",
        "stakeInfo#0 (copy)"
      ]
    },
    "1068": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "stakeInfo#0",
        "stakeInfo#0 (copy)"
      ],
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#9",
        "stakeInfo#0",
        "stakeInfo#0 (copy)",
        "0"
      ]
    },
    "1069": {
      "op": "extract_uint64",
      "defined_out": [
        "stakeInfo#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#9",
        "stakeInfo#0",
        "tmp%17#0"
      ]
    },
    "1070": {
      "op": "frame_dig 0",
      "defined_out": [
        "stakeAmount#0",
        "stakeInfo#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#9",
        "stakeInfo#0",
        "tmp%17#0",
        "stakeAmount#0"
      ]
    },
    "1072": {
      "op": "dup",
      "defined_out": [
        "stakeAmount#0",
        "stakeAmount#0 (copy)",
        "stakeInfo#0",
        "tmp%17#0"
      ],
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#9",
        "stakeInfo#0",
        "tmp%17#0",
        "stakeAmount#0 (copy)",
        "stakeAmount#0 (copy)"
      ]
    },
    "1073": {
      "op": "cover 3",
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#9",
        "stakeAmount#0",
        "stakeInfo#0",
        "tmp%17#0",
        "stakeAmount#0 (copy)"
      ]
    },
    "1075": {
      "op": "+",
      "defined_out": [
        "stakeAmount#0",
        "stakeInfo#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#9",
        "stakeAmount#0",
        "stakeInfo#0",
        "to_encode%1#0"
      ]
    },
    "1076": {
      "op": "itob",
      "defined_out": [
        "stakeAmount#0",
        "stakeInfo#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#9",
        "stakeAmount#0",
        "stakeInfo#0",
        "val_as_bytes%1#0"
      ]
    },
    "1077": {
      "op": "replace2 0",
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#9",
        "stakeAmount#0",
        "stakeInfo#0"
      ]
    },
    "1079": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "stakeAmount#0",
        "stakeInfo#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#9",
        "stakeAmount#0",
        "stakeInfo#0",
        "to_encode%2#0"
      ]
    },
    "1081": {
      "op": "itob",
      "defined_out": [
        "stakeAmount#0",
        "stakeInfo#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#9",
        "stakeAmount#0",
        "stakeInfo#0",
        "val_as_bytes%2#0"
      ]
    },
    "1082": {
      "op": "replace2 16",
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#9",
        "stakeAmount#0",
        "stakeInfo#0"
      ]
    },
    "1084": {
      "op": "dup",
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#9",
        "stakeAmount#0",
        "stakeInfo#0",
        "stakeInfo#0 (copy)"
      ]
    },
    "1085": {
      "op": "intc_0 // 0",
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#9",
        "stakeAmount#0",
        "stakeInfo#0",
        "stakeInfo#0 (copy)",
        "0"
      ]
    },
    "1086": {
      "op": "extract_uint64",
      "defined_out": [
        "stakeAmount#0",
        "stakeInfo#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#9",
        "stakeAmount#0",
        "stakeInfo#0",
        "tmp%19#0"
      ]
    },
    "1087": {
      "op": "intc_0 // 0",
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#9",
        "stakeAmount#0",
        "stakeInfo#0",
        "tmp%19#0",
        "0"
      ]
    },
    "1088": {
      "op": "bytec 4 // \"accumulatedRewardsPerShare\"",
      "defined_out": [
        "\"accumulatedRewardsPerShare\"",
        "0",
        "stakeAmount#0",
        "stakeInfo#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#9",
        "stakeAmount#0",
        "stakeInfo#0",
        "tmp%19#0",
        "0",
        "\"accumulatedRewardsPerShare\""
      ]
    },
    "1090": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "stakeAmount#0",
        "stakeInfo#0",
        "tmp%19#0"
      ],
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#9",
        "stakeAmount#0",
        "stakeInfo#0",
        "tmp%19#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1091": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#9",
        "stakeAmount#0",
        "stakeInfo#0",
        "tmp%19#0",
        "maybe_value%3#0"
      ]
    },
    "1092": {
      "op": "*",
      "defined_out": [
        "stakeAmount#0",
        "stakeInfo#0",
        "to_encode%3#0"
      ],
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#9",
        "stakeAmount#0",
        "stakeInfo#0",
        "to_encode%3#0"
      ]
    },
    "1093": {
      "op": "itob",
      "defined_out": [
        "stakeAmount#0",
        "stakeInfo#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#9",
        "stakeAmount#0",
        "stakeInfo#0",
        "val_as_bytes%3#0"
      ]
    },
    "1094": {
      "op": "replace2 32",
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#9",
        "stakeAmount#0",
        "stakeInfo#0"
      ]
    },
    "1096": {
      "op": "frame_dig 2",
      "defined_out": [
        "senderAddress#0",
        "stakeAmount#0",
        "stakeInfo#0"
      ],
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#9",
        "stakeAmount#0",
        "stakeInfo#0",
        "senderAddress#0"
      ]
    },
    "1098": {
      "op": "swap",
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#9",
        "stakeAmount#0",
        "senderAddress#0",
        "stakeInfo#0"
      ]
    },
    "1099": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.storeUserStakeInfo",
      "op": "callsub storeUserStakeInfo",
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#9",
        "stakeAmount#0",
        "stakeInfo#0"
      ]
    },
    "1102": {
      "op": "pop",
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#9",
        "stakeAmount#0"
      ]
    },
    "1103": {
      "op": "intc_0 // 0",
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#9",
        "stakeAmount#0",
        "0"
      ]
    },
    "1104": {
      "op": "bytec_2 // \"totalStaked\"",
      "defined_out": [
        "\"totalStaked\"",
        "0",
        "senderAddress#0",
        "stakeAmount#0",
        "stakeInfo#0"
      ],
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#9",
        "stakeAmount#0",
        "0",
        "\"totalStaked\""
      ]
    },
    "1105": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "senderAddress#0",
        "stakeAmount#0",
        "stakeInfo#0"
      ],
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#9",
        "stakeAmount#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "1106": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#9",
        "stakeAmount#0",
        "maybe_value%4#0"
      ]
    },
    "1107": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0",
        "senderAddress#0",
        "stakeAmount#0",
        "stakeInfo#0"
      ],
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#9",
        "new_state_value%0#0"
      ]
    },
    "1108": {
      "op": "bytec_2 // \"totalStaked\"",
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#9",
        "new_state_value%0#0",
        "\"totalStaked\""
      ]
    },
    "1109": {
      "op": "swap",
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#9",
        "\"totalStaked\"",
        "new_state_value%0#0"
      ]
    },
    "1110": {
      "op": "app_global_put",
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#9"
      ]
    },
    "1111": {
      "retsub": true,
      "op": "retsub"
    },
    "1112": {
      "subroutine": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.withdraw",
      "params": {
        "amount#0": "uint64"
      },
      "block": "withdraw",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1115": {
      "op": "txn Sender"
    },
    "1117": {
      "op": "dup",
      "defined_out": [
        "senderAddress#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "senderAddress#0"
      ]
    },
    "1118": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.getUserStakeInfo",
      "op": "callsub getUserStakeInfo",
      "defined_out": [
        "senderAddress#0",
        "stakeInfo#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0"
      ]
    },
    "1121": {
      "op": "dup",
      "defined_out": [
        "senderAddress#0",
        "stakeInfo#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#0"
      ]
    },
    "1122": {
      "op": "intc_0 // 0",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#0",
        "0"
      ]
    },
    "1123": {
      "op": "extract_uint64",
      "defined_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ]
    },
    "1124": {
      "op": "dupn 2",
      "defined_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "1126": {
      "error": "No stake found",
      "op": "assert // No stake found",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "1127": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "tmp%1#0",
        "amount#0 (copy)"
      ]
    },
    "1129": {
      "op": "dig 1",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "tmp%1#0",
        "amount#0 (copy)",
        "tmp%1#0 (copy)"
      ]
    },
    "1131": {
      "op": "<=",
      "defined_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "tmp%1#0",
        "tmp%5#0"
      ]
    },
    "1132": {
      "error": "Withdrawal amount exceeds stake",
      "op": "assert // Withdrawal amount exceeds stake",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "1133": {
      "op": "frame_dig -1",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "tmp%1#0",
        "amount#0 (copy)"
      ]
    },
    "1135": {
      "error": "Withdrawal amount must be positive",
      "op": "assert // Withdrawal amount must be positive",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "1136": {
      "op": "frame_dig -1",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "tmp%1#0",
        "amount#0 (copy)"
      ]
    },
    "1138": {
      "op": ">",
      "defined_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "tmp%9#0"
      ]
    },
    "1139": {
      "op": "bz withdraw_after_if_else@2",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ]
    },
    "1142": {
      "op": "frame_dig 2",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "1144": {
      "op": "frame_dig -1",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "tmp%1#0",
        "amount#0 (copy)"
      ]
    },
    "1146": {
      "op": "-",
      "defined_out": [
        "remainingStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "remainingStake#0"
      ]
    },
    "1147": {
      "op": "intc_0 // 0",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "remainingStake#0",
        "0"
      ]
    },
    "1148": {
      "op": "bytec 6 // \"minimumStake\"",
      "defined_out": [
        "\"minimumStake\"",
        "0",
        "remainingStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "remainingStake#0",
        "0",
        "\"minimumStake\""
      ]
    },
    "1150": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "minimumStake#0",
        "remainingStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "remainingStake#0",
        "minimumStake#0",
        "maybe_exists%0#0"
      ]
    },
    "1151": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "remainingStake#0",
        "minimumStake#0"
      ]
    },
    "1152": {
      "op": ">=",
      "defined_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "tmp%12#0"
      ]
    },
    "1153": {
      "error": "Remaining stake would be below minimum",
      "op": "assert // Remaining stake would be below minimum",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ]
    },
    "1154": {
      "block": "withdraw_after_if_else@2",
      "stack_in": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "1156": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "tmp%1#0",
        "amount#0 (copy)"
      ]
    },
    "1158": {
      "op": "-",
      "defined_out": [
        "tmp%1#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "to_encode%0#0"
      ]
    },
    "1159": {
      "op": "itob",
      "defined_out": [
        "tmp%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "val_as_bytes%0#0"
      ]
    },
    "1160": {
      "op": "frame_dig 1",
      "defined_out": [
        "stakeInfo#0",
        "tmp%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "val_as_bytes%0#0",
        "stakeInfo#0"
      ]
    },
    "1162": {
      "op": "swap",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "stakeInfo#0",
        "val_as_bytes%0#0"
      ]
    },
    "1163": {
      "op": "replace2 0",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "stakeInfo#0"
      ]
    },
    "1165": {
      "op": "dup",
      "defined_out": [
        "stakeInfo#0",
        "stakeInfo#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "stakeInfo#0",
        "stakeInfo#0 (copy)"
      ]
    },
    "1166": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "stakeInfo#0",
        "stakeInfo#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "stakeInfo#0",
        "stakeInfo#0 (copy)",
        "0"
      ]
    },
    "1167": {
      "op": "extract_uint64",
      "defined_out": [
        "stakeInfo#0",
        "tmp%1#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "stakeInfo#0",
        "tmp%16#0"
      ]
    },
    "1168": {
      "op": "intc_0 // 0",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "stakeInfo#0",
        "tmp%16#0",
        "0"
      ]
    },
    "1169": {
      "op": "bytec 4 // \"accumulatedRewardsPerShare\"",
      "defined_out": [
        "\"accumulatedRewardsPerShare\"",
        "0",
        "stakeInfo#0",
        "tmp%1#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "stakeInfo#0",
        "tmp%16#0",
        "0",
        "\"accumulatedRewardsPerShare\""
      ]
    },
    "1171": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "stakeInfo#0",
        "tmp%1#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "stakeInfo#0",
        "tmp%16#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1172": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "stakeInfo#0",
        "tmp%16#0",
        "maybe_value%1#0"
      ]
    },
    "1173": {
      "op": "*",
      "defined_out": [
        "stakeInfo#0",
        "tmp%1#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "stakeInfo#0",
        "to_encode%1#0"
      ]
    },
    "1174": {
      "op": "itob",
      "defined_out": [
        "stakeInfo#0",
        "tmp%1#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "stakeInfo#0",
        "val_as_bytes%1#0"
      ]
    },
    "1175": {
      "op": "replace2 32",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "stakeInfo#0"
      ]
    },
    "1177": {
      "op": "frame_dig 0",
      "defined_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "stakeInfo#0",
        "senderAddress#0"
      ]
    },
    "1179": {
      "op": "dup"
    },
    "1180": {
      "op": "uncover 2",
      "defined_out": [
        "senderAddress#0",
        "senderAddress#0 (copy)",
        "stakeInfo#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "senderAddress#0",
        "senderAddress#0 (copy)",
        "stakeInfo#0"
      ]
    },
    "1182": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.storeUserStakeInfo",
      "op": "callsub storeUserStakeInfo",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "senderAddress#0",
        "stakeInfo#0"
      ]
    },
    "1185": {
      "op": "pop",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "senderAddress#0"
      ]
    },
    "1186": {
      "op": "intc_0 // 0",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "senderAddress#0",
        "0"
      ]
    },
    "1187": {
      "op": "bytec_2 // \"totalStaked\"",
      "defined_out": [
        "\"totalStaked\"",
        "0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "senderAddress#0",
        "0",
        "\"totalStaked\""
      ]
    },
    "1188": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "senderAddress#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1189": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "senderAddress#0",
        "maybe_value%2#0"
      ]
    },
    "1190": {
      "op": "frame_dig -1",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "senderAddress#0",
        "maybe_value%2#0",
        "amount#0 (copy)"
      ]
    },
    "1192": {
      "op": "-",
      "defined_out": [
        "new_state_value%0#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "senderAddress#0",
        "new_state_value%0#0"
      ]
    },
    "1193": {
      "op": "bytec_2 // \"totalStaked\"",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "senderAddress#0",
        "new_state_value%0#0",
        "\"totalStaked\""
      ]
    },
    "1194": {
      "op": "swap",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "senderAddress#0",
        "\"totalStaked\"",
        "new_state_value%0#0"
      ]
    },
    "1195": {
      "op": "app_global_put",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "senderAddress#0"
      ]
    },
    "1196": {
      "op": "intc_0 // 0",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "senderAddress#0",
        "0"
      ]
    },
    "1197": {
      "op": "bytec_1 // \"asset\"",
      "defined_out": [
        "\"asset\"",
        "0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "senderAddress#0",
        "0",
        "\"asset\""
      ]
    },
    "1198": {
      "op": "app_global_get_ex",
      "defined_out": [
        "asset#0",
        "maybe_exists%3#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "senderAddress#0",
        "asset#0",
        "maybe_exists%3#0"
      ]
    },
    "1199": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "senderAddress#0",
        "asset#0"
      ]
    },
    "1200": {
      "op": "itxn_begin"
    },
    "1201": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "senderAddress#0"
      ]
    },
    "1203": {
      "op": "frame_dig -1",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "senderAddress#0",
        "amount#0 (copy)"
      ]
    },
    "1205": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "senderAddress#0"
      ]
    },
    "1207": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ]
    },
    "1209": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "4"
      ]
    },
    "1210": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ]
    },
    "1212": {
      "op": "pushint 1000 // 1000",
      "defined_out": [
        "1000",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "1000"
      ]
    },
    "1215": {
      "op": "itxn_field Fee",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ]
    },
    "1217": {
      "op": "itxn_submit"
    },
    "1218": {
      "retsub": true,
      "op": "retsub"
    },
    "1219": {
      "subroutine": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.addRewards",
      "params": {},
      "block": "addRewards",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1220": {
      "op": "bytec_0 // \"adminAddress\"",
      "defined_out": [
        "\"adminAddress\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"adminAddress\""
      ]
    },
    "1221": {
      "op": "app_global_get_ex",
      "defined_out": [
        "adminAddr#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "maybe_exists%0#0"
      ]
    },
    "1222": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "adminAddr#0"
      ]
    },
    "1223": {
      "op": "txn Sender",
      "defined_out": [
        "adminAddr#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "tmp%0#0"
      ]
    },
    "1225": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1226": {
      "error": "Only admin can add rewards",
      "op": "assert // Only admin can add rewards",
      "stack_out": []
    },
    "1227": {
      "op": "global GroupSize",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1229": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "2"
      ]
    },
    "1231": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1232": {
      "error": "Expected 2 txns in group",
      "op": "assert // Expected 2 txns in group",
      "stack_out": []
    },
    "1233": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1234": {
      "op": "bytec_1 // \"asset\"",
      "defined_out": [
        "\"asset\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"asset\""
      ]
    },
    "1235": {
      "op": "app_global_get_ex",
      "defined_out": [
        "asset#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "asset#0",
        "maybe_exists%1#0"
      ]
    },
    "1236": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "asset#0"
      ]
    },
    "1237": {
      "op": "intc_0 // 0",
      "stack_out": [
        "asset#0",
        "0"
      ]
    },
    "1238": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "asset#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "asset#0",
        "gtxn_type%0#0"
      ]
    },
    "1240": {
      "op": "dup",
      "defined_out": [
        "asset#0",
        "gtxn_type%0#0",
        "gtxn_type%0#0 (copy)"
      ],
      "stack_out": [
        "asset#0",
        "gtxn_type%0#0",
        "gtxn_type%0#0 (copy)"
      ]
    },
    "1241": {
      "op": "intc_2 // axfer",
      "defined_out": [
        "asset#0",
        "axfer",
        "gtxn_type%0#0",
        "gtxn_type%0#0 (copy)"
      ],
      "stack_out": [
        "asset#0",
        "gtxn_type%0#0",
        "gtxn_type%0#0 (copy)",
        "axfer"
      ]
    },
    "1242": {
      "op": "==",
      "defined_out": [
        "asset#0",
        "gtxn_type%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "asset#0",
        "gtxn_type%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "1243": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "asset#0",
        "gtxn_type%0#0"
      ]
    },
    "1244": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4",
        "asset#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "asset#0",
        "gtxn_type%0#0",
        "4"
      ]
    },
    "1245": {
      "op": "==",
      "defined_out": [
        "asset#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "asset#0",
        "tmp%5#0"
      ]
    },
    "1246": {
      "error": "Transaction 0 must be asset transfer",
      "op": "assert // Transaction 0 must be asset transfer",
      "stack_out": [
        "asset#0"
      ]
    },
    "1247": {
      "op": "intc_0 // 0",
      "stack_out": [
        "asset#0",
        "0"
      ]
    },
    "1248": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "asset#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "asset#0",
        "tmp%6#0"
      ]
    },
    "1250": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "asset#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "asset#0",
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "1252": {
      "op": "==",
      "defined_out": [
        "asset#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "asset#0",
        "tmp%8#0"
      ]
    },
    "1253": {
      "error": "Asset transfer must be to contract",
      "op": "assert // Asset transfer must be to contract",
      "stack_out": [
        "asset#0"
      ]
    },
    "1254": {
      "op": "intc_0 // 0",
      "stack_out": [
        "asset#0",
        "0"
      ]
    },
    "1255": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "asset#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "asset#0",
        "tmp%9#0"
      ]
    },
    "1257": {
      "op": "dup",
      "defined_out": [
        "asset#0",
        "tmp%9#0",
        "tmp%9#0 (copy)"
      ],
      "stack_out": [
        "asset#0",
        "tmp%9#0",
        "tmp%9#0 (copy)"
      ]
    },
    "1258": {
      "error": "Must provide non-zero rewards",
      "op": "assert // Must provide non-zero rewards",
      "stack_out": [
        "asset#0",
        "tmp%9#0"
      ]
    },
    "1259": {
      "op": "intc_0 // 0",
      "stack_out": [
        "asset#0",
        "tmp%9#0",
        "0"
      ]
    },
    "1260": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "asset#0",
        "tmp%11#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "asset#0",
        "tmp%9#0",
        "tmp%11#0"
      ]
    },
    "1262": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%9#0",
        "tmp%11#0",
        "asset#0"
      ]
    },
    "1264": {
      "op": "==",
      "defined_out": [
        "tmp%12#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%12#0"
      ]
    },
    "1265": {
      "error": "Incorrect asset ID",
      "op": "assert // Incorrect asset ID",
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "1266": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%9#0",
        "0"
      ]
    },
    "1267": {
      "op": "bytec_3 // \"rewardPool\"",
      "defined_out": [
        "\"rewardPool\"",
        "0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "0",
        "\"rewardPool\""
      ]
    },
    "1268": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1269": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%9#0",
        "maybe_value%2#0"
      ]
    },
    "1270": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "1271": {
      "op": "bytec_3 // \"rewardPool\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"rewardPool\""
      ]
    },
    "1272": {
      "op": "swap",
      "stack_out": [
        "\"rewardPool\"",
        "new_state_value%0#0"
      ]
    },
    "1273": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1274": {
      "retsub": true,
      "op": "retsub"
    },
    "1275": {
      "subroutine": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.getCurrentAPY",
      "params": {},
      "block": "getCurrentAPY",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "1278": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1279": {
      "op": "bytec_2 // \"totalStaked\"",
      "defined_out": [
        "\"totalStaked\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalStaked\""
      ]
    },
    "1280": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "totalStaked#0"
      ],
      "stack_out": [
        "totalStaked#0",
        "maybe_exists%0#0"
      ]
    },
    "1281": {
      "op": "swap",
      "stack_out": [
        "maybe_exists%0#0",
        "totalStaked#0"
      ]
    },
    "1282": {
      "op": "dup",
      "stack_out": [
        "maybe_exists%0#0",
        "totalStaked#0",
        "totalStaked#0 (copy)"
      ]
    },
    "1283": {
      "op": "uncover 2",
      "defined_out": [
        "maybe_exists%0#0",
        "totalStaked#0"
      ],
      "stack_out": [
        "totalStaked#0",
        "totalStaked#0",
        "maybe_exists%0#0"
      ]
    },
    "1285": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "totalStaked#0",
        "totalStaked#0"
      ]
    },
    "1286": {
      "op": "bnz getCurrentAPY_after_if_else@2",
      "stack_out": [
        "totalStaked#0"
      ]
    },
    "1289": {
      "op": "intc_0 // 0",
      "stack_out": [
        "totalStaked#0",
        "0"
      ]
    },
    "1290": {
      "op": "swap"
    },
    "1291": {
      "retsub": true,
      "op": "retsub"
    },
    "1292": {
      "block": "getCurrentAPY_after_if_else@2",
      "stack_in": [
        "totalStaked#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "totalStaked#0",
        "0"
      ]
    },
    "1293": {
      "op": "bytec 7 // \"weeklyRewards\"",
      "defined_out": [
        "\"weeklyRewards\"",
        "0"
      ],
      "stack_out": [
        "totalStaked#0",
        "0",
        "\"weeklyRewards\""
      ]
    },
    "1295": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "totalStaked#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1296": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "totalStaked#0",
        "maybe_value%1#0"
      ]
    },
    "1297": {
      "op": "pushint 52 // 52",
      "defined_out": [
        "52",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "totalStaked#0",
        "maybe_value%1#0",
        "52"
      ]
    },
    "1299": {
      "op": "*",
      "defined_out": [
        "annualRewards#0"
      ],
      "stack_out": [
        "totalStaked#0",
        "annualRewards#0"
      ]
    },
    "1300": {
      "op": "pushint 100 // 100",
      "defined_out": [
        "100",
        "annualRewards#0"
      ],
      "stack_out": [
        "totalStaked#0",
        "annualRewards#0",
        "100"
      ]
    },
    "1302": {
      "op": "*",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "totalStaked#0",
        "tmp%1#0"
      ]
    },
    "1303": {
      "op": "frame_dig 0",
      "defined_out": [
        "tmp%1#0",
        "totalStaked#0"
      ],
      "stack_out": [
        "totalStaked#0",
        "tmp%1#0",
        "totalStaked#0"
      ]
    },
    "1305": {
      "op": "/",
      "defined_out": [
        "apy#0",
        "totalStaked#0"
      ],
      "stack_out": [
        "totalStaked#0",
        "apy#0"
      ]
    },
    "1306": {
      "op": "swap"
    },
    "1307": {
      "retsub": true,
      "op": "retsub"
    },
    "1308": {
      "subroutine": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.getPendingRewards",
      "params": {
        "userAddress#0": "bytes"
      },
      "block": "getPendingRewards",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1311": {
      "op": "frame_dig -1",
      "defined_out": [
        "userAddress#0 (copy)"
      ],
      "stack_out": [
        "userAddress#0 (copy)"
      ]
    },
    "1313": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.calculatePendingRewards",
      "op": "callsub calculatePendingRewards",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1316": {
      "retsub": true,
      "op": "retsub"
    },
    "1317": {
      "subroutine": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.triggerRewardDistribution",
      "params": {},
      "block": "triggerRewardDistribution",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1318": {
      "op": "bytec_0 // \"adminAddress\"",
      "defined_out": [
        "\"adminAddress\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"adminAddress\""
      ]
    },
    "1319": {
      "op": "app_global_get_ex",
      "defined_out": [
        "adminAddr#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "maybe_exists%0#0"
      ]
    },
    "1320": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "adminAddr#0"
      ]
    },
    "1321": {
      "op": "txn Sender",
      "defined_out": [
        "adminAddr#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "tmp%0#0"
      ]
    },
    "1323": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1324": {
      "error": "Only admin can trigger distribution",
      "op": "assert // Only admin can trigger distribution",
      "stack_out": []
    },
    "1325": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.updateRewards",
      "op": "callsub updateRewards"
    },
    "1328": {
      "retsub": true,
      "op": "retsub"
    },
    "1329": {
      "subroutine": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.updateAdmin",
      "params": {
        "newAdminAddress#0": "bytes"
      },
      "block": "updateAdmin",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1332": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1333": {
      "op": "bytec_0 // \"adminAddress\"",
      "defined_out": [
        "\"adminAddress\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"adminAddress\""
      ]
    },
    "1334": {
      "op": "app_global_get_ex",
      "defined_out": [
        "adminAddr#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "maybe_exists%0#0"
      ]
    },
    "1335": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "adminAddr#0"
      ]
    },
    "1336": {
      "op": "txn Sender",
      "defined_out": [
        "adminAddr#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "tmp%0#0"
      ]
    },
    "1338": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1339": {
      "error": "Only admin can update admin",
      "op": "assert // Only admin can update admin",
      "stack_out": []
    },
    "1340": {
      "op": "bytec_0 // \"adminAddress\"",
      "stack_out": [
        "\"adminAddress\""
      ]
    },
    "1341": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"adminAddress\"",
        "newAdminAddress#0 (copy)"
      ],
      "stack_out": [
        "\"adminAddress\"",
        "newAdminAddress#0 (copy)"
      ]
    },
    "1343": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1344": {
      "retsub": true,
      "op": "retsub"
    },
    "1345": {
      "subroutine": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.getUserStats",
      "params": {
        "userAddress#0": "bytes"
      },
      "block": "getUserStats",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1348": {
      "op": "frame_dig -1",
      "defined_out": [
        "userAddress#0 (copy)"
      ],
      "stack_out": [
        "userAddress#0 (copy)"
      ]
    },
    "1350": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.getUserStakeInfo",
      "op": "callsub getUserStakeInfo",
      "defined_out": [
        "stakeInfo#0"
      ],
      "stack_out": [
        "stakeInfo#0"
      ]
    },
    "1353": {
      "op": "frame_dig -1",
      "stack_out": [
        "stakeInfo#0",
        "userAddress#0 (copy)"
      ]
    },
    "1355": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.calculatePendingRewards",
      "op": "callsub calculatePendingRewards",
      "defined_out": [
        "pendingRewards#0",
        "stakeInfo#0"
      ],
      "stack_out": [
        "stakeInfo#0",
        "pendingRewards#0"
      ]
    },
    "1358": {
      "op": "dig 1",
      "defined_out": [
        "pendingRewards#0",
        "stakeInfo#0",
        "stakeInfo#0 (copy)"
      ],
      "stack_out": [
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#0 (copy)"
      ]
    },
    "1360": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "pendingRewards#0",
        "stakeInfo#0",
        "stakeInfo#0 (copy)"
      ],
      "stack_out": [
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#0 (copy)",
        "0"
      ]
    },
    "1361": {
      "op": "extract_uint64",
      "defined_out": [
        "pendingRewards#0",
        "stakeInfo#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "stakeInfo#0",
        "pendingRewards#0",
        "tmp%1#0"
      ]
    },
    "1362": {
      "op": "dig 2",
      "stack_out": [
        "stakeInfo#0",
        "pendingRewards#0",
        "tmp%1#0",
        "stakeInfo#0 (copy)"
      ]
    },
    "1364": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "pendingRewards#0",
        "stakeInfo#0",
        "stakeInfo#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "stakeInfo#0",
        "pendingRewards#0",
        "tmp%1#0",
        "stakeInfo#0 (copy)",
        "8"
      ]
    },
    "1365": {
      "op": "extract_uint64",
      "defined_out": [
        "pendingRewards#0",
        "stakeInfo#0",
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "stakeInfo#0",
        "pendingRewards#0",
        "tmp%1#0",
        "tmp%3#0"
      ]
    },
    "1366": {
      "op": "dig 3",
      "stack_out": [
        "stakeInfo#0",
        "pendingRewards#0",
        "tmp%1#0",
        "tmp%3#0",
        "stakeInfo#0 (copy)"
      ]
    },
    "1368": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "pendingRewards#0",
        "stakeInfo#0",
        "stakeInfo#0 (copy)",
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "stakeInfo#0",
        "pendingRewards#0",
        "tmp%1#0",
        "tmp%3#0",
        "stakeInfo#0 (copy)",
        "16"
      ]
    },
    "1370": {
      "op": "extract_uint64",
      "defined_out": [
        "pendingRewards#0",
        "stakeInfo#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "stakeInfo#0",
        "pendingRewards#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0"
      ]
    },
    "1371": {
      "op": "dig 4",
      "stack_out": [
        "stakeInfo#0",
        "pendingRewards#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "stakeInfo#0 (copy)"
      ]
    },
    "1373": {
      "op": "pushint 24 // 24",
      "defined_out": [
        "24",
        "pendingRewards#0",
        "stakeInfo#0",
        "stakeInfo#0 (copy)",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "stakeInfo#0",
        "pendingRewards#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "stakeInfo#0 (copy)",
        "24"
      ]
    },
    "1375": {
      "op": "extract_uint64",
      "defined_out": [
        "pendingRewards#0",
        "stakeInfo#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "stakeInfo#0",
        "pendingRewards#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "1376": {
      "op": "uncover 5",
      "stack_out": [
        "pendingRewards#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "stakeInfo#0"
      ]
    },
    "1378": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "pendingRewards#0",
        "stakeInfo#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "stakeInfo#0",
        "32"
      ]
    },
    "1380": {
      "op": "extract_uint64",
      "defined_out": [
        "pendingRewards#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ]
    },
    "1381": {
      "op": "uncover 4",
      "stack_out": [
        "pendingRewards#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%1#0"
      ]
    },
    "1383": {
      "op": "itob",
      "defined_out": [
        "array%sub_item%0#1",
        "pendingRewards#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "array%sub_item%0#1"
      ]
    },
    "1384": {
      "op": "uncover 4",
      "stack_out": [
        "pendingRewards#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "array%sub_item%0#1",
        "tmp%3#0"
      ]
    },
    "1386": {
      "op": "itob",
      "defined_out": [
        "array%sub_item%0#1",
        "array%sub_item%1#1",
        "pendingRewards#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "array%sub_item%0#1",
        "array%sub_item%1#1"
      ]
    },
    "1387": {
      "op": "concat",
      "defined_out": [
        "array%data%1#1",
        "pendingRewards#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "array%data%1#1"
      ]
    },
    "1388": {
      "op": "uncover 3",
      "stack_out": [
        "pendingRewards#0",
        "tmp%7#0",
        "tmp%9#0",
        "array%data%1#1",
        "tmp%5#0"
      ]
    },
    "1390": {
      "op": "itob",
      "defined_out": [
        "array%data%1#1",
        "array%sub_item%2#1",
        "pendingRewards#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "tmp%7#0",
        "tmp%9#0",
        "array%data%1#1",
        "array%sub_item%2#1"
      ]
    },
    "1391": {
      "op": "concat",
      "defined_out": [
        "array%data%2#1",
        "pendingRewards#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "tmp%7#0",
        "tmp%9#0",
        "array%data%2#1"
      ]
    },
    "1392": {
      "op": "uncover 2",
      "stack_out": [
        "pendingRewards#0",
        "tmp%9#0",
        "array%data%2#1",
        "tmp%7#0"
      ]
    },
    "1394": {
      "op": "itob",
      "defined_out": [
        "array%data%2#1",
        "array%sub_item%3#1",
        "pendingRewards#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "tmp%9#0",
        "array%data%2#1",
        "array%sub_item%3#1"
      ]
    },
    "1395": {
      "op": "concat",
      "defined_out": [
        "array%data%3#1",
        "pendingRewards#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "tmp%9#0",
        "array%data%3#1"
      ]
    },
    "1396": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%9#0",
        "array%data%3#1",
        "pendingRewards#0"
      ]
    },
    "1398": {
      "op": "itob",
      "defined_out": [
        "array%data%3#1",
        "array%sub_item%4#1",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "array%data%3#1",
        "array%sub_item%4#1"
      ]
    },
    "1399": {
      "op": "concat",
      "defined_out": [
        "array%data%4#1",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "array%data%4#1"
      ]
    },
    "1400": {
      "op": "swap",
      "stack_out": [
        "array%data%4#1",
        "tmp%9#0"
      ]
    },
    "1401": {
      "op": "itob",
      "defined_out": [
        "array%data%4#1",
        "array%sub_item%5#1"
      ],
      "stack_out": [
        "array%data%4#1",
        "array%sub_item%5#1"
      ]
    },
    "1402": {
      "op": "concat",
      "defined_out": [
        "array%data%5#1"
      ],
      "stack_out": [
        "array%data%5#1"
      ]
    },
    "1403": {
      "op": "dup",
      "defined_out": [
        "array%data%5#1",
        "array%data%5#1 (copy)"
      ],
      "stack_out": [
        "array%data%5#1",
        "array%data%5#1 (copy)"
      ]
    },
    "1404": {
      "op": "len",
      "defined_out": [
        "array%data%5#1",
        "byte_len%0#0"
      ],
      "stack_out": [
        "array%data%5#1",
        "byte_len%0#0"
      ]
    },
    "1405": {
      "op": "intc_3 // 8",
      "stack_out": [
        "array%data%5#1",
        "byte_len%0#0",
        "8"
      ]
    },
    "1406": {
      "op": "/",
      "defined_out": [
        "array%data%5#1",
        "len_%0#0"
      ],
      "stack_out": [
        "array%data%5#1",
        "len_%0#0"
      ]
    },
    "1407": {
      "op": "itob",
      "defined_out": [
        "array%data%5#1",
        "as_bytes%0#0"
      ],
      "stack_out": [
        "array%data%5#1",
        "as_bytes%0#0"
      ]
    },
    "1408": {
      "op": "extract 6 2",
      "defined_out": [
        "array%data%5#1",
        "len_16_bit%0#0"
      ],
      "stack_out": [
        "array%data%5#1",
        "len_16_bit%0#0"
      ]
    },
    "1411": {
      "op": "swap",
      "stack_out": [
        "len_16_bit%0#0",
        "array%data%5#1"
      ]
    },
    "1412": {
      "op": "concat",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "1413": {
      "retsub": true,
      "op": "retsub"
    },
    "1414": {
      "subroutine": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.getContractStats",
      "params": {},
      "block": "getContractStats",
      "stack_in": [],
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.getCurrentAPY",
      "op": "callsub getCurrentAPY",
      "defined_out": [
        "currentAPY#0"
      ],
      "stack_out": [
        "currentAPY#0"
      ]
    },
    "1417": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "currentAPY#0"
      ],
      "stack_out": [
        "currentAPY#0",
        "0"
      ]
    },
    "1418": {
      "op": "bytec_1 // \"asset\"",
      "defined_out": [
        "\"asset\"",
        "0",
        "currentAPY#0"
      ],
      "stack_out": [
        "currentAPY#0",
        "0",
        "\"asset\""
      ]
    },
    "1419": {
      "op": "app_global_get_ex",
      "defined_out": [
        "currentAPY#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "currentAPY#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1420": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "currentAPY#0",
        "maybe_value%0#0"
      ]
    },
    "1421": {
      "op": "intc_0 // 0",
      "stack_out": [
        "currentAPY#0",
        "maybe_value%0#0",
        "0"
      ]
    },
    "1422": {
      "op": "bytec_2 // \"totalStaked\"",
      "defined_out": [
        "\"totalStaked\"",
        "0",
        "currentAPY#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "currentAPY#0",
        "maybe_value%0#0",
        "0",
        "\"totalStaked\""
      ]
    },
    "1423": {
      "op": "app_global_get_ex",
      "defined_out": [
        "currentAPY#0",
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "currentAPY#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1424": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "currentAPY#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "1425": {
      "op": "intc_0 // 0",
      "stack_out": [
        "currentAPY#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "0"
      ]
    },
    "1426": {
      "op": "bytec 5 // \"lastRewardTime\"",
      "defined_out": [
        "\"lastRewardTime\"",
        "0",
        "currentAPY#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "currentAPY#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "0",
        "\"lastRewardTime\""
      ]
    },
    "1428": {
      "op": "app_global_get_ex",
      "defined_out": [
        "currentAPY#0",
        "maybe_exists%2#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "currentAPY#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1429": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "currentAPY#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ]
    },
    "1430": {
      "op": "intc_0 // 0",
      "stack_out": [
        "currentAPY#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "0"
      ]
    },
    "1431": {
      "op": "bytec 8 // \"rewardPeriod\"",
      "defined_out": [
        "\"rewardPeriod\"",
        "0",
        "currentAPY#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "currentAPY#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "0",
        "\"rewardPeriod\""
      ]
    },
    "1433": {
      "op": "app_global_get_ex",
      "defined_out": [
        "currentAPY#0",
        "maybe_exists%3#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "currentAPY#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1434": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "currentAPY#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ]
    },
    "1435": {
      "op": "intc_0 // 0",
      "stack_out": [
        "currentAPY#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "0"
      ]
    },
    "1436": {
      "op": "bytec 6 // \"minimumStake\"",
      "defined_out": [
        "\"minimumStake\"",
        "0",
        "currentAPY#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "currentAPY#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "0",
        "\"minimumStake\""
      ]
    },
    "1438": {
      "op": "app_global_get_ex",
      "defined_out": [
        "currentAPY#0",
        "maybe_exists%4#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "currentAPY#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "1439": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "currentAPY#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0"
      ]
    },
    "1440": {
      "op": "intc_0 // 0",
      "stack_out": [
        "currentAPY#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "0"
      ]
    },
    "1441": {
      "op": "bytec_3 // \"rewardPool\"",
      "defined_out": [
        "\"rewardPool\"",
        "0",
        "currentAPY#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "currentAPY#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "0",
        "\"rewardPool\""
      ]
    },
    "1442": {
      "op": "app_global_get_ex",
      "defined_out": [
        "currentAPY#0",
        "maybe_exists%5#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "currentAPY#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "1443": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "currentAPY#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0"
      ]
    },
    "1444": {
      "op": "intc_0 // 0",
      "stack_out": [
        "currentAPY#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "0"
      ]
    },
    "1445": {
      "op": "bytec 4 // \"accumulatedRewardsPerShare\"",
      "defined_out": [
        "\"accumulatedRewardsPerShare\"",
        "0",
        "currentAPY#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "currentAPY#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "0",
        "\"accumulatedRewardsPerShare\""
      ]
    },
    "1447": {
      "op": "app_global_get_ex",
      "defined_out": [
        "currentAPY#0",
        "maybe_exists%6#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "currentAPY#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "1448": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "currentAPY#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0"
      ]
    },
    "1449": {
      "op": "uncover 6",
      "stack_out": [
        "currentAPY#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%0#0"
      ]
    },
    "1451": {
      "op": "itob",
      "defined_out": [
        "array%sub_item%0#1",
        "currentAPY#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "currentAPY#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "array%sub_item%0#1"
      ]
    },
    "1452": {
      "op": "uncover 6",
      "stack_out": [
        "currentAPY#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "array%sub_item%0#1",
        "maybe_value%1#0"
      ]
    },
    "1454": {
      "op": "itob",
      "defined_out": [
        "array%sub_item%0#1",
        "array%sub_item%1#1",
        "currentAPY#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "currentAPY#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "array%sub_item%0#1",
        "array%sub_item%1#1"
      ]
    },
    "1455": {
      "op": "concat",
      "defined_out": [
        "array%data%1#1",
        "currentAPY#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "currentAPY#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "array%data%1#1"
      ]
    },
    "1456": {
      "op": "uncover 6",
      "stack_out": [
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "array%data%1#1",
        "currentAPY#0"
      ]
    },
    "1458": {
      "op": "itob",
      "defined_out": [
        "array%data%1#1",
        "array%sub_item%2#1",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "array%data%1#1",
        "array%sub_item%2#1"
      ]
    },
    "1459": {
      "op": "concat",
      "defined_out": [
        "array%data%2#1",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "array%data%2#1"
      ]
    },
    "1460": {
      "op": "uncover 5",
      "stack_out": [
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "array%data%2#1",
        "maybe_value%2#0"
      ]
    },
    "1462": {
      "op": "itob",
      "defined_out": [
        "array%data%2#1",
        "array%sub_item%3#1",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "array%data%2#1",
        "array%sub_item%3#1"
      ]
    },
    "1463": {
      "op": "concat",
      "defined_out": [
        "array%data%3#1",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "array%data%3#1"
      ]
    },
    "1464": {
      "op": "uncover 4",
      "stack_out": [
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "array%data%3#1",
        "maybe_value%3#0"
      ]
    },
    "1466": {
      "op": "itob",
      "defined_out": [
        "array%data%3#1",
        "array%sub_item%4#1",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "array%data%3#1",
        "array%sub_item%4#1"
      ]
    },
    "1467": {
      "op": "concat",
      "defined_out": [
        "array%data%4#1",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "array%data%4#1"
      ]
    },
    "1468": {
      "op": "uncover 3",
      "stack_out": [
        "maybe_value%5#0",
        "maybe_value%6#0",
        "array%data%4#1",
        "maybe_value%4#0"
      ]
    },
    "1470": {
      "op": "itob",
      "defined_out": [
        "array%data%4#1",
        "array%sub_item%5#1",
        "maybe_value%5#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "maybe_value%5#0",
        "maybe_value%6#0",
        "array%data%4#1",
        "array%sub_item%5#1"
      ]
    },
    "1471": {
      "op": "concat",
      "defined_out": [
        "array%data%5#1",
        "maybe_value%5#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "maybe_value%5#0",
        "maybe_value%6#0",
        "array%data%5#1"
      ]
    },
    "1472": {
      "op": "uncover 2",
      "stack_out": [
        "maybe_value%6#0",
        "array%data%5#1",
        "maybe_value%5#0"
      ]
    },
    "1474": {
      "op": "itob",
      "defined_out": [
        "array%data%5#1",
        "array%sub_item%6#1",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "maybe_value%6#0",
        "array%data%5#1",
        "array%sub_item%6#1"
      ]
    },
    "1475": {
      "op": "concat",
      "defined_out": [
        "array%data%6#1",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "maybe_value%6#0",
        "array%data%6#1"
      ]
    },
    "1476": {
      "op": "swap",
      "stack_out": [
        "array%data%6#1",
        "maybe_value%6#0"
      ]
    },
    "1477": {
      "op": "itob",
      "defined_out": [
        "array%data%6#1",
        "array%sub_item%7#1"
      ],
      "stack_out": [
        "array%data%6#1",
        "array%sub_item%7#1"
      ]
    },
    "1478": {
      "op": "concat",
      "defined_out": [
        "array%data%7#1"
      ],
      "stack_out": [
        "array%data%7#1"
      ]
    },
    "1479": {
      "op": "dup",
      "defined_out": [
        "array%data%7#1",
        "array%data%7#1 (copy)"
      ],
      "stack_out": [
        "array%data%7#1",
        "array%data%7#1 (copy)"
      ]
    },
    "1480": {
      "op": "len",
      "defined_out": [
        "array%data%7#1",
        "byte_len%0#0"
      ],
      "stack_out": [
        "array%data%7#1",
        "byte_len%0#0"
      ]
    },
    "1481": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "array%data%7#1",
        "byte_len%0#0"
      ],
      "stack_out": [
        "array%data%7#1",
        "byte_len%0#0",
        "8"
      ]
    },
    "1482": {
      "op": "/",
      "defined_out": [
        "array%data%7#1",
        "len_%0#0"
      ],
      "stack_out": [
        "array%data%7#1",
        "len_%0#0"
      ]
    },
    "1483": {
      "op": "itob",
      "defined_out": [
        "array%data%7#1",
        "as_bytes%0#0"
      ],
      "stack_out": [
        "array%data%7#1",
        "as_bytes%0#0"
      ]
    },
    "1484": {
      "op": "extract 6 2",
      "defined_out": [
        "array%data%7#1",
        "len_16_bit%0#0"
      ],
      "stack_out": [
        "array%data%7#1",
        "len_16_bit%0#0"
      ]
    },
    "1487": {
      "op": "swap",
      "stack_out": [
        "len_16_bit%0#0",
        "array%data%7#1"
      ]
    },
    "1488": {
      "op": "concat",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "1489": {
      "retsub": true,
      "op": "retsub"
    },
    "1490": {
      "subroutine": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.emergencyWithdrawRewards",
      "params": {
        "amount#0": "uint64"
      },
      "block": "emergencyWithdrawRewards",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1493": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1494": {
      "op": "bytec_0 // \"adminAddress\"",
      "defined_out": [
        "\"adminAddress\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"adminAddress\""
      ]
    },
    "1495": {
      "op": "app_global_get_ex",
      "defined_out": [
        "adminAddr#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "maybe_exists%0#0"
      ]
    },
    "1496": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "adminAddr#0"
      ]
    },
    "1497": {
      "op": "txn Sender",
      "defined_out": [
        "adminAddr#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "tmp%0#0"
      ]
    },
    "1499": {
      "op": "dig 1",
      "defined_out": [
        "adminAddr#0",
        "adminAddr#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "tmp%0#0",
        "adminAddr#0 (copy)"
      ]
    },
    "1501": {
      "op": "==",
      "defined_out": [
        "adminAddr#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "tmp%1#0"
      ]
    },
    "1502": {
      "error": "Only admin can emergency withdraw",
      "op": "assert // Only admin can emergency withdraw",
      "stack_out": [
        "adminAddr#0"
      ]
    },
    "1503": {
      "op": "intc_0 // 0",
      "stack_out": [
        "adminAddr#0",
        "0"
      ]
    },
    "1504": {
      "op": "bytec_3 // \"rewardPool\"",
      "defined_out": [
        "\"rewardPool\"",
        "0",
        "adminAddr#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "0",
        "\"rewardPool\""
      ]
    },
    "1505": {
      "op": "app_global_get_ex",
      "defined_out": [
        "adminAddr#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1506": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "adminAddr#0",
        "maybe_value%1#0"
      ]
    },
    "1507": {
      "op": "frame_dig -1",
      "defined_out": [
        "adminAddr#0",
        "amount#0 (copy)",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "maybe_value%1#0",
        "amount#0 (copy)"
      ]
    },
    "1509": {
      "op": ">=",
      "defined_out": [
        "adminAddr#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "tmp%2#0"
      ]
    },
    "1510": {
      "error": "Insufficient reward pool",
      "op": "assert // Insufficient reward pool",
      "stack_out": [
        "adminAddr#0"
      ]
    },
    "1511": {
      "op": "intc_0 // 0",
      "stack_out": [
        "adminAddr#0",
        "0"
      ]
    },
    "1512": {
      "op": "bytec_3 // \"rewardPool\"",
      "stack_out": [
        "adminAddr#0",
        "0",
        "\"rewardPool\""
      ]
    },
    "1513": {
      "op": "app_global_get_ex",
      "defined_out": [
        "adminAddr#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1514": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "adminAddr#0",
        "maybe_value%2#0"
      ]
    },
    "1515": {
      "op": "frame_dig -1",
      "stack_out": [
        "adminAddr#0",
        "maybe_value%2#0",
        "amount#0 (copy)"
      ]
    },
    "1517": {
      "op": "-",
      "defined_out": [
        "adminAddr#0",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "new_state_value%0#0"
      ]
    },
    "1518": {
      "op": "bytec_3 // \"rewardPool\"",
      "stack_out": [
        "adminAddr#0",
        "new_state_value%0#0",
        "\"rewardPool\""
      ]
    },
    "1519": {
      "op": "swap",
      "stack_out": [
        "adminAddr#0",
        "\"rewardPool\"",
        "new_state_value%0#0"
      ]
    },
    "1520": {
      "op": "app_global_put",
      "stack_out": [
        "adminAddr#0"
      ]
    },
    "1521": {
      "op": "intc_0 // 0",
      "stack_out": [
        "adminAddr#0",
        "0"
      ]
    },
    "1522": {
      "op": "bytec_1 // \"asset\"",
      "defined_out": [
        "\"asset\"",
        "0",
        "adminAddr#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "0",
        "\"asset\""
      ]
    },
    "1523": {
      "op": "app_global_get_ex",
      "defined_out": [
        "adminAddr#0",
        "asset#0",
        "maybe_exists%3#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "asset#0",
        "maybe_exists%3#0"
      ]
    },
    "1524": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "adminAddr#0",
        "asset#0"
      ]
    },
    "1525": {
      "op": "itxn_begin"
    },
    "1526": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "adminAddr#0"
      ]
    },
    "1528": {
      "op": "frame_dig -1",
      "stack_out": [
        "adminAddr#0",
        "amount#0 (copy)"
      ]
    },
    "1530": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "adminAddr#0"
      ]
    },
    "1532": {
      "op": "itxn_field AssetReceiver",
      "stack_out": []
    },
    "1534": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "4"
      ]
    },
    "1535": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1537": {
      "op": "pushint 1000 // 1000",
      "defined_out": [
        "1000"
      ],
      "stack_out": [
        "1000"
      ]
    },
    "1540": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1542": {
      "op": "itxn_submit"
    },
    "1543": {
      "retsub": true,
      "op": "retsub"
    },
    "1544": {
      "subroutine": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.deleteUserBox",
      "params": {
        "userAddress#0": "bytes"
      },
      "block": "deleteUserBox",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1547": {
      "op": "intc_0 // 0",
      "stack_out": [
        "userBox#0"
      ]
    },
    "1548": {
      "op": "dup",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "userBox#0",
        "0"
      ]
    },
    "1549": {
      "op": "bytec_0 // \"adminAddress\"",
      "defined_out": [
        "\"adminAddress\"",
        "0"
      ],
      "stack_out": [
        "userBox#0",
        "0",
        "\"adminAddress\""
      ]
    },
    "1550": {
      "op": "app_global_get_ex",
      "defined_out": [
        "adminAddr#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "maybe_exists%0#0"
      ]
    },
    "1551": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "userBox#0",
        "adminAddr#0"
      ]
    },
    "1552": {
      "op": "txn Sender",
      "defined_out": [
        "adminAddr#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "tmp%0#0"
      ]
    },
    "1554": {
      "op": "frame_dig -1",
      "defined_out": [
        "adminAddr#0",
        "tmp%0#0",
        "userAddress#0 (copy)"
      ],
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "tmp%0#0",
        "userAddress#0 (copy)"
      ]
    },
    "1556": {
      "op": "==",
      "defined_out": [
        "adminAddr#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "tmp%1#0"
      ]
    },
    "1557": {
      "op": "bnz deleteUserBox_bool_true@2",
      "stack_out": [
        "userBox#0",
        "adminAddr#0"
      ]
    },
    "1560": {
      "op": "txn Sender",
      "defined_out": [
        "adminAddr#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "tmp%2#0"
      ]
    },
    "1562": {
      "op": "frame_dig 1",
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "tmp%2#0",
        "adminAddr#0"
      ]
    },
    "1564": {
      "op": "==",
      "defined_out": [
        "adminAddr#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "tmp%3#0"
      ]
    },
    "1565": {
      "op": "bz deleteUserBox_bool_false@3",
      "stack_out": [
        "userBox#0",
        "adminAddr#0"
      ]
    },
    "1568": {
      "block": "deleteUserBox_bool_true@2",
      "stack_in": [
        "userBox#0",
        "adminAddr#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "or_result%0#0"
      ]
    },
    "1569": {
      "block": "deleteUserBox_bool_merge@4",
      "stack_in": [
        "userBox#0",
        "adminAddr#0",
        "or_result%0#0"
      ],
      "error": "Only box owner or admin can delete box",
      "op": "assert // Only box owner or admin can delete box",
      "defined_out": [],
      "stack_out": [
        "userBox#0",
        "adminAddr#0"
      ]
    },
    "1570": {
      "op": "frame_dig -1",
      "defined_out": [
        "userAddress#0 (copy)"
      ],
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "userAddress#0 (copy)"
      ]
    },
    "1572": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.getUserStakeInfo",
      "op": "callsub getUserStakeInfo",
      "defined_out": [
        "stakeInfo#0"
      ],
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "stakeInfo#0"
      ]
    },
    "1575": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "stakeInfo#0"
      ],
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "stakeInfo#0",
        "0"
      ]
    },
    "1576": {
      "op": "extract_uint64",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "tmp%5#0"
      ]
    },
    "1577": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "tmp%6#0"
      ]
    },
    "1578": {
      "error": "User still has active stake",
      "op": "assert // User still has active stake",
      "stack_out": [
        "userBox#0",
        "adminAddr#0"
      ]
    },
    "1579": {
      "op": "bytec 10 // \"stakers\"",
      "defined_out": [
        "\"stakers\""
      ],
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "\"stakers\""
      ]
    },
    "1581": {
      "op": "frame_dig -1",
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "\"stakers\"",
        "userAddress#0 (copy)"
      ]
    },
    "1583": {
      "op": "concat",
      "defined_out": [
        "userBox#0"
      ],
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "userBox#0"
      ]
    },
    "1584": {
      "op": "dup",
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "userBox#0",
        "userBox#0"
      ]
    },
    "1585": {
      "op": "frame_bury 0",
      "defined_out": [
        "userBox#0"
      ],
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "userBox#0"
      ]
    },
    "1587": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "userBox#0"
      ],
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1588": {
      "op": "bury 1",
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "maybe_exists%1#0"
      ]
    },
    "1590": {
      "op": "bz deleteUserBox_after_if_else@6",
      "stack_out": [
        "userBox#0",
        "adminAddr#0"
      ]
    },
    "1593": {
      "op": "frame_dig 0",
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "userBox#0"
      ]
    },
    "1595": {
      "op": "box_del",
      "defined_out": [
        "userBox#0",
        "{box_del}"
      ],
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "{box_del}"
      ]
    },
    "1596": {
      "op": "pop",
      "stack_out": [
        "userBox#0",
        "adminAddr#0"
      ]
    },
    "1597": {
      "block": "deleteUserBox_after_if_else@6",
      "stack_in": [
        "userBox#0",
        "adminAddr#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "1598": {
      "block": "deleteUserBox_bool_false@3",
      "stack_in": [
        "userBox#0",
        "adminAddr#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "or_result%0#0"
      ]
    },
    "1599": {
      "op": "b deleteUserBox_bool_merge@4"
    },
    "1602": {
      "subroutine": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.updateWeeklyRewards",
      "params": {
        "newWeeklyRewards#0": "uint64"
      },
      "block": "updateWeeklyRewards",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1605": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1606": {
      "op": "bytec_0 // \"adminAddress\"",
      "defined_out": [
        "\"adminAddress\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"adminAddress\""
      ]
    },
    "1607": {
      "op": "app_global_get_ex",
      "defined_out": [
        "adminAddr#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "maybe_exists%0#0"
      ]
    },
    "1608": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "adminAddr#0"
      ]
    },
    "1609": {
      "op": "txn Sender",
      "defined_out": [
        "adminAddr#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "tmp%0#0"
      ]
    },
    "1611": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1612": {
      "error": "Only admin can update weekly rewards",
      "op": "assert // Only admin can update weekly rewards",
      "stack_out": []
    },
    "1613": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.updateRewards",
      "op": "callsub updateRewards"
    },
    "1616": {
      "op": "bytec 7 // \"weeklyRewards\"",
      "defined_out": [
        "\"weeklyRewards\""
      ],
      "stack_out": [
        "\"weeklyRewards\""
      ]
    },
    "1618": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"weeklyRewards\"",
        "newWeeklyRewards#0 (copy)"
      ],
      "stack_out": [
        "\"weeklyRewards\"",
        "newWeeklyRewards#0 (copy)"
      ]
    },
    "1620": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1621": {
      "retsub": true,
      "op": "retsub"
    },
    "1622": {
      "subroutine": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.updateRewardPeriod",
      "params": {
        "newRewardPeriod#0": "uint64"
      },
      "block": "updateRewardPeriod",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1625": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1626": {
      "op": "bytec_0 // \"adminAddress\"",
      "defined_out": [
        "\"adminAddress\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"adminAddress\""
      ]
    },
    "1627": {
      "op": "app_global_get_ex",
      "defined_out": [
        "adminAddr#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "maybe_exists%0#0"
      ]
    },
    "1628": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "adminAddr#0"
      ]
    },
    "1629": {
      "op": "txn Sender",
      "defined_out": [
        "adminAddr#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "tmp%0#0"
      ]
    },
    "1631": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1632": {
      "error": "Only admin can update reward period",
      "op": "assert // Only admin can update reward period",
      "stack_out": []
    },
    "1633": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.updateRewards",
      "op": "callsub updateRewards"
    },
    "1636": {
      "op": "bytec 8 // \"rewardPeriod\"",
      "defined_out": [
        "\"rewardPeriod\""
      ],
      "stack_out": [
        "\"rewardPeriod\""
      ]
    },
    "1638": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"rewardPeriod\"",
        "newRewardPeriod#0 (copy)"
      ],
      "stack_out": [
        "\"rewardPeriod\"",
        "newRewardPeriod#0 (copy)"
      ]
    },
    "1640": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1641": {
      "retsub": true,
      "op": "retsub"
    }
  }
}