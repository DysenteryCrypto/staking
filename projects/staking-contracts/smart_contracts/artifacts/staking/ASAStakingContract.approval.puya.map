{
  "version": 3,
  "sources": [
    "/home/justin/projects/dod_staking/staking/projects/staking-contracts/smart_contracts/staking/contract.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmDS;AAA2C;AAAlD;AACO;AAAoD;;AAA3D;AACO;AAAkD;AAAzD;AACO;;AAAqD;AAA5D;AACO;;AAAmD;AAA1D;AACO;AAAiD;AAAxD;AACO;;AAAiE;AAAxE;AAGO;;AAAoD;AAA3D;AACO;;AAAmD;AAA1D;AACO;;AAAgD;AAAvD;AAbF;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAkgBG;;AAAA;AAAA;AAAA;;AAAA;AAlgBH;;;AAAA;AAkgBG;;;AAAA;;AAhBA;;AAAA;AAAA;AAAA;;AAAA;AAlfH;;;AAAA;AAkfG;;;AAAA;;AAtBA;;AAAA;AAAA;AAAA;;AAAA;AA5dH;;;AAAA;AAAA;;AA4dG;;;AAAA;;AA5BA;;AAAA;AAAA;AAAA;;AAAA;AAhcH;;;AAAA;AAgcG;;;AAAA;;AArBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AApBA;;AAAA;AAAA;AAAA;;AAAA;AAvZH;;;AAAA;AAAA;;AAuZG;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAbA;;AAAA;AAAA;AAAA;;AAAA;AA1YH;;;AAAA;AAAA;;AA0YG;;;AAAA;;AAdA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AATA;;AAAA;AAAA;AAAA;;AAAA;AAnXH;;;AAAA;AAAA;;AAmXG;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AApBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAxBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AA3CA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAlEA;;AAAA;AAAA;AAAA;;AAAA;AA1NH;;;AAAA;AA0NG;;;AAAA;;AAhEA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAtBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAhCA;;AAAA;AAAA;AAAA;;AAAA;AApGH;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAoGG;;;AAAA;;AA7DD;;AAAA;AAAA;AAAA;;AAAA;AAvCF;;;AAAA;AAAA;;AAAA;;;AAuCE;;;AAAA;AAAA;;AAnBA;;AAAA;AAAA;AAAA;;AAAA;AApBF;;;AAAA;AAAA;;AAoBE;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AApBF;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAoBE;;;AAL6D;;AAMrD;;AANqD;AAMrD;AAEM;AAAA;;AAAZ;;;AACiB;;AAAA;AAAA;AAAf;AAAA;AAEO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AAAA;AAaJ;;;AAxB6D;;AAAA;;AAAA;AAyB3D;;AAAA;;;;AAMF;;;AAC6B;;AAArB;AA1CD;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAOA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;;AAAA;AAwCc;AAAf;AAAA;;;AAhDC;AAAA;AAAA;AAAA;AAgDD;;;AAE6B;;AAAA;;AAAA;AAAA;;AAAA;AAAzB;;AAAA;AAAA;;AAAwB;AA3C3B;AAAA;;AAAA;AAAA;AA+CG;;AAAuB;AAtD1B;AAAA;AAAA;AAAA;AASA;AAAA;;AAAA;AAAA;AAkD6B;;AAAA;AAA1B;AAAyB;AAvD5B;AAAA;;AAAA;AAAA;AAyDqC;AAzDrC;;AAyDH;AAAA;AAG0C;AAAA;;AAAA;AAAd;;AAAA;AA/DzB;;AA+DH;AAAA;AA7DG;AAAA;AAAA;AAAA;AAgEqB;AAAA;AAhErB;AAgEH;AAAA;;AAOJ;;;;;;AACQ;;AAAY;;;AAAZ;AAEQ;AAAa;AAAA;AAA3B;;;AACS;AAAP;;AAAA;AA1EG;AAAA;;AAAA;AAAA;AA+EC;;AAA2B;;AAAW;AAAtC;AAAA;;AAAA;;AA1ED;AAAA;;AAAA;AAAA;AA8EwB;;AAAA;;AAAA;AAAvB;AAAsB;AAAtB;AAAA;;AACyB;AAAA;;;AAA+B;;AAAA;;AAAA;AAE9D;;AAAA;AAF6F;;;;AAQ/F;;;AAlGO;AAAA;AAAA;AAAA;AA2GE;AAAP;AAGW;;AAAkB;;AAAtB;AAAP;AA9GK;AAiHL;;AAAA;AAhHK;AAiHL;;AAAA;AAhHK;AAiHoB;AAAzB;AAhHK;;AAiH8B;;AAAnC;AAhHK;;AAiHL;;AAAA;AAhHK;AAiHmB;AAAxB;AAhHK;;AAiHmC;AAAxC;AA9GK;;AAiHL;;AAAA;AAhHK;;AAiHL;;AAAA;AAhHK;;AAiHkB;;;;AAAvB;;AAMF;;;AAjIO;AAAA;AAAA;AAAA;AAqIM;;AAAkB;;AAAtB;AAAA;;;AAA4C;;AAAJ;;AAAA;AAAxC;;;;AAAP;AAtIK;AAAA;AAAA;AAAA;AA0IL;AAE0B;;;;;AACT;;;;;AAHjB;;;AAAA;;;AAAA;;;;;;AAcF;;;;;AAxJO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA4JL;AAGc;;AAAc;;AAArB;AAAP;AAGsC;AAAtB;;AAAA;AAAA;AAAA;AAAA;AACwB;AAAjC;AAAP;AADsC;AAEvB;;AAAyB;;AAAjC;AAAP;AAFsC;AAGvB;;AAAA;AAAA;;AAAf;AAHsC;AAIvB;;AAAR;AAAP;AAGA;;;AArKK;AAAA;;AAAA;AAAA;AA0KqB;;AAApB;AAGY;;;AAAZ;;AAGQ;AAAa;AAAA;AAAA;;;AAA3B;;;AACQ;;AAAiB;;;AAAjB;AAAA;;;;;;AACF;;;AAjLD;AAAA;AAAA;AAAA;AAiLuB;;AAAA;;;;;AAAtB;;;AAEwC;;AAAA;;AAAA;AAAA;;AAAA;AAAjB;AAAzB;;AAAA;AAAA;;AAC6E;AAAnB;AAAmB;AAA7B;;AAAA;AAAjB;AAA/B;;AAvLC;AAAA;AAAA;AAAA;AAwLwB;;AAAA;AAxLxB;AAwLD;AAAA;AArLC;AAAA;AAAA;AAAA;AAsLuB;;AAAA;AAtLvB;AAsLD;AAAA;;;;;;;;AAKuB;AAAb;AAAa;;;;AAA3B;;;AACS;;AAAA;;AAAA;AAAP;AAEmD;;AAAxB;AAA3B;;AAAA;AAAA;;;;;;AAI+D;AAAb;AAAa;AAAvB;;AAAA;AAAA;;AAAA;AAAjB;AAAzB;;AACkD;;AAAxB;AAA1B;;AAGgE;AAAb;AAAa;AArM3D;AAAA;;AAAA;AAAA;AAqMoC;AAhMpC;AAAA;;AAAA;AAAA;AAgMmC;AAAjB;AAAvB;;AAGA;;AAAA;AAAA;;;AAAA;AA5MK;AAAA;AAAA;AAAA;AA+MoB;AA/MpB;AA+ML;AAAA;;AAOF;;;;;AAGE;;;AAE0B;;AAApB;;AACY;;;AAAZ;AAAA;;AAGwB;AAAb;AAAa;AAA9B;AAAA;AACO;;AAAA;AAAP;AACA;;AAAA;AAGM;AAAiB;;;AAAjB;AAAA;;;AACF;;;AAlOC;AAAA;AAAA;AAAA;AAkOqB;;AAAA;;;;;AAAtB;;;AAC2E;;AAAA;AAAnB;AAAmB;AAA7B;;AAAA;AAAA;;AAAA;AAAjB;AAA/B;;AAnOG;AAAA;AAAA;AAAA;AAoOqB;;AAAA;AApOrB;AAoOH;AAAA;AAzOG;AAAA;AAAA;AAAA;AA6OH;;;;;;;;;;AAAA;;;AAKS;;;;AALT;;;;;;;;AAYqB;AAAa;AAAA;AAAA;;AAAhC;;AAAA;AAAJ;;;AACQ;;AAAA;;AAAyB;AAtP5B;AAAA;;AAAA;AAAA;AAwPI;AAAP;AAIwC;;AAAA;;AAAA;AAAjB;AAAzB;;AAAA;AAAA;;AAGgE;AAAb;AAAa;AA7P3D;AAAA;;AAAA;AAAA;AA6PoC;AAxPpC;AAAA;;AAAA;AAAA;AAwPmC;AAAjB;AAAvB;;AAGA;;AAAA;AAAA;;AAAA;;;AAAA;AApQK;AAAA;AAAA;AAAA;AAuQoB;;AAAA;AAvQpB;AAuQL;AAAA;AAzQK;AAAA;AAAA;AAAA;AA6QL;;;;;;;;;AAAA;;;AAKS;;;;AALT;;AAgBA;;;AAE0B;;AACpB;AAAY;;;AAGY;AAAb;AAAa;AAA9B;AAGM;;AAAiB;;;AACvB;AAAA;AAlSK;AAAA;AAAA;AAAA;AAmSE;;AAAA;AAAP;AAG6E;;AAAnB;AAAmB;AAA7B;;AAAA;AAAjB;AAA/B;;AAAA;AAAA;;AACgE;AAAb;AAAa;AAtS3D;AAAA;;AAAA;AAAA;AAsSoC;AAjSpC;AAAA;;AAAA;AAAA;AAiSmC;AAAjB;AAAvB;;AAGA;;AAAA;AAAA;;;AAAA;AA1SK;AAAA;AAAA;AAAA;AA6SmB;;AAAA;AA7SnB;AA6SL;AAAA;AAlTK;AAAA;AAAA;AAAA;AAsTL;;;;;;;AAAA;;;AAKS;;;;AALT;;AArTK;AAAA;AAAA;AAAA;AAwUM;;AAAJ;AAAP;AAGc;;AAAc;;AAArB;AAAP;AA5UK;AAAA;AAAA;AAAA;AAgViC;AAAtB;;AAAA;AAAA;AAAA;AAAA;AACwB;AAAjC;AAAP;AADsC;AAEvB;;AAAyB;;AAAjC;AAAP;AAFsC;AAGvB;;AAAf;AAAA;AAHsC;AAIvB;;AAAR;;AAAA;AAAP;AA/UK;AAAA;AAAA;AAAA;AAkVmB;AAlVnB;AAkVL;AAAA;;AAMF;;;AA3VO;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AA+VL;;;AACS;AAAP;AAAA;AAzVG;AAAA;;AAAA;AAAA;AA6VyB;;AAAA;AAGO;;;AAAhB;AAAf;;AAAc;AAEpB;AAAA;AAMF;;;AAES;;AAAA;;;AAAP;AAlXK;AAAA;AAAA;AAAA;AA6XM;;AAAJ;AAAP;AAGA;;;;AAOF;;;AAvYO;AAAA;AAAA;AAAA;AA2YM;;AAAJ;AAAP;AA3YK;AA8YL;;AAAA;;AAMF;;;AAEQ;;AAAY;;;AACZ;;AAAiB;;;AAGE;;AAAb;AAAa;AACE;;AAAf;;AAAe;AACD;;AAAd;;AAAc;AACK;;AAAnB;AAAmB;AAER;;AAAX;;AAAW;AALE;;AAAA;AACE;;AAAA;AADF;AAEC;;AAAA;AAFD;AAGM;;AAAA;AAHN;AAIvB;;AAAA;AAJuB;AAKF;AAAA;AALE;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAQzB;AAQmB;;;AA3ad;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAOA;AAAA;;AAAA;AAAA;AANA;AAAA;;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AANA;;AAAA;AAEA;;AAAA;AAAA;AA8aH;;AAAA;AA9aG;AACA;;AAAA;AADA;AAQA;;AAAA;AARA;AAEA;;AAAA;AAFA;AAGA;;AAAA;AAHA;AAIA;AAAA;AAJA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAsbL;AAMF;;;AA7bO;AAAA;AAAA;AAAA;AAicM;;AAAJ;;AAAA;AAAP;AA7bK;AAAA;AAAA;AAAA;AAgcE;;AAAA;AAAP;AAhcK;AAAA;AAAA;AAAA;AAmcmB;;AAAA;AAncnB;AAmcL;AAAA;AAxcK;AAAA;AAAA;AAAA;AA4cL;;;;;;;;;AAAA;;;AAKS;;;;AALT;;AAcF;;;;AAzdO;AAAA;AAAA;AAAA;AA+dM;;AAAJ;;AAAA;AAAA;;;AAA+B;;AAAJ;;AAAA;AAA3B;;;;AAAP;AAGM;;AAAY;;;AACD;AAAa;AAAvB;AAAP;AAvd2D;;AA0drD;;AA1dqD;AA0drD;AAAA;;AACM;AAAA;;AAAZ;;;AACU;;AAAA;;;;;;;AAOZ;;;AA/eO;AAAA;AAAA;AAAA;AAmfM;;AAAJ;AAAP;AAGA;;;AA9eK;;AAifL;;AAAA;;AAMF;;;AA/fO;AAAA;AAAA;AAAA;AAmgBM;;AAAJ;AAAP;AAGA;;;AA7fK;;AAggBL;;AAAA;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 4 24 1000"
    },
    "9": {
      "op": "bytecblock \"rewardPool\" \"asset\" \"totalStaked\" \"adminAddress\" \"accumulatedRewardsPerShare\" \"precision\" \"lastRewardTime\" \"minimumStake\" \"weeklyRewards\" \"rewardPeriod\" 0x151f7c75 \"stakers\""
    },
    "158": {
      "op": "txn ApplicationID",
      "defined_out": [
        "reinterpret_bool%0#0"
      ],
      "stack_out": [
        "reinterpret_bool%0#0"
      ]
    },
    "160": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "163": {
      "op": "bytec_1 // \"asset\"",
      "defined_out": [
        "\"asset\""
      ],
      "stack_out": [
        "\"asset\""
      ]
    },
    "164": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"asset\"",
        "0"
      ],
      "stack_out": [
        "\"asset\"",
        "0"
      ]
    },
    "165": {
      "op": "app_global_put",
      "stack_out": []
    },
    "166": {
      "op": "bytec_3 // \"adminAddress\"",
      "defined_out": [
        "\"adminAddress\""
      ],
      "stack_out": [
        "\"adminAddress\""
      ]
    },
    "167": {
      "op": "global ZeroAddress",
      "defined_out": [
        "\"adminAddress\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "\"adminAddress\"",
        "new_state_value%0#0"
      ]
    },
    "169": {
      "op": "app_global_put",
      "stack_out": []
    },
    "170": {
      "op": "bytec_2 // \"totalStaked\"",
      "defined_out": [
        "\"totalStaked\""
      ],
      "stack_out": [
        "\"totalStaked\""
      ]
    },
    "171": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"totalStaked\"",
        "0"
      ]
    },
    "172": {
      "op": "app_global_put",
      "stack_out": []
    },
    "173": {
      "op": "bytec 6 // \"lastRewardTime\"",
      "defined_out": [
        "\"lastRewardTime\""
      ],
      "stack_out": [
        "\"lastRewardTime\""
      ]
    },
    "175": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"lastRewardTime\"",
        "0"
      ]
    },
    "176": {
      "op": "app_global_put",
      "stack_out": []
    },
    "177": {
      "op": "bytec 7 // \"minimumStake\"",
      "defined_out": [
        "\"minimumStake\""
      ],
      "stack_out": [
        "\"minimumStake\""
      ]
    },
    "179": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"minimumStake\"",
        "0"
      ]
    },
    "180": {
      "op": "app_global_put",
      "stack_out": []
    },
    "181": {
      "op": "bytec_0 // \"rewardPool\"",
      "defined_out": [
        "\"rewardPool\""
      ],
      "stack_out": [
        "\"rewardPool\""
      ]
    },
    "182": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"rewardPool\"",
        "0"
      ]
    },
    "183": {
      "op": "app_global_put",
      "stack_out": []
    },
    "184": {
      "op": "bytec 4 // \"accumulatedRewardsPerShare\"",
      "defined_out": [
        "\"accumulatedRewardsPerShare\""
      ],
      "stack_out": [
        "\"accumulatedRewardsPerShare\""
      ]
    },
    "186": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"accumulatedRewardsPerShare\"",
        "0"
      ]
    },
    "187": {
      "op": "app_global_put",
      "stack_out": []
    },
    "188": {
      "op": "bytec 8 // \"weeklyRewards\"",
      "defined_out": [
        "\"weeklyRewards\""
      ],
      "stack_out": [
        "\"weeklyRewards\""
      ]
    },
    "190": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"weeklyRewards\"",
        "0"
      ]
    },
    "191": {
      "op": "app_global_put",
      "stack_out": []
    },
    "192": {
      "op": "bytec 9 // \"rewardPeriod\"",
      "defined_out": [
        "\"rewardPeriod\""
      ],
      "stack_out": [
        "\"rewardPeriod\""
      ]
    },
    "194": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"rewardPeriod\"",
        "0"
      ]
    },
    "195": {
      "op": "app_global_put",
      "stack_out": []
    },
    "196": {
      "op": "bytec 5 // \"precision\"",
      "defined_out": [
        "\"precision\""
      ],
      "stack_out": [
        "\"precision\""
      ]
    },
    "198": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"precision\"",
        "0"
      ]
    },
    "199": {
      "op": "app_global_put",
      "stack_out": []
    },
    "200": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "202": {
      "op": "bz main_bare_routing@25",
      "stack_out": []
    },
    "205": {
      "op": "pushbytess 0x5d789521 0x080f6ecd 0x667c5d30 0x9ffd3e53 0x0890bd58 0x21f1ddff 0xa5ae6bd1 0xb3b70146 0xbf8b766d 0x183838e9 0x21b1b022 0x82ab1ec4 0x15766b09 0xbfe31564 0xce963b1d 0xdc9a2a05 0x1e2b52ab 0x1b874ad6 // method \"getUserStakeInfo(account)(uint64,uint64,uint64,uint64,uint64)\", method \"storeUserStakeInfo(account,(uint64,uint64,uint64,uint64,uint64))void\", method \"initialize(asset,account,uint64,uint64,uint64)void\", method \"optInToAsset()void\", method \"stake()void\", method \"withdraw(uint64)void\", method \"claimRewards()void\", method \"addRewards()void\", method \"getCurrentAPY()uint64\", method \"getPendingRewards(account)uint64\", method \"triggerRewardDistribution()void\", method \"updateAdmin(account)void\", method \"getUserStats(account)uint64[]\", method \"getContractStats()uint64[]\", method \"emergencyWithdrawRewards(uint64)void\", method \"deleteUserBox(account)void\", method \"updateWeeklyRewards(uint64)void\", method \"updateRewardPeriod(uint64)void\"",
      "defined_out": [
        "Method(addRewards()void)",
        "Method(claimRewards()void)",
        "Method(deleteUserBox(account)void)",
        "Method(emergencyWithdrawRewards(uint64)void)",
        "Method(getContractStats()uint64[])",
        "Method(getCurrentAPY()uint64)",
        "Method(getPendingRewards(account)uint64)",
        "Method(getUserStakeInfo(account)(uint64,uint64,uint64,uint64,uint64))",
        "Method(getUserStats(account)uint64[])",
        "Method(initialize(asset,account,uint64,uint64,uint64)void)",
        "Method(optInToAsset()void)",
        "Method(stake()void)",
        "Method(storeUserStakeInfo(account,(uint64,uint64,uint64,uint64,uint64))void)",
        "Method(triggerRewardDistribution()void)",
        "Method(updateAdmin(account)void)",
        "Method(updateRewardPeriod(uint64)void)",
        "Method(updateWeeklyRewards(uint64)void)",
        "Method(withdraw(uint64)void)"
      ],
      "stack_out": [
        "Method(getUserStakeInfo(account)(uint64,uint64,uint64,uint64,uint64))",
        "Method(storeUserStakeInfo(account,(uint64,uint64,uint64,uint64,uint64))void)",
        "Method(initialize(asset,account,uint64,uint64,uint64)void)",
        "Method(optInToAsset()void)",
        "Method(stake()void)",
        "Method(withdraw(uint64)void)",
        "Method(claimRewards()void)",
        "Method(addRewards()void)",
        "Method(getCurrentAPY()uint64)",
        "Method(getPendingRewards(account)uint64)",
        "Method(triggerRewardDistribution()void)",
        "Method(updateAdmin(account)void)",
        "Method(getUserStats(account)uint64[])",
        "Method(getContractStats()uint64[])",
        "Method(emergencyWithdrawRewards(uint64)void)",
        "Method(deleteUserBox(account)void)",
        "Method(updateWeeklyRewards(uint64)void)",
        "Method(updateRewardPeriod(uint64)void)"
      ]
    },
    "297": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(addRewards()void)",
        "Method(claimRewards()void)",
        "Method(deleteUserBox(account)void)",
        "Method(emergencyWithdrawRewards(uint64)void)",
        "Method(getContractStats()uint64[])",
        "Method(getCurrentAPY()uint64)",
        "Method(getPendingRewards(account)uint64)",
        "Method(getUserStakeInfo(account)(uint64,uint64,uint64,uint64,uint64))",
        "Method(getUserStats(account)uint64[])",
        "Method(initialize(asset,account,uint64,uint64,uint64)void)",
        "Method(optInToAsset()void)",
        "Method(stake()void)",
        "Method(storeUserStakeInfo(account,(uint64,uint64,uint64,uint64,uint64))void)",
        "Method(triggerRewardDistribution()void)",
        "Method(updateAdmin(account)void)",
        "Method(updateRewardPeriod(uint64)void)",
        "Method(updateWeeklyRewards(uint64)void)",
        "Method(withdraw(uint64)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(getUserStakeInfo(account)(uint64,uint64,uint64,uint64,uint64))",
        "Method(storeUserStakeInfo(account,(uint64,uint64,uint64,uint64,uint64))void)",
        "Method(initialize(asset,account,uint64,uint64,uint64)void)",
        "Method(optInToAsset()void)",
        "Method(stake()void)",
        "Method(withdraw(uint64)void)",
        "Method(claimRewards()void)",
        "Method(addRewards()void)",
        "Method(getCurrentAPY()uint64)",
        "Method(getPendingRewards(account)uint64)",
        "Method(triggerRewardDistribution()void)",
        "Method(updateAdmin(account)void)",
        "Method(getUserStats(account)uint64[])",
        "Method(getContractStats()uint64[])",
        "Method(emergencyWithdrawRewards(uint64)void)",
        "Method(deleteUserBox(account)void)",
        "Method(updateWeeklyRewards(uint64)void)",
        "Method(updateRewardPeriod(uint64)void)",
        "tmp%2#0"
      ]
    },
    "300": {
      "op": "match main_getUserStakeInfo_route@5 main_storeUserStakeInfo_route@6 main_initialize_route@7 main_optInToAsset_route@8 main_stake_route@9 main_withdraw_route@10 main_claimRewards_route@11 main_addRewards_route@12 main_getCurrentAPY_route@13 main_getPendingRewards_route@14 main_triggerRewardDistribution_route@15 main_updateAdmin_route@16 main_getUserStats_route@17 main_getContractStats_route@18 main_emergencyWithdrawRewards_route@19 main_deleteUserBox_route@20 main_updateWeeklyRewards_route@21 main_updateRewardPeriod_route@22",
      "stack_out": []
    },
    "338": {
      "block": "main_after_if_else@29",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "339": {
      "op": "return",
      "stack_out": []
    },
    "340": {
      "block": "main_updateRewardPeriod_route@22",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%101#0"
      ],
      "stack_out": [
        "tmp%101#0"
      ]
    },
    "342": {
      "op": "!",
      "defined_out": [
        "tmp%102#0"
      ],
      "stack_out": [
        "tmp%102#0"
      ]
    },
    "343": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "344": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%103#0"
      ],
      "stack_out": [
        "tmp%103#0"
      ]
    },
    "346": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "347": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%6#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%6#0"
      ]
    },
    "350": {
      "op": "btoi",
      "defined_out": [
        "tmp%105#0"
      ],
      "stack_out": [
        "tmp%105#0"
      ]
    },
    "351": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.updateRewardPeriod",
      "op": "callsub updateRewardPeriod",
      "stack_out": []
    },
    "354": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "355": {
      "op": "return",
      "stack_out": []
    },
    "356": {
      "block": "main_updateWeeklyRewards_route@21",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%96#0"
      ],
      "stack_out": [
        "tmp%96#0"
      ]
    },
    "358": {
      "op": "!",
      "defined_out": [
        "tmp%97#0"
      ],
      "stack_out": [
        "tmp%97#0"
      ]
    },
    "359": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "360": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%98#0"
      ],
      "stack_out": [
        "tmp%98#0"
      ]
    },
    "362": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "363": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%5#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%5#0"
      ]
    },
    "366": {
      "op": "btoi",
      "defined_out": [
        "tmp%100#0"
      ],
      "stack_out": [
        "tmp%100#0"
      ]
    },
    "367": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.updateWeeklyRewards",
      "op": "callsub updateWeeklyRewards",
      "stack_out": []
    },
    "370": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "371": {
      "op": "return",
      "stack_out": []
    },
    "372": {
      "block": "main_deleteUserBox_route@20",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%90#0"
      ],
      "stack_out": [
        "tmp%90#0"
      ]
    },
    "374": {
      "op": "!",
      "defined_out": [
        "tmp%91#0"
      ],
      "stack_out": [
        "tmp%91#0"
      ]
    },
    "375": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "376": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%92#0"
      ],
      "stack_out": [
        "tmp%92#0"
      ]
    },
    "378": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "379": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%7#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%7#0"
      ]
    },
    "382": {
      "op": "btoi",
      "defined_out": [
        "tmp%94#0"
      ],
      "stack_out": [
        "tmp%94#0"
      ]
    },
    "383": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%95#0"
      ],
      "stack_out": [
        "tmp%95#0"
      ]
    },
    "385": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.deleteUserBox",
      "op": "callsub deleteUserBox",
      "stack_out": []
    },
    "388": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "389": {
      "op": "return",
      "stack_out": []
    },
    "390": {
      "block": "main_emergencyWithdrawRewards_route@19",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%85#0"
      ],
      "stack_out": [
        "tmp%85#0"
      ]
    },
    "392": {
      "op": "!",
      "defined_out": [
        "tmp%86#0"
      ],
      "stack_out": [
        "tmp%86#0"
      ]
    },
    "393": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "394": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%87#0"
      ]
    },
    "396": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "397": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%4#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%4#0"
      ]
    },
    "400": {
      "op": "btoi",
      "defined_out": [
        "tmp%89#0"
      ],
      "stack_out": [
        "tmp%89#0"
      ]
    },
    "401": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.emergencyWithdrawRewards",
      "op": "callsub emergencyWithdrawRewards",
      "stack_out": []
    },
    "404": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "405": {
      "op": "return",
      "stack_out": []
    },
    "406": {
      "block": "main_getContractStats_route@18",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%79#0"
      ],
      "stack_out": [
        "tmp%79#0"
      ]
    },
    "408": {
      "op": "!",
      "defined_out": [
        "tmp%80#0"
      ],
      "stack_out": [
        "tmp%80#0"
      ]
    },
    "409": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "410": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%81#0"
      ],
      "stack_out": [
        "tmp%81#0"
      ]
    },
    "412": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "413": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.getContractStats",
      "op": "callsub getContractStats",
      "defined_out": [
        "tmp%83#0"
      ],
      "stack_out": [
        "tmp%83#0"
      ]
    },
    "416": {
      "op": "bytec 10 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%83#0"
      ],
      "stack_out": [
        "tmp%83#0",
        "0x151f7c75"
      ]
    },
    "418": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%83#0"
      ]
    },
    "419": {
      "op": "concat",
      "defined_out": [
        "tmp%84#0"
      ],
      "stack_out": [
        "tmp%84#0"
      ]
    },
    "420": {
      "op": "log",
      "stack_out": []
    },
    "421": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "422": {
      "op": "return",
      "stack_out": []
    },
    "423": {
      "block": "main_getUserStats_route@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%71#0"
      ],
      "stack_out": [
        "tmp%71#0"
      ]
    },
    "425": {
      "op": "!",
      "defined_out": [
        "tmp%72#0"
      ],
      "stack_out": [
        "tmp%72#0"
      ]
    },
    "426": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "427": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%73#0"
      ]
    },
    "429": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "430": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%6#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%6#0"
      ]
    },
    "433": {
      "op": "btoi",
      "defined_out": [
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%75#0"
      ]
    },
    "434": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%76#0"
      ],
      "stack_out": [
        "tmp%76#0"
      ]
    },
    "436": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.getUserStats",
      "op": "callsub getUserStats",
      "defined_out": [
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%77#0"
      ]
    },
    "439": {
      "op": "bytec 10 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%77#0",
        "0x151f7c75"
      ]
    },
    "441": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%77#0"
      ]
    },
    "442": {
      "op": "concat",
      "defined_out": [
        "tmp%78#0"
      ],
      "stack_out": [
        "tmp%78#0"
      ]
    },
    "443": {
      "op": "log",
      "stack_out": []
    },
    "444": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "445": {
      "op": "return",
      "stack_out": []
    },
    "446": {
      "block": "main_updateAdmin_route@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%65#0"
      ]
    },
    "448": {
      "op": "!",
      "defined_out": [
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0"
      ]
    },
    "449": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "450": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%67#0"
      ],
      "stack_out": [
        "tmp%67#0"
      ]
    },
    "452": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "453": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%5#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%5#0"
      ]
    },
    "456": {
      "op": "btoi",
      "defined_out": [
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%69#0"
      ]
    },
    "457": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0"
      ]
    },
    "459": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.updateAdmin",
      "op": "callsub updateAdmin",
      "stack_out": []
    },
    "462": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "463": {
      "op": "return",
      "stack_out": []
    },
    "464": {
      "block": "main_triggerRewardDistribution_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "466": {
      "op": "!",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "467": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "468": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%63#0"
      ],
      "stack_out": [
        "tmp%63#0"
      ]
    },
    "470": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "471": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.triggerRewardDistribution",
      "op": "callsub triggerRewardDistribution"
    },
    "474": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "475": {
      "op": "return",
      "stack_out": []
    },
    "476": {
      "block": "main_getPendingRewards_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "478": {
      "op": "!",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "479": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "480": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%56#0"
      ],
      "stack_out": [
        "tmp%56#0"
      ]
    },
    "482": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "483": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%4#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%4#0"
      ]
    },
    "486": {
      "op": "btoi",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "487": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0"
      ]
    },
    "489": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.getPendingRewards",
      "op": "callsub getPendingRewards",
      "defined_out": [
        "to_encode%1#0"
      ],
      "stack_out": [
        "to_encode%1#0"
      ]
    },
    "492": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0"
      ]
    },
    "493": {
      "op": "bytec 10 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "val_as_bytes%1#0",
        "0x151f7c75"
      ]
    },
    "495": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%1#0"
      ]
    },
    "496": {
      "op": "concat",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0"
      ]
    },
    "497": {
      "op": "log",
      "stack_out": []
    },
    "498": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "499": {
      "op": "return",
      "stack_out": []
    },
    "500": {
      "block": "main_getCurrentAPY_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "502": {
      "op": "!",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "503": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "504": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "506": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "507": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.getCurrentAPY",
      "op": "callsub getCurrentAPY",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "510": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "511": {
      "op": "bytec 10 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "513": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "514": {
      "op": "concat",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "515": {
      "op": "log",
      "stack_out": []
    },
    "516": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "517": {
      "op": "return",
      "stack_out": []
    },
    "518": {
      "block": "main_addRewards_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "520": {
      "op": "!",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "521": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "522": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%47#0"
      ],
      "stack_out": [
        "tmp%47#0"
      ]
    },
    "524": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "525": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.addRewards",
      "op": "callsub addRewards"
    },
    "528": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "529": {
      "op": "return",
      "stack_out": []
    },
    "530": {
      "block": "main_claimRewards_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "532": {
      "op": "!",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "533": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "534": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%43#0"
      ],
      "stack_out": [
        "tmp%43#0"
      ]
    },
    "536": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "537": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.claimRewards",
      "op": "callsub claimRewards"
    },
    "540": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "541": {
      "op": "return",
      "stack_out": []
    },
    "542": {
      "block": "main_withdraw_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "544": {
      "op": "!",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "545": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "546": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "548": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "549": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "552": {
      "op": "btoi",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "553": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.withdraw",
      "op": "callsub withdraw",
      "stack_out": []
    },
    "556": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "557": {
      "op": "return",
      "stack_out": []
    },
    "558": {
      "block": "main_stake_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%32#0"
      ]
    },
    "560": {
      "op": "!",
      "defined_out": [
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%33#0"
      ]
    },
    "561": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "562": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%34#0"
      ]
    },
    "564": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "565": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.stake",
      "op": "callsub stake"
    },
    "568": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "569": {
      "op": "return",
      "stack_out": []
    },
    "570": {
      "block": "main_optInToAsset_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%28#0"
      ],
      "stack_out": [
        "tmp%28#0"
      ]
    },
    "572": {
      "op": "!",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "573": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "574": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "576": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "577": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.optInToAsset",
      "op": "callsub optInToAsset"
    },
    "580": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "581": {
      "op": "return",
      "stack_out": []
    },
    "582": {
      "block": "main_initialize_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "584": {
      "op": "!",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "585": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "586": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "588": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "589": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%2#0"
      ]
    },
    "592": {
      "op": "btoi",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "593": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0"
      ]
    },
    "595": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%3#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "reinterpret_bytes[1]%3#0"
      ]
    },
    "598": {
      "op": "btoi",
      "defined_out": [
        "tmp%22#0",
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "tmp%23#0"
      ]
    },
    "599": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%22#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "tmp%24#0"
      ]
    },
    "601": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%22#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "tmp%24#0",
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "604": {
      "op": "btoi",
      "defined_out": [
        "tmp%22#0",
        "tmp%24#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "tmp%24#0",
        "tmp%25#0"
      ]
    },
    "605": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[8]%1#0",
        "tmp%22#0",
        "tmp%24#0",
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "tmp%24#0",
        "tmp%25#0",
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "608": {
      "op": "btoi",
      "defined_out": [
        "tmp%22#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%26#0"
      ]
    },
    "609": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "reinterpret_bytes[8]%2#0",
        "tmp%22#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%26#0",
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "612": {
      "op": "btoi",
      "defined_out": [
        "tmp%22#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%26#0",
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%22#0",
        "tmp%24#0",
        "tmp%25#0",
        "tmp%26#0",
        "tmp%27#0"
      ]
    },
    "613": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.initialize",
      "op": "callsub initialize",
      "stack_out": []
    },
    "616": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "617": {
      "op": "return",
      "stack_out": []
    },
    "618": {
      "block": "main_storeUserStakeInfo_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "620": {
      "op": "!",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "621": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "622": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "624": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "625": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%1#0"
      ]
    },
    "628": {
      "op": "btoi",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "629": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "631": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[40]%0#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0",
        "reinterpret_bytes[40]%0#0"
      ]
    },
    "634": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.storeUserStakeInfo",
      "op": "callsub storeUserStakeInfo",
      "defined_out": [
        "storeUserStakeInfo%0#0"
      ],
      "stack_out": [
        "storeUserStakeInfo%0#0"
      ]
    },
    "637": {
      "op": "pop",
      "stack_out": []
    },
    "638": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "639": {
      "op": "return",
      "stack_out": []
    },
    "640": {
      "block": "main_getUserStakeInfo_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "642": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "643": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "644": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "646": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "647": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "650": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "651": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%8#0"
      ]
    },
    "653": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.getUserStakeInfo",
      "op": "callsub getUserStakeInfo",
      "defined_out": [
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "656": {
      "op": "bytec 10 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "0x151f7c75"
      ]
    },
    "658": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%9#0"
      ]
    },
    "659": {
      "op": "concat",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "660": {
      "op": "log",
      "stack_out": []
    },
    "661": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "662": {
      "op": "return",
      "stack_out": []
    },
    "663": {
      "block": "main_bare_routing@25",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%106#0"
      ],
      "stack_out": [
        "tmp%106#0"
      ]
    },
    "665": {
      "op": "bnz main_after_if_else@29",
      "stack_out": []
    },
    "668": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%107#0"
      ],
      "stack_out": [
        "tmp%107#0"
      ]
    },
    "670": {
      "op": "!",
      "defined_out": [
        "tmp%108#0"
      ],
      "stack_out": [
        "tmp%108#0"
      ]
    },
    "671": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "672": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "673": {
      "op": "return",
      "stack_out": []
    },
    "674": {
      "subroutine": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.getUserStakeInfo",
      "params": {
        "userAddress#0": "bytes"
      },
      "block": "getUserStakeInfo",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "677": {
      "op": "bytec 11 // \"stakers\"",
      "defined_out": [
        "\"stakers\""
      ],
      "stack_out": [
        "\"stakers\""
      ]
    },
    "679": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"stakers\"",
        "userAddress#0 (copy)"
      ],
      "stack_out": [
        "\"stakers\"",
        "userAddress#0 (copy)"
      ]
    },
    "681": {
      "op": "concat",
      "defined_out": [
        "userBox#0"
      ],
      "stack_out": [
        "userBox#0"
      ]
    },
    "682": {
      "op": "dup",
      "defined_out": [
        "userBox#0"
      ],
      "stack_out": [
        "userBox#0",
        "userBox#0"
      ]
    },
    "683": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "userBox#0"
      ],
      "stack_out": [
        "userBox#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "684": {
      "op": "bury 1",
      "stack_out": [
        "userBox#0",
        "maybe_exists%0#0"
      ]
    },
    "686": {
      "op": "bz getUserStakeInfo_else_body@2",
      "stack_out": [
        "userBox#0"
      ]
    },
    "689": {
      "op": "frame_dig 0",
      "stack_out": [
        "userBox#0",
        "userBox#0"
      ]
    },
    "691": {
      "op": "box_get",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "userBox#0"
      ],
      "stack_out": [
        "userBox#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "692": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "userBox#0",
        "maybe_value%1#0"
      ]
    },
    "693": {
      "op": "swap"
    },
    "694": {
      "retsub": true,
      "op": "retsub"
    },
    "695": {
      "block": "getUserStakeInfo_else_body@2",
      "stack_in": [
        "userBox#0"
      ],
      "op": "pushbytes 0x00000000000000000000000000000000000000000000000000000000000000000000000000000000",
      "defined_out": [
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000"
      ],
      "stack_out": [
        "userBox#0",
        "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000"
      ]
    },
    "737": {
      "op": "swap"
    },
    "738": {
      "retsub": true,
      "op": "retsub"
    },
    "739": {
      "subroutine": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.storeUserStakeInfo",
      "params": {
        "userAddress#0": "bytes",
        "stakeInfo#0": "bytes"
      },
      "block": "storeUserStakeInfo",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "742": {
      "op": "bytec 11 // \"stakers\"",
      "defined_out": [
        "\"stakers\""
      ],
      "stack_out": [
        "\"stakers\""
      ]
    },
    "744": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"stakers\"",
        "userAddress#0 (copy)"
      ],
      "stack_out": [
        "\"stakers\"",
        "userAddress#0 (copy)"
      ]
    },
    "746": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "747": {
      "op": "frame_dig -1",
      "defined_out": [
        "stakeInfo#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "stakeInfo#0 (copy)"
      ]
    },
    "749": {
      "op": "box_put",
      "stack_out": []
    },
    "750": {
      "op": "frame_dig -1",
      "stack_out": [
        "stakeInfo#0 (copy)"
      ]
    },
    "752": {
      "retsub": true,
      "op": "retsub"
    },
    "753": {
      "subroutine": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.updateRewards",
      "params": {},
      "block": "updateRewards",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "756": {
      "op": "global LatestTimestamp"
    },
    "758": {
      "op": "dup"
    },
    "759": {
      "op": "intc_0 // 0"
    },
    "760": {
      "op": "bytec 6 // \"lastRewardTime\"",
      "defined_out": [
        "\"lastRewardTime\"",
        "0",
        "currentTime#0"
      ],
      "stack_out": [
        "currentTime#0",
        "currentTime#0",
        "0",
        "\"lastRewardTime\""
      ]
    },
    "762": {
      "op": "app_global_get_ex",
      "defined_out": [
        "currentTime#0",
        "lastReward#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "currentTime#0",
        "currentTime#0",
        "lastReward#0",
        "maybe_exists%0#0"
      ]
    },
    "763": {
      "op": "swap",
      "stack_out": [
        "currentTime#0",
        "currentTime#0",
        "maybe_exists%0#0",
        "lastReward#0"
      ]
    },
    "764": {
      "op": "dup",
      "stack_out": [
        "currentTime#0",
        "currentTime#0",
        "maybe_exists%0#0",
        "lastReward#0",
        "lastReward#0 (copy)"
      ]
    },
    "765": {
      "op": "cover 2",
      "stack_out": [
        "currentTime#0",
        "currentTime#0",
        "lastReward#0",
        "maybe_exists%0#0",
        "lastReward#0"
      ]
    },
    "767": {
      "op": "cover 3",
      "defined_out": [
        "currentTime#0",
        "lastReward#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "currentTime#0",
        "lastReward#0",
        "maybe_exists%0#0"
      ]
    },
    "769": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "currentTime#0",
        "lastReward#0"
      ]
    },
    "770": {
      "op": "intc_0 // 0",
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "currentTime#0",
        "lastReward#0",
        "0"
      ]
    },
    "771": {
      "op": "bytec 9 // \"rewardPeriod\"",
      "defined_out": [
        "\"rewardPeriod\"",
        "0",
        "currentTime#0",
        "lastReward#0"
      ],
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "currentTime#0",
        "lastReward#0",
        "0",
        "\"rewardPeriod\""
      ]
    },
    "773": {
      "op": "app_global_get_ex",
      "defined_out": [
        "currentTime#0",
        "lastReward#0",
        "maybe_exists%1#0",
        "rewardPeriod#0"
      ],
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "maybe_exists%1#0"
      ]
    },
    "774": {
      "op": "swap",
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "currentTime#0",
        "lastReward#0",
        "maybe_exists%1#0",
        "rewardPeriod#0"
      ]
    },
    "775": {
      "op": "dup",
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "currentTime#0",
        "lastReward#0",
        "maybe_exists%1#0",
        "rewardPeriod#0",
        "rewardPeriod#0 (copy)"
      ]
    },
    "776": {
      "op": "cover 2",
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "maybe_exists%1#0",
        "rewardPeriod#0"
      ]
    },
    "778": {
      "op": "cover 4",
      "defined_out": [
        "currentTime#0",
        "lastReward#0",
        "maybe_exists%1#0",
        "rewardPeriod#0"
      ],
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "maybe_exists%1#0"
      ]
    },
    "780": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0"
      ]
    },
    "781": {
      "op": "+",
      "defined_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "currentTime#0",
        "tmp%0#0"
      ]
    },
    "782": {
      "op": ">=",
      "defined_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "tmp%1#0"
      ]
    },
    "783": {
      "op": "bz updateRewards_after_if_else@3",
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0"
      ]
    },
    "786": {
      "op": "intc_0 // 0",
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "0"
      ]
    },
    "787": {
      "op": "bytec_2 // \"totalStaked\"",
      "defined_out": [
        "\"totalStaked\"",
        "0",
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0"
      ],
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "0",
        "\"totalStaked\""
      ]
    },
    "788": {
      "op": "app_global_get_ex",
      "defined_out": [
        "currentTime#0",
        "lastReward#0",
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "rewardPeriod#0"
      ],
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "789": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "maybe_value%2#0"
      ]
    },
    "790": {
      "op": "bz updateRewards_after_if_else@3",
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0"
      ]
    },
    "793": {
      "op": "frame_dig 0",
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "currentTime#0"
      ]
    },
    "795": {
      "op": "frame_dig 1",
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "currentTime#0",
        "lastReward#0"
      ]
    },
    "797": {
      "op": "dup",
      "defined_out": [
        "currentTime#0",
        "lastReward#0",
        "lastReward#0 (copy)",
        "rewardPeriod#0"
      ],
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "currentTime#0",
        "lastReward#0 (copy)",
        "lastReward#0 (copy)"
      ]
    },
    "798": {
      "op": "cover 2",
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "lastReward#0",
        "currentTime#0",
        "lastReward#0 (copy)"
      ]
    },
    "800": {
      "op": "-",
      "defined_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "lastReward#0",
        "tmp%3#0"
      ]
    },
    "801": {
      "op": "frame_dig 2",
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "lastReward#0",
        "tmp%3#0",
        "rewardPeriod#0"
      ]
    },
    "803": {
      "op": "dup",
      "defined_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "rewardPeriod#0 (copy)",
        "tmp%3#0"
      ],
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "lastReward#0",
        "tmp%3#0",
        "rewardPeriod#0 (copy)",
        "rewardPeriod#0 (copy)"
      ]
    },
    "804": {
      "op": "cover 2",
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "lastReward#0",
        "rewardPeriod#0",
        "tmp%3#0",
        "rewardPeriod#0 (copy)"
      ]
    },
    "806": {
      "op": "/",
      "defined_out": [
        "currentTime#0",
        "lastReward#0",
        "periodsPassed#0",
        "rewardPeriod#0"
      ],
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "lastReward#0",
        "rewardPeriod#0",
        "periodsPassed#0"
      ]
    },
    "807": {
      "op": "intc_0 // 0",
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "lastReward#0",
        "rewardPeriod#0",
        "periodsPassed#0",
        "0"
      ]
    },
    "808": {
      "op": "bytec 8 // \"weeklyRewards\"",
      "defined_out": [
        "\"weeklyRewards\"",
        "0",
        "currentTime#0",
        "lastReward#0",
        "periodsPassed#0",
        "rewardPeriod#0"
      ],
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "lastReward#0",
        "rewardPeriod#0",
        "periodsPassed#0",
        "0",
        "\"weeklyRewards\""
      ]
    },
    "810": {
      "op": "app_global_get_ex",
      "defined_out": [
        "currentTime#0",
        "lastReward#0",
        "maybe_exists%3#0",
        "periodsPassed#0",
        "rewardPerPeriod#0",
        "rewardPeriod#0"
      ],
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "lastReward#0",
        "rewardPeriod#0",
        "periodsPassed#0",
        "rewardPerPeriod#0",
        "maybe_exists%3#0"
      ]
    },
    "811": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "lastReward#0",
        "rewardPeriod#0",
        "periodsPassed#0",
        "rewardPerPeriod#0"
      ]
    },
    "812": {
      "op": "dig 1",
      "defined_out": [
        "currentTime#0",
        "lastReward#0",
        "periodsPassed#0",
        "periodsPassed#0 (copy)",
        "rewardPerPeriod#0",
        "rewardPeriod#0"
      ],
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "lastReward#0",
        "rewardPeriod#0",
        "periodsPassed#0",
        "rewardPerPeriod#0",
        "periodsPassed#0 (copy)"
      ]
    },
    "814": {
      "op": "*",
      "defined_out": [
        "currentTime#0",
        "lastReward#0",
        "periodsPassed#0",
        "rewardPeriod#0",
        "totalRewards#0"
      ],
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "lastReward#0",
        "rewardPeriod#0",
        "periodsPassed#0",
        "totalRewards#0"
      ]
    },
    "815": {
      "op": "intc_0 // 0",
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "lastReward#0",
        "rewardPeriod#0",
        "periodsPassed#0",
        "totalRewards#0",
        "0"
      ]
    },
    "816": {
      "op": "bytec_2 // \"totalStaked\"",
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "lastReward#0",
        "rewardPeriod#0",
        "periodsPassed#0",
        "totalRewards#0",
        "0",
        "\"totalStaked\""
      ]
    },
    "817": {
      "op": "app_global_get_ex",
      "defined_out": [
        "currentTime#0",
        "lastReward#0",
        "maybe_exists%4#0",
        "periodsPassed#0",
        "rewardPeriod#0",
        "totalRewards#0",
        "totalStaked#0"
      ],
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "lastReward#0",
        "rewardPeriod#0",
        "periodsPassed#0",
        "totalRewards#0",
        "totalStaked#0",
        "maybe_exists%4#0"
      ]
    },
    "818": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "lastReward#0",
        "rewardPeriod#0",
        "periodsPassed#0",
        "totalRewards#0",
        "totalStaked#0"
      ]
    },
    "819": {
      "op": "intc_0 // 0",
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "lastReward#0",
        "rewardPeriod#0",
        "periodsPassed#0",
        "totalRewards#0",
        "totalStaked#0",
        "0"
      ]
    },
    "820": {
      "op": "bytec 5 // \"precision\"",
      "defined_out": [
        "\"precision\"",
        "0",
        "currentTime#0",
        "lastReward#0",
        "periodsPassed#0",
        "rewardPeriod#0",
        "totalRewards#0",
        "totalStaked#0"
      ],
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "lastReward#0",
        "rewardPeriod#0",
        "periodsPassed#0",
        "totalRewards#0",
        "totalStaked#0",
        "0",
        "\"precision\""
      ]
    },
    "822": {
      "op": "app_global_get_ex",
      "defined_out": [
        "currentTime#0",
        "lastReward#0",
        "maybe_exists%5#0",
        "periodsPassed#0",
        "precision#0",
        "rewardPeriod#0",
        "totalRewards#0",
        "totalStaked#0"
      ],
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "lastReward#0",
        "rewardPeriod#0",
        "periodsPassed#0",
        "totalRewards#0",
        "totalStaked#0",
        "precision#0",
        "maybe_exists%5#0"
      ]
    },
    "823": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "lastReward#0",
        "rewardPeriod#0",
        "periodsPassed#0",
        "totalRewards#0",
        "totalStaked#0",
        "precision#0"
      ]
    },
    "824": {
      "op": "dig 2",
      "defined_out": [
        "currentTime#0",
        "lastReward#0",
        "periodsPassed#0",
        "precision#0",
        "rewardPeriod#0",
        "totalRewards#0",
        "totalRewards#0 (copy)",
        "totalStaked#0"
      ],
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "lastReward#0",
        "rewardPeriod#0",
        "periodsPassed#0",
        "totalRewards#0",
        "totalStaked#0",
        "precision#0",
        "totalRewards#0 (copy)"
      ]
    },
    "826": {
      "op": "*",
      "defined_out": [
        "currentTime#0",
        "lastReward#0",
        "periodsPassed#0",
        "rewardPeriod#0",
        "tmp%4#0",
        "totalRewards#0",
        "totalStaked#0"
      ],
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "lastReward#0",
        "rewardPeriod#0",
        "periodsPassed#0",
        "totalRewards#0",
        "totalStaked#0",
        "tmp%4#0"
      ]
    },
    "827": {
      "op": "swap",
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "lastReward#0",
        "rewardPeriod#0",
        "periodsPassed#0",
        "totalRewards#0",
        "tmp%4#0",
        "totalStaked#0"
      ]
    },
    "828": {
      "op": "/",
      "defined_out": [
        "currentTime#0",
        "lastReward#0",
        "periodsPassed#0",
        "rewardPerShare#0",
        "rewardPeriod#0",
        "totalRewards#0"
      ],
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "lastReward#0",
        "rewardPeriod#0",
        "periodsPassed#0",
        "totalRewards#0",
        "rewardPerShare#0"
      ]
    },
    "829": {
      "op": "intc_0 // 0",
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "lastReward#0",
        "rewardPeriod#0",
        "periodsPassed#0",
        "totalRewards#0",
        "rewardPerShare#0",
        "0"
      ]
    },
    "830": {
      "op": "bytec 4 // \"accumulatedRewardsPerShare\"",
      "defined_out": [
        "\"accumulatedRewardsPerShare\"",
        "0",
        "currentTime#0",
        "lastReward#0",
        "periodsPassed#0",
        "rewardPerShare#0",
        "rewardPeriod#0",
        "totalRewards#0"
      ],
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "lastReward#0",
        "rewardPeriod#0",
        "periodsPassed#0",
        "totalRewards#0",
        "rewardPerShare#0",
        "0",
        "\"accumulatedRewardsPerShare\""
      ]
    },
    "832": {
      "op": "app_global_get_ex",
      "defined_out": [
        "currentTime#0",
        "lastReward#0",
        "maybe_exists%6#0",
        "maybe_value%6#0",
        "periodsPassed#0",
        "rewardPerShare#0",
        "rewardPeriod#0",
        "totalRewards#0"
      ],
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "lastReward#0",
        "rewardPeriod#0",
        "periodsPassed#0",
        "totalRewards#0",
        "rewardPerShare#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "833": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "lastReward#0",
        "rewardPeriod#0",
        "periodsPassed#0",
        "totalRewards#0",
        "rewardPerShare#0",
        "maybe_value%6#0"
      ]
    },
    "834": {
      "op": "+",
      "defined_out": [
        "currentTime#0",
        "lastReward#0",
        "new_state_value%0#0",
        "periodsPassed#0",
        "rewardPeriod#0",
        "totalRewards#0"
      ],
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "lastReward#0",
        "rewardPeriod#0",
        "periodsPassed#0",
        "totalRewards#0",
        "new_state_value%0#0"
      ]
    },
    "835": {
      "op": "bytec 4 // \"accumulatedRewardsPerShare\"",
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "lastReward#0",
        "rewardPeriod#0",
        "periodsPassed#0",
        "totalRewards#0",
        "new_state_value%0#0",
        "\"accumulatedRewardsPerShare\""
      ]
    },
    "837": {
      "op": "swap",
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "lastReward#0",
        "rewardPeriod#0",
        "periodsPassed#0",
        "totalRewards#0",
        "\"accumulatedRewardsPerShare\"",
        "new_state_value%0#0"
      ]
    },
    "838": {
      "op": "app_global_put",
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "lastReward#0",
        "rewardPeriod#0",
        "periodsPassed#0",
        "totalRewards#0"
      ]
    },
    "839": {
      "op": "swap",
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "lastReward#0",
        "rewardPeriod#0",
        "totalRewards#0",
        "periodsPassed#0"
      ]
    },
    "840": {
      "op": "uncover 2",
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "lastReward#0",
        "totalRewards#0",
        "periodsPassed#0",
        "rewardPeriod#0"
      ]
    },
    "842": {
      "op": "*",
      "defined_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "tmp%5#0",
        "totalRewards#0"
      ],
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "lastReward#0",
        "totalRewards#0",
        "tmp%5#0"
      ]
    },
    "843": {
      "op": "uncover 2",
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "totalRewards#0",
        "tmp%5#0",
        "lastReward#0"
      ]
    },
    "845": {
      "op": "+",
      "defined_out": [
        "currentTime#0",
        "lastReward#0",
        "new_state_value%1#0",
        "rewardPeriod#0",
        "totalRewards#0"
      ],
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "totalRewards#0",
        "new_state_value%1#0"
      ]
    },
    "846": {
      "op": "bytec 6 // \"lastRewardTime\"",
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "totalRewards#0",
        "new_state_value%1#0",
        "\"lastRewardTime\""
      ]
    },
    "848": {
      "op": "swap",
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "totalRewards#0",
        "\"lastRewardTime\"",
        "new_state_value%1#0"
      ]
    },
    "849": {
      "op": "app_global_put",
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "totalRewards#0"
      ]
    },
    "850": {
      "op": "intc_0 // 0",
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "totalRewards#0",
        "0"
      ]
    },
    "851": {
      "op": "bytec_0 // \"rewardPool\"",
      "defined_out": [
        "\"rewardPool\"",
        "0",
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "totalRewards#0"
      ],
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "totalRewards#0",
        "0",
        "\"rewardPool\""
      ]
    },
    "852": {
      "op": "app_global_get_ex",
      "defined_out": [
        "currentTime#0",
        "lastReward#0",
        "maybe_exists%7#0",
        "maybe_value%7#0",
        "rewardPeriod#0",
        "totalRewards#0"
      ],
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "totalRewards#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "853": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "totalRewards#0",
        "maybe_value%7#0"
      ]
    },
    "854": {
      "op": "swap",
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "maybe_value%7#0",
        "totalRewards#0"
      ]
    },
    "855": {
      "op": "-",
      "defined_out": [
        "currentTime#0",
        "lastReward#0",
        "new_state_value%2#0",
        "rewardPeriod#0"
      ],
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "new_state_value%2#0"
      ]
    },
    "856": {
      "op": "bytec_0 // \"rewardPool\"",
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "new_state_value%2#0",
        "\"rewardPool\""
      ]
    },
    "857": {
      "op": "swap",
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0",
        "\"rewardPool\"",
        "new_state_value%2#0"
      ]
    },
    "858": {
      "op": "app_global_put",
      "stack_out": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0"
      ]
    },
    "859": {
      "block": "updateRewards_after_if_else@3",
      "stack_in": [
        "currentTime#0",
        "lastReward#0",
        "rewardPeriod#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "860": {
      "subroutine": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.calculatePendingRewards",
      "params": {
        "userAddress#0": "bytes"
      },
      "block": "calculatePendingRewards",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "863": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "totalEarned#0"
      ]
    },
    "865": {
      "op": "dup",
      "stack_out": [
        "totalEarned#0",
        "userRewardDebt#0"
      ]
    },
    "866": {
      "op": "frame_dig -1",
      "defined_out": [
        "userAddress#0 (copy)"
      ],
      "stack_out": [
        "totalEarned#0",
        "userRewardDebt#0",
        "userAddress#0 (copy)"
      ]
    },
    "868": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.getUserStakeInfo",
      "op": "callsub getUserStakeInfo",
      "defined_out": [
        "stakeInfo#0"
      ],
      "stack_out": [
        "totalEarned#0",
        "userRewardDebt#0",
        "stakeInfo#0"
      ]
    },
    "871": {
      "op": "dup",
      "defined_out": [
        "stakeInfo#0"
      ],
      "stack_out": [
        "totalEarned#0",
        "userRewardDebt#0",
        "stakeInfo#0",
        "stakeInfo#0"
      ]
    },
    "872": {
      "op": "intc_0 // 0",
      "stack_out": [
        "totalEarned#0",
        "userRewardDebt#0",
        "stakeInfo#0",
        "stakeInfo#0",
        "0"
      ]
    },
    "873": {
      "op": "extract_uint64",
      "defined_out": [
        "stakeInfo#0",
        "userStake#0"
      ],
      "stack_out": [
        "totalEarned#0",
        "userRewardDebt#0",
        "stakeInfo#0",
        "userStake#0"
      ]
    },
    "874": {
      "op": "dup",
      "defined_out": [
        "stakeInfo#0",
        "userStake#0"
      ],
      "stack_out": [
        "totalEarned#0",
        "userRewardDebt#0",
        "stakeInfo#0",
        "userStake#0",
        "userStake#0"
      ]
    },
    "875": {
      "op": "bnz calculatePendingRewards_after_if_else@2",
      "stack_out": [
        "totalEarned#0",
        "userRewardDebt#0",
        "stakeInfo#0",
        "userStake#0"
      ]
    },
    "878": {
      "op": "intc_0 // 0",
      "stack_out": [
        "totalEarned#0",
        "userRewardDebt#0",
        "stakeInfo#0",
        "userStake#0",
        "0"
      ]
    },
    "879": {
      "op": "frame_bury 0"
    },
    "881": {
      "retsub": true,
      "op": "retsub"
    },
    "882": {
      "block": "calculatePendingRewards_after_if_else@2",
      "stack_in": [
        "totalEarned#0",
        "userRewardDebt#0",
        "stakeInfo#0",
        "userStake#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "totalEarned#0",
        "userRewardDebt#0",
        "stakeInfo#0",
        "userStake#0",
        "0"
      ]
    },
    "883": {
      "op": "bytec 4 // \"accumulatedRewardsPerShare\"",
      "defined_out": [
        "\"accumulatedRewardsPerShare\"",
        "0"
      ],
      "stack_out": [
        "totalEarned#0",
        "userRewardDebt#0",
        "stakeInfo#0",
        "userStake#0",
        "0",
        "\"accumulatedRewardsPerShare\""
      ]
    },
    "885": {
      "op": "app_global_get_ex",
      "defined_out": [
        "accRewardsPerShare#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "totalEarned#0",
        "userRewardDebt#0",
        "stakeInfo#0",
        "userStake#0",
        "accRewardsPerShare#0",
        "maybe_exists%0#0"
      ]
    },
    "886": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "totalEarned#0",
        "userRewardDebt#0",
        "stakeInfo#0",
        "userStake#0",
        "accRewardsPerShare#0"
      ]
    },
    "887": {
      "op": "frame_dig 2",
      "defined_out": [
        "accRewardsPerShare#0",
        "stakeInfo#0"
      ],
      "stack_out": [
        "totalEarned#0",
        "userRewardDebt#0",
        "stakeInfo#0",
        "userStake#0",
        "accRewardsPerShare#0",
        "stakeInfo#0"
      ]
    },
    "889": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "accRewardsPerShare#0",
        "stakeInfo#0"
      ],
      "stack_out": [
        "totalEarned#0",
        "userRewardDebt#0",
        "stakeInfo#0",
        "userStake#0",
        "accRewardsPerShare#0",
        "stakeInfo#0",
        "32"
      ]
    },
    "891": {
      "op": "extract_uint64",
      "defined_out": [
        "accRewardsPerShare#0",
        "stakeInfo#0",
        "userRewardDebt#0"
      ],
      "stack_out": [
        "totalEarned#0",
        "userRewardDebt#0",
        "stakeInfo#0",
        "userStake#0",
        "accRewardsPerShare#0",
        "userRewardDebt#0"
      ]
    },
    "892": {
      "op": "dup",
      "stack_out": [
        "totalEarned#0",
        "userRewardDebt#0",
        "stakeInfo#0",
        "userStake#0",
        "accRewardsPerShare#0",
        "userRewardDebt#0",
        "userRewardDebt#0 (copy)"
      ]
    },
    "893": {
      "op": "cover 2",
      "stack_out": [
        "totalEarned#0",
        "userRewardDebt#0",
        "stakeInfo#0",
        "userStake#0",
        "userRewardDebt#0",
        "accRewardsPerShare#0",
        "userRewardDebt#0"
      ]
    },
    "895": {
      "op": "frame_bury 1",
      "defined_out": [
        "accRewardsPerShare#0",
        "stakeInfo#0",
        "userRewardDebt#0"
      ],
      "stack_out": [
        "totalEarned#0",
        "userRewardDebt#0",
        "stakeInfo#0",
        "userStake#0",
        "userRewardDebt#0",
        "accRewardsPerShare#0"
      ]
    },
    "897": {
      "op": "intc_0 // 0",
      "stack_out": [
        "totalEarned#0",
        "userRewardDebt#0",
        "stakeInfo#0",
        "userStake#0",
        "userRewardDebt#0",
        "accRewardsPerShare#0",
        "0"
      ]
    },
    "898": {
      "op": "bytec 5 // \"precision\"",
      "defined_out": [
        "\"precision\"",
        "0",
        "accRewardsPerShare#0",
        "stakeInfo#0",
        "userRewardDebt#0"
      ],
      "stack_out": [
        "totalEarned#0",
        "userRewardDebt#0",
        "stakeInfo#0",
        "userStake#0",
        "userRewardDebt#0",
        "accRewardsPerShare#0",
        "0",
        "\"precision\""
      ]
    },
    "900": {
      "op": "app_global_get_ex",
      "defined_out": [
        "accRewardsPerShare#0",
        "maybe_exists%1#0",
        "precision#0",
        "stakeInfo#0",
        "userRewardDebt#0"
      ],
      "stack_out": [
        "totalEarned#0",
        "userRewardDebt#0",
        "stakeInfo#0",
        "userStake#0",
        "userRewardDebt#0",
        "accRewardsPerShare#0",
        "precision#0",
        "maybe_exists%1#0"
      ]
    },
    "901": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "totalEarned#0",
        "userRewardDebt#0",
        "stakeInfo#0",
        "userStake#0",
        "userRewardDebt#0",
        "accRewardsPerShare#0",
        "precision#0"
      ]
    },
    "902": {
      "op": "frame_dig 3",
      "defined_out": [
        "accRewardsPerShare#0",
        "precision#0",
        "stakeInfo#0",
        "userRewardDebt#0",
        "userStake#0"
      ],
      "stack_out": [
        "totalEarned#0",
        "userRewardDebt#0",
        "stakeInfo#0",
        "userStake#0",
        "userRewardDebt#0",
        "accRewardsPerShare#0",
        "precision#0",
        "userStake#0"
      ]
    },
    "904": {
      "op": "uncover 2",
      "stack_out": [
        "totalEarned#0",
        "userRewardDebt#0",
        "stakeInfo#0",
        "userStake#0",
        "userRewardDebt#0",
        "precision#0",
        "userStake#0",
        "accRewardsPerShare#0"
      ]
    },
    "906": {
      "op": "*",
      "defined_out": [
        "precision#0",
        "stakeInfo#0",
        "tmp%5#0",
        "userRewardDebt#0",
        "userStake#0"
      ],
      "stack_out": [
        "totalEarned#0",
        "userRewardDebt#0",
        "stakeInfo#0",
        "userStake#0",
        "userRewardDebt#0",
        "precision#0",
        "tmp%5#0"
      ]
    },
    "907": {
      "op": "swap",
      "stack_out": [
        "totalEarned#0",
        "userRewardDebt#0",
        "stakeInfo#0",
        "userStake#0",
        "userRewardDebt#0",
        "tmp%5#0",
        "precision#0"
      ]
    },
    "908": {
      "op": "/",
      "defined_out": [
        "stakeInfo#0",
        "totalEarned#0",
        "userRewardDebt#0",
        "userStake#0"
      ],
      "stack_out": [
        "totalEarned#0",
        "userRewardDebt#0",
        "stakeInfo#0",
        "userStake#0",
        "userRewardDebt#0",
        "totalEarned#0"
      ]
    },
    "909": {
      "op": "dup",
      "stack_out": [
        "totalEarned#0",
        "userRewardDebt#0",
        "stakeInfo#0",
        "userStake#0",
        "userRewardDebt#0",
        "totalEarned#0",
        "totalEarned#0"
      ]
    },
    "910": {
      "op": "frame_bury 0",
      "defined_out": [
        "stakeInfo#0",
        "totalEarned#0",
        "userRewardDebt#0",
        "userStake#0"
      ],
      "stack_out": [
        "totalEarned#0",
        "userRewardDebt#0",
        "stakeInfo#0",
        "userStake#0",
        "userRewardDebt#0",
        "totalEarned#0"
      ]
    },
    "912": {
      "op": "<",
      "defined_out": [
        "stakeInfo#0",
        "tmp%6#0",
        "totalEarned#0",
        "userRewardDebt#0",
        "userStake#0"
      ],
      "stack_out": [
        "totalEarned#0",
        "userRewardDebt#0",
        "stakeInfo#0",
        "userStake#0",
        "tmp%6#0"
      ]
    },
    "913": {
      "op": "bz calculatePendingRewards_ternary_false@4",
      "stack_out": [
        "totalEarned#0",
        "userRewardDebt#0",
        "stakeInfo#0",
        "userStake#0"
      ]
    },
    "916": {
      "op": "frame_dig 0",
      "stack_out": [
        "totalEarned#0",
        "userRewardDebt#0",
        "stakeInfo#0",
        "userStake#0",
        "totalEarned#0"
      ]
    },
    "918": {
      "op": "frame_dig 1",
      "stack_out": [
        "totalEarned#0",
        "userRewardDebt#0",
        "stakeInfo#0",
        "userStake#0",
        "totalEarned#0",
        "userRewardDebt#0"
      ]
    },
    "920": {
      "op": "-",
      "defined_out": [
        "pendingRewards#0",
        "stakeInfo#0",
        "totalEarned#0",
        "userRewardDebt#0",
        "userStake#0"
      ],
      "stack_out": [
        "totalEarned#0",
        "userRewardDebt#0",
        "stakeInfo#0",
        "userStake#0",
        "pendingRewards#0"
      ]
    },
    "921": {
      "block": "calculatePendingRewards_ternary_merge@5",
      "stack_in": [
        "totalEarned#0",
        "userRewardDebt#0",
        "stakeInfo#0",
        "userStake#0",
        "pendingRewards#0"
      ],
      "op": "frame_bury 0",
      "defined_out": [
        "pendingRewards#0"
      ]
    },
    "923": {
      "retsub": true,
      "op": "retsub"
    },
    "924": {
      "block": "calculatePendingRewards_ternary_false@4",
      "stack_in": [
        "totalEarned#0",
        "userRewardDebt#0",
        "stakeInfo#0",
        "userStake#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "pendingRewards#0"
      ],
      "stack_out": [
        "totalEarned#0",
        "userRewardDebt#0",
        "stakeInfo#0",
        "userStake#0",
        "pendingRewards#0"
      ]
    },
    "925": {
      "op": "b calculatePendingRewards_ternary_merge@5"
    },
    "928": {
      "subroutine": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.initialize",
      "params": {
        "asset#0": "uint64",
        "adminAddress#0": "bytes",
        "minimumStake#0": "uint64",
        "weeklyRewards#0": "uint64",
        "rewardPeriod#0": "uint64"
      },
      "block": "initialize",
      "stack_in": [],
      "op": "proto 5 0"
    },
    "931": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "932": {
      "op": "bytec_1 // \"asset\"",
      "defined_out": [
        "\"asset\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"asset\""
      ]
    },
    "933": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "934": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "935": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "936": {
      "error": "Already initialized",
      "op": "assert // Already initialized",
      "stack_out": []
    },
    "937": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "939": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "941": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "942": {
      "error": "Only creator can initialize",
      "op": "assert // Only creator can initialize",
      "stack_out": []
    },
    "943": {
      "op": "bytec_1 // \"asset\"",
      "stack_out": [
        "\"asset\""
      ]
    },
    "944": {
      "op": "frame_dig -5",
      "defined_out": [
        "\"asset\"",
        "asset#0 (copy)"
      ],
      "stack_out": [
        "\"asset\"",
        "asset#0 (copy)"
      ]
    },
    "946": {
      "op": "app_global_put",
      "stack_out": []
    },
    "947": {
      "op": "bytec_3 // \"adminAddress\"",
      "defined_out": [
        "\"adminAddress\""
      ],
      "stack_out": [
        "\"adminAddress\""
      ]
    },
    "948": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"adminAddress\"",
        "adminAddress#0 (copy)"
      ],
      "stack_out": [
        "\"adminAddress\"",
        "adminAddress#0 (copy)"
      ]
    },
    "950": {
      "op": "app_global_put",
      "stack_out": []
    },
    "951": {
      "op": "bytec_2 // \"totalStaked\"",
      "defined_out": [
        "\"totalStaked\""
      ],
      "stack_out": [
        "\"totalStaked\""
      ]
    },
    "952": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"totalStaked\"",
        "0"
      ]
    },
    "953": {
      "op": "app_global_put",
      "stack_out": []
    },
    "954": {
      "op": "bytec 6 // \"lastRewardTime\"",
      "defined_out": [
        "\"lastRewardTime\""
      ],
      "stack_out": [
        "\"lastRewardTime\""
      ]
    },
    "956": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "\"lastRewardTime\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "\"lastRewardTime\"",
        "new_state_value%0#0"
      ]
    },
    "958": {
      "op": "app_global_put",
      "stack_out": []
    },
    "959": {
      "op": "bytec 7 // \"minimumStake\"",
      "defined_out": [
        "\"minimumStake\""
      ],
      "stack_out": [
        "\"minimumStake\""
      ]
    },
    "961": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"minimumStake\"",
        "minimumStake#0 (copy)"
      ],
      "stack_out": [
        "\"minimumStake\"",
        "minimumStake#0 (copy)"
      ]
    },
    "963": {
      "op": "app_global_put",
      "stack_out": []
    },
    "964": {
      "op": "bytec_0 // \"rewardPool\"",
      "defined_out": [
        "\"rewardPool\""
      ],
      "stack_out": [
        "\"rewardPool\""
      ]
    },
    "965": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"rewardPool\"",
        "0"
      ]
    },
    "966": {
      "op": "app_global_put",
      "stack_out": []
    },
    "967": {
      "op": "bytec 4 // \"accumulatedRewardsPerShare\"",
      "defined_out": [
        "\"accumulatedRewardsPerShare\""
      ],
      "stack_out": [
        "\"accumulatedRewardsPerShare\""
      ]
    },
    "969": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"accumulatedRewardsPerShare\"",
        "0"
      ]
    },
    "970": {
      "op": "app_global_put",
      "stack_out": []
    },
    "971": {
      "op": "bytec 8 // \"weeklyRewards\"",
      "defined_out": [
        "\"weeklyRewards\""
      ],
      "stack_out": [
        "\"weeklyRewards\""
      ]
    },
    "973": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"weeklyRewards\"",
        "weeklyRewards#0 (copy)"
      ],
      "stack_out": [
        "\"weeklyRewards\"",
        "weeklyRewards#0 (copy)"
      ]
    },
    "975": {
      "op": "app_global_put",
      "stack_out": []
    },
    "976": {
      "op": "bytec 9 // \"rewardPeriod\"",
      "defined_out": [
        "\"rewardPeriod\""
      ],
      "stack_out": [
        "\"rewardPeriod\""
      ]
    },
    "978": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"rewardPeriod\"",
        "rewardPeriod#0 (copy)"
      ],
      "stack_out": [
        "\"rewardPeriod\"",
        "rewardPeriod#0 (copy)"
      ]
    },
    "980": {
      "op": "app_global_put",
      "stack_out": []
    },
    "981": {
      "op": "bytec 5 // \"precision\"",
      "defined_out": [
        "\"precision\""
      ],
      "stack_out": [
        "\"precision\""
      ]
    },
    "983": {
      "op": "pushint 1000000 // 1000000",
      "defined_out": [
        "\"precision\"",
        "1000000"
      ],
      "stack_out": [
        "\"precision\"",
        "1000000"
      ]
    },
    "987": {
      "op": "app_global_put",
      "stack_out": []
    },
    "988": {
      "retsub": true,
      "op": "retsub"
    },
    "989": {
      "subroutine": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.optInToAsset",
      "params": {},
      "block": "optInToAsset",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "992": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "993": {
      "op": "bytec_3 // \"adminAddress\"",
      "defined_out": [
        "\"adminAddress\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"adminAddress\""
      ]
    },
    "994": {
      "op": "app_global_get_ex",
      "defined_out": [
        "adminAddr#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "maybe_exists%0#0"
      ]
    },
    "995": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "adminAddr#0"
      ]
    },
    "996": {
      "op": "txn Sender",
      "defined_out": [
        "adminAddr#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "tmp%0#0"
      ]
    },
    "998": {
      "op": "global CreatorAddress",
      "defined_out": [
        "adminAddr#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "1000": {
      "op": "==",
      "defined_out": [
        "adminAddr#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "tmp%2#0"
      ]
    },
    "1001": {
      "op": "bnz optInToAsset_bool_true@2",
      "stack_out": [
        "adminAddr#0"
      ]
    },
    "1004": {
      "op": "txn Sender",
      "defined_out": [
        "adminAddr#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "tmp%3#0"
      ]
    },
    "1006": {
      "op": "frame_dig 0",
      "stack_out": [
        "adminAddr#0",
        "tmp%3#0",
        "adminAddr#0"
      ]
    },
    "1008": {
      "op": "==",
      "defined_out": [
        "adminAddr#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "tmp%4#0"
      ]
    },
    "1009": {
      "op": "bz optInToAsset_bool_false@3",
      "stack_out": [
        "adminAddr#0"
      ]
    },
    "1012": {
      "block": "optInToAsset_bool_true@2",
      "stack_in": [
        "adminAddr#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "or_result%0#0"
      ]
    },
    "1013": {
      "block": "optInToAsset_bool_merge@4",
      "stack_in": [
        "adminAddr#0",
        "or_result%0#0"
      ],
      "error": "Only creator or admin can opt in",
      "op": "assert // Only creator or admin can opt in",
      "defined_out": [],
      "stack_out": [
        "adminAddr#0"
      ]
    },
    "1014": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "adminAddr#0",
        "0"
      ]
    },
    "1015": {
      "op": "bytec_1 // \"asset\"",
      "defined_out": [
        "\"asset\"",
        "0"
      ],
      "stack_out": [
        "adminAddr#0",
        "0",
        "\"asset\""
      ]
    },
    "1016": {
      "op": "app_global_get_ex",
      "defined_out": [
        "asset#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "asset#0",
        "maybe_exists%1#0"
      ]
    },
    "1017": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "adminAddr#0",
        "asset#0"
      ]
    },
    "1018": {
      "op": "itxn_begin"
    },
    "1019": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "asset#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "asset#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "1021": {
      "op": "swap",
      "stack_out": [
        "adminAddr#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "asset#0"
      ]
    },
    "1022": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "adminAddr#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "1024": {
      "op": "intc_0 // 0",
      "stack_out": [
        "adminAddr#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "1025": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "adminAddr#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "1027": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "adminAddr#0"
      ]
    },
    "1029": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "adminAddr#0",
        "4"
      ]
    },
    "1030": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "adminAddr#0"
      ]
    },
    "1032": {
      "op": "intc_0 // 0",
      "stack_out": [
        "adminAddr#0",
        "0"
      ]
    },
    "1033": {
      "op": "itxn_field Fee",
      "stack_out": [
        "adminAddr#0"
      ]
    },
    "1035": {
      "op": "itxn_submit"
    },
    "1036": {
      "retsub": true,
      "op": "retsub"
    },
    "1037": {
      "block": "optInToAsset_bool_false@3",
      "stack_in": [
        "adminAddr#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "or_result%0#0"
      ]
    },
    "1038": {
      "op": "b optInToAsset_bool_merge@4"
    },
    "1041": {
      "subroutine": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.stake",
      "params": {},
      "block": "stake",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "1044": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "pendingRewards#0"
      ]
    },
    "1046": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "0"
      ]
    },
    "1047": {
      "op": "bytec_1 // \"asset\"",
      "defined_out": [
        "\"asset\"",
        "0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "0",
        "\"asset\""
      ]
    },
    "1048": {
      "op": "app_global_get_ex",
      "defined_out": [
        "asset#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "asset#0",
        "maybe_exists%0#0"
      ]
    },
    "1049": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "pendingRewards#0",
        "asset#0"
      ]
    },
    "1050": {
      "op": "intc_0 // 0",
      "stack_out": [
        "pendingRewards#0",
        "asset#0",
        "0"
      ]
    },
    "1051": {
      "op": "bytec_1 // \"asset\"",
      "stack_out": [
        "pendingRewards#0",
        "asset#0",
        "0",
        "\"asset\""
      ]
    },
    "1052": {
      "op": "app_global_get_ex",
      "defined_out": [
        "asset#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "asset#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1053": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "pendingRewards#0",
        "asset#0",
        "maybe_value%1#0"
      ]
    },
    "1054": {
      "error": "Contract not initialized",
      "op": "assert // Contract not initialized",
      "stack_out": [
        "pendingRewards#0",
        "asset#0"
      ]
    },
    "1055": {
      "op": "global GroupSize",
      "defined_out": [
        "asset#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "asset#0",
        "tmp%1#0"
      ]
    },
    "1057": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "asset#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "asset#0",
        "tmp%1#0",
        "2"
      ]
    },
    "1059": {
      "op": "==",
      "defined_out": [
        "asset#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "asset#0",
        "tmp%2#0"
      ]
    },
    "1060": {
      "error": "Expected 2 txns in group",
      "op": "assert // Expected 2 txns in group",
      "stack_out": [
        "pendingRewards#0",
        "asset#0"
      ]
    },
    "1061": {
      "op": "intc_0 // 0",
      "stack_out": [
        "pendingRewards#0",
        "asset#0",
        "0"
      ]
    },
    "1062": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "asset#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "asset#0",
        "gtxn_type%0#0"
      ]
    },
    "1064": {
      "op": "dup",
      "defined_out": [
        "asset#0",
        "gtxn_type%0#0",
        "gtxn_type%0#0 (copy)"
      ],
      "stack_out": [
        "pendingRewards#0",
        "asset#0",
        "gtxn_type%0#0",
        "gtxn_type%0#0 (copy)"
      ]
    },
    "1065": {
      "op": "intc_2 // axfer",
      "defined_out": [
        "asset#0",
        "axfer",
        "gtxn_type%0#0",
        "gtxn_type%0#0 (copy)"
      ],
      "stack_out": [
        "pendingRewards#0",
        "asset#0",
        "gtxn_type%0#0",
        "gtxn_type%0#0 (copy)",
        "axfer"
      ]
    },
    "1066": {
      "op": "==",
      "defined_out": [
        "asset#0",
        "gtxn_type%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "asset#0",
        "gtxn_type%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "1067": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "pendingRewards#0",
        "asset#0",
        "gtxn_type%0#0"
      ]
    },
    "1068": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4",
        "asset#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "asset#0",
        "gtxn_type%0#0",
        "4"
      ]
    },
    "1069": {
      "op": "==",
      "defined_out": [
        "asset#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "asset#0",
        "tmp%4#0"
      ]
    },
    "1070": {
      "error": "Transaction 0 must be asset transfer",
      "op": "assert // Transaction 0 must be asset transfer",
      "stack_out": [
        "pendingRewards#0",
        "asset#0"
      ]
    },
    "1071": {
      "op": "intc_0 // 0",
      "stack_out": [
        "pendingRewards#0",
        "asset#0",
        "0"
      ]
    },
    "1072": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "asset#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "asset#0",
        "tmp%5#0"
      ]
    },
    "1074": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "asset#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "asset#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "1076": {
      "op": "==",
      "defined_out": [
        "asset#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "asset#0",
        "tmp%7#0"
      ]
    },
    "1077": {
      "error": "Asset transfer must be to contract",
      "op": "assert // Asset transfer must be to contract",
      "stack_out": [
        "pendingRewards#0",
        "asset#0"
      ]
    },
    "1078": {
      "op": "intc_0 // 0",
      "stack_out": [
        "pendingRewards#0",
        "asset#0",
        "0"
      ]
    },
    "1079": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "asset#0",
        "stakeAmount#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "asset#0",
        "stakeAmount#0"
      ]
    },
    "1081": {
      "op": "dup",
      "stack_out": [
        "pendingRewards#0",
        "asset#0",
        "stakeAmount#0",
        "stakeAmount#0"
      ]
    },
    "1082": {
      "op": "cover 2",
      "defined_out": [
        "asset#0",
        "stakeAmount#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "asset#0",
        "stakeAmount#0"
      ]
    },
    "1084": {
      "error": "Must stake non-zero amount",
      "op": "assert // Must stake non-zero amount",
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "asset#0"
      ]
    },
    "1085": {
      "op": "intc_0 // 0",
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "asset#0",
        "0"
      ]
    },
    "1086": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "asset#0",
        "stakeAmount#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "asset#0",
        "tmp%10#0"
      ]
    },
    "1088": {
      "op": "==",
      "defined_out": [
        "stakeAmount#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "tmp%11#0"
      ]
    },
    "1089": {
      "error": "Incorrect asset ID",
      "op": "assert // Incorrect asset ID",
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0"
      ]
    },
    "1090": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.updateRewards",
      "op": "callsub updateRewards"
    },
    "1093": {
      "op": "intc_0 // 0",
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "0"
      ]
    },
    "1094": {
      "op": "bytec 7 // \"minimumStake\"",
      "defined_out": [
        "\"minimumStake\"",
        "0",
        "stakeAmount#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "0",
        "\"minimumStake\""
      ]
    },
    "1096": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "minimumStake#0",
        "stakeAmount#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "maybe_exists%2#0"
      ]
    },
    "1097": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0"
      ]
    },
    "1098": {
      "op": "txn Sender"
    },
    "1100": {
      "op": "dup",
      "defined_out": [
        "minimumStake#0",
        "senderAddress#0",
        "stakeAmount#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "senderAddress#0"
      ]
    },
    "1101": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.getUserStakeInfo",
      "op": "callsub getUserStakeInfo",
      "defined_out": [
        "minimumStake#0",
        "senderAddress#0",
        "stakeAmount#0",
        "stakeInfo#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0"
      ]
    },
    "1104": {
      "op": "dupn 2",
      "defined_out": [
        "minimumStake#0",
        "senderAddress#0",
        "stakeAmount#0",
        "stakeInfo#0",
        "stakeInfo#0 (copy)"
      ],
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#0",
        "stakeInfo#0 (copy)"
      ]
    },
    "1106": {
      "op": "intc_0 // 0",
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#0",
        "stakeInfo#0 (copy)",
        "0"
      ]
    },
    "1107": {
      "op": "extract_uint64",
      "defined_out": [
        "minimumStake#0",
        "senderAddress#0",
        "stakeAmount#0",
        "stakeInfo#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#0",
        "tmp%13#0"
      ]
    },
    "1108": {
      "op": "dup"
    },
    "1109": {
      "op": "uncover 2",
      "defined_out": [
        "minimumStake#0",
        "senderAddress#0",
        "stakeAmount#0",
        "stakeInfo#0",
        "stakeInfo#14",
        "tmp%13#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "tmp%13#0",
        "stakeInfo#14"
      ]
    },
    "1111": {
      "op": "swap",
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "tmp%13#0"
      ]
    },
    "1112": {
      "op": "bz stake_after_if_else@5",
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14"
      ]
    },
    "1115": {
      "op": "frame_dig 3",
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "senderAddress#0"
      ]
    },
    "1117": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.calculatePendingRewards",
      "op": "callsub calculatePendingRewards",
      "defined_out": [
        "minimumStake#0",
        "pendingRewards#0",
        "senderAddress#0",
        "stakeAmount#0",
        "stakeInfo#0",
        "stakeInfo#14",
        "tmp%13#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "pendingRewards#0"
      ]
    },
    "1120": {
      "op": "dup",
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "pendingRewards#0",
        "pendingRewards#0"
      ]
    },
    "1121": {
      "op": "frame_bury 0",
      "defined_out": [
        "minimumStake#0",
        "pendingRewards#0",
        "senderAddress#0",
        "stakeAmount#0",
        "stakeInfo#0",
        "stakeInfo#14",
        "tmp%13#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "pendingRewards#0"
      ]
    },
    "1123": {
      "op": "frame_dig 4",
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "pendingRewards#0",
        "stakeInfo#14"
      ]
    },
    "1125": {
      "op": "frame_bury 6",
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "pendingRewards#0"
      ]
    },
    "1127": {
      "op": "bz stake_after_if_else@5",
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14"
      ]
    },
    "1130": {
      "op": "intc_0 // 0",
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "0"
      ]
    },
    "1131": {
      "op": "bytec_0 // \"rewardPool\"",
      "defined_out": [
        "\"rewardPool\"",
        "0",
        "minimumStake#0",
        "pendingRewards#0",
        "senderAddress#0",
        "stakeAmount#0",
        "stakeInfo#0",
        "stakeInfo#14",
        "tmp%13#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "0",
        "\"rewardPool\""
      ]
    },
    "1132": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "minimumStake#0",
        "pendingRewards#0",
        "senderAddress#0",
        "stakeAmount#0",
        "stakeInfo#0",
        "stakeInfo#14",
        "tmp%13#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1133": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "maybe_value%3#0"
      ]
    },
    "1134": {
      "op": "frame_dig 0",
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "maybe_value%3#0",
        "pendingRewards#0"
      ]
    },
    "1136": {
      "op": ">=",
      "defined_out": [
        "minimumStake#0",
        "pendingRewards#0",
        "senderAddress#0",
        "stakeAmount#0",
        "stakeInfo#0",
        "stakeInfo#14",
        "tmp%13#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "tmp%16#0"
      ]
    },
    "1137": {
      "op": "frame_dig 4",
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "tmp%16#0",
        "stakeInfo#14"
      ]
    },
    "1139": {
      "op": "frame_bury 6",
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "tmp%16#0"
      ]
    },
    "1141": {
      "op": "bz stake_after_if_else@5",
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14"
      ]
    },
    "1144": {
      "op": "frame_dig 5",
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "tmp%13#0"
      ]
    },
    "1146": {
      "op": "frame_dig 0",
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "tmp%13#0",
        "pendingRewards#0"
      ]
    },
    "1148": {
      "op": "dup",
      "defined_out": [
        "minimumStake#0",
        "pendingRewards#0",
        "pendingRewards#0 (copy)",
        "senderAddress#0",
        "stakeAmount#0",
        "stakeInfo#0",
        "stakeInfo#14",
        "tmp%13#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "tmp%13#0",
        "pendingRewards#0 (copy)",
        "pendingRewards#0 (copy)"
      ]
    },
    "1149": {
      "op": "cover 2",
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "pendingRewards#0",
        "tmp%13#0",
        "pendingRewards#0 (copy)"
      ]
    },
    "1151": {
      "op": "+",
      "defined_out": [
        "minimumStake#0",
        "pendingRewards#0",
        "senderAddress#0",
        "stakeAmount#0",
        "stakeInfo#0",
        "stakeInfo#14",
        "tmp%13#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "pendingRewards#0",
        "to_encode%0#0"
      ]
    },
    "1152": {
      "op": "itob",
      "defined_out": [
        "minimumStake#0",
        "pendingRewards#0",
        "senderAddress#0",
        "stakeAmount#0",
        "stakeInfo#0",
        "stakeInfo#14",
        "tmp%13#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "pendingRewards#0",
        "val_as_bytes%0#0"
      ]
    },
    "1153": {
      "op": "frame_dig 4",
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "pendingRewards#0",
        "val_as_bytes%0#0",
        "stakeInfo#0"
      ]
    },
    "1155": {
      "op": "swap",
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "pendingRewards#0",
        "stakeInfo#0",
        "val_as_bytes%0#0"
      ]
    },
    "1156": {
      "op": "replace2 0",
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "pendingRewards#0",
        "stakeInfo#0"
      ]
    },
    "1158": {
      "op": "dup",
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "pendingRewards#0",
        "stakeInfo#0",
        "stakeInfo#0 (copy)"
      ]
    },
    "1159": {
      "op": "intc_3 // 24",
      "defined_out": [
        "24",
        "minimumStake#0",
        "pendingRewards#0",
        "senderAddress#0",
        "stakeAmount#0",
        "stakeInfo#0",
        "stakeInfo#0 (copy)",
        "stakeInfo#14",
        "tmp%13#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "pendingRewards#0",
        "stakeInfo#0",
        "stakeInfo#0 (copy)",
        "24"
      ]
    },
    "1160": {
      "op": "extract_uint64",
      "defined_out": [
        "minimumStake#0",
        "pendingRewards#0",
        "senderAddress#0",
        "stakeAmount#0",
        "stakeInfo#0",
        "stakeInfo#14",
        "tmp%13#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "pendingRewards#0",
        "stakeInfo#0",
        "tmp%20#0"
      ]
    },
    "1161": {
      "op": "dig 2",
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "pendingRewards#0",
        "stakeInfo#0",
        "tmp%20#0",
        "pendingRewards#0 (copy)"
      ]
    },
    "1163": {
      "op": "+",
      "defined_out": [
        "minimumStake#0",
        "pendingRewards#0",
        "senderAddress#0",
        "stakeAmount#0",
        "stakeInfo#0",
        "stakeInfo#14",
        "tmp%13#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "pendingRewards#0",
        "stakeInfo#0",
        "to_encode%1#0"
      ]
    },
    "1164": {
      "op": "itob",
      "defined_out": [
        "minimumStake#0",
        "pendingRewards#0",
        "senderAddress#0",
        "stakeAmount#0",
        "stakeInfo#0",
        "stakeInfo#14",
        "tmp%13#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "pendingRewards#0",
        "stakeInfo#0",
        "val_as_bytes%1#0"
      ]
    },
    "1165": {
      "op": "replace2 24",
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "pendingRewards#0",
        "stakeInfo#0"
      ]
    },
    "1167": {
      "op": "intc_0 // 0",
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "pendingRewards#0",
        "stakeInfo#0",
        "0"
      ]
    },
    "1168": {
      "op": "bytec_2 // \"totalStaked\"",
      "defined_out": [
        "\"totalStaked\"",
        "0",
        "minimumStake#0",
        "pendingRewards#0",
        "senderAddress#0",
        "stakeAmount#0",
        "stakeInfo#0",
        "stakeInfo#14",
        "tmp%13#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "pendingRewards#0",
        "stakeInfo#0",
        "0",
        "\"totalStaked\""
      ]
    },
    "1169": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "minimumStake#0",
        "pendingRewards#0",
        "senderAddress#0",
        "stakeAmount#0",
        "stakeInfo#0",
        "stakeInfo#14",
        "tmp%13#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "pendingRewards#0",
        "stakeInfo#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "1170": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "pendingRewards#0",
        "stakeInfo#0",
        "maybe_value%4#0"
      ]
    },
    "1171": {
      "op": "dig 2",
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "pendingRewards#0",
        "stakeInfo#0",
        "maybe_value%4#0",
        "pendingRewards#0 (copy)"
      ]
    },
    "1173": {
      "op": "+",
      "defined_out": [
        "minimumStake#0",
        "new_state_value%0#0",
        "pendingRewards#0",
        "senderAddress#0",
        "stakeAmount#0",
        "stakeInfo#0",
        "stakeInfo#14",
        "tmp%13#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "pendingRewards#0",
        "stakeInfo#0",
        "new_state_value%0#0"
      ]
    },
    "1174": {
      "op": "bytec_2 // \"totalStaked\"",
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "pendingRewards#0",
        "stakeInfo#0",
        "new_state_value%0#0",
        "\"totalStaked\""
      ]
    },
    "1175": {
      "op": "swap",
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "pendingRewards#0",
        "stakeInfo#0",
        "\"totalStaked\"",
        "new_state_value%0#0"
      ]
    },
    "1176": {
      "op": "app_global_put",
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "pendingRewards#0",
        "stakeInfo#0"
      ]
    },
    "1177": {
      "op": "intc_0 // 0",
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "pendingRewards#0",
        "stakeInfo#0",
        "0"
      ]
    },
    "1178": {
      "op": "bytec_0 // \"rewardPool\"",
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "pendingRewards#0",
        "stakeInfo#0",
        "0",
        "\"rewardPool\""
      ]
    },
    "1179": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "minimumStake#0",
        "pendingRewards#0",
        "senderAddress#0",
        "stakeAmount#0",
        "stakeInfo#0",
        "stakeInfo#14",
        "tmp%13#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "pendingRewards#0",
        "stakeInfo#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "1180": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "pendingRewards#0",
        "stakeInfo#0",
        "maybe_value%5#0"
      ]
    },
    "1181": {
      "op": "uncover 2",
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "stakeInfo#0",
        "maybe_value%5#0",
        "pendingRewards#0"
      ]
    },
    "1183": {
      "op": "-",
      "defined_out": [
        "minimumStake#0",
        "new_state_value%1#0",
        "pendingRewards#0",
        "senderAddress#0",
        "stakeAmount#0",
        "stakeInfo#0",
        "stakeInfo#14",
        "tmp%13#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "stakeInfo#0",
        "new_state_value%1#0"
      ]
    },
    "1184": {
      "op": "bytec_0 // \"rewardPool\"",
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "stakeInfo#0",
        "new_state_value%1#0",
        "\"rewardPool\""
      ]
    },
    "1185": {
      "op": "swap",
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "stakeInfo#0",
        "\"rewardPool\"",
        "new_state_value%1#0"
      ]
    },
    "1186": {
      "op": "app_global_put",
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "stakeInfo#14"
      ]
    },
    "1187": {
      "op": "frame_bury 6",
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14"
      ]
    },
    "1189": {
      "block": "stake_after_if_else@5",
      "stack_in": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14"
      ],
      "op": "frame_dig 6",
      "defined_out": [
        "stakeInfo#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "stakeInfo#0"
      ]
    },
    "1191": {
      "op": "dup",
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "stakeInfo#0",
        "stakeInfo#0"
      ]
    },
    "1192": {
      "op": "frame_bury 4",
      "defined_out": [
        "stakeInfo#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "stakeInfo#0"
      ]
    },
    "1194": {
      "op": "dup",
      "defined_out": [
        "stakeInfo#0",
        "stakeInfo#0 (copy)"
      ],
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "stakeInfo#0",
        "stakeInfo#0 (copy)"
      ]
    },
    "1195": {
      "op": "intc_0 // 0",
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "stakeInfo#0",
        "stakeInfo#0 (copy)",
        "0"
      ]
    },
    "1196": {
      "op": "extract_uint64",
      "defined_out": [
        "stakeInfo#0",
        "tmp%22#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "stakeInfo#0",
        "tmp%22#0"
      ]
    },
    "1197": {
      "op": "swap",
      "defined_out": [
        "stakeInfo#0",
        "stakeInfo#14",
        "tmp%22#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "tmp%22#0",
        "stakeInfo#14"
      ]
    },
    "1198": {
      "op": "frame_bury 6",
      "defined_out": [
        "stakeInfo#0",
        "stakeInfo#14",
        "tmp%22#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "tmp%22#0"
      ]
    },
    "1200": {
      "op": "bnz stake_after_if_else@7",
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14"
      ]
    },
    "1203": {
      "op": "frame_dig 1",
      "defined_out": [
        "stakeAmount#0",
        "stakeInfo#0",
        "stakeInfo#14"
      ],
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "stakeAmount#0"
      ]
    },
    "1205": {
      "op": "frame_dig 2",
      "defined_out": [
        "minimumStake#0",
        "stakeAmount#0",
        "stakeInfo#0",
        "stakeInfo#14"
      ],
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "stakeAmount#0",
        "minimumStake#0"
      ]
    },
    "1207": {
      "op": ">=",
      "defined_out": [
        "minimumStake#0",
        "stakeAmount#0",
        "stakeInfo#0",
        "stakeInfo#14",
        "tmp%24#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "tmp%24#0"
      ]
    },
    "1208": {
      "error": "Initial stake below minimum",
      "op": "assert // Initial stake below minimum",
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14"
      ]
    },
    "1209": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "minimumStake#0",
        "stakeAmount#0",
        "stakeInfo#0",
        "stakeInfo#14",
        "to_encode%2#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "to_encode%2#0"
      ]
    },
    "1211": {
      "op": "itob",
      "defined_out": [
        "minimumStake#0",
        "stakeAmount#0",
        "stakeInfo#0",
        "stakeInfo#14",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "val_as_bytes%2#0"
      ]
    },
    "1212": {
      "op": "frame_dig 4",
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "val_as_bytes%2#0",
        "stakeInfo#0"
      ]
    },
    "1214": {
      "op": "swap",
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "stakeInfo#0",
        "val_as_bytes%2#0"
      ]
    },
    "1215": {
      "op": "replace2 8",
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "stakeInfo#14"
      ]
    },
    "1217": {
      "op": "frame_bury 6",
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14"
      ]
    },
    "1219": {
      "block": "stake_after_if_else@7",
      "stack_in": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14"
      ],
      "op": "frame_dig 6",
      "defined_out": [
        "stakeInfo#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "stakeInfo#0"
      ]
    },
    "1221": {
      "op": "dup",
      "defined_out": [
        "stakeInfo#0",
        "stakeInfo#0 (copy)"
      ],
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "stakeInfo#0",
        "stakeInfo#0 (copy)"
      ]
    },
    "1222": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "stakeInfo#0",
        "stakeInfo#0 (copy)"
      ],
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "stakeInfo#0",
        "stakeInfo#0 (copy)",
        "0"
      ]
    },
    "1223": {
      "op": "extract_uint64",
      "defined_out": [
        "stakeInfo#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "stakeInfo#0",
        "tmp%26#0"
      ]
    },
    "1224": {
      "op": "frame_dig 1",
      "defined_out": [
        "stakeAmount#0",
        "stakeInfo#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "stakeInfo#0",
        "tmp%26#0",
        "stakeAmount#0"
      ]
    },
    "1226": {
      "op": "dup",
      "defined_out": [
        "stakeAmount#0",
        "stakeAmount#0 (copy)",
        "stakeInfo#0",
        "tmp%26#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "stakeInfo#0",
        "tmp%26#0",
        "stakeAmount#0 (copy)",
        "stakeAmount#0 (copy)"
      ]
    },
    "1227": {
      "op": "cover 3",
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "stakeAmount#0",
        "stakeInfo#0",
        "tmp%26#0",
        "stakeAmount#0 (copy)"
      ]
    },
    "1229": {
      "op": "+",
      "defined_out": [
        "stakeAmount#0",
        "stakeInfo#0",
        "to_encode%3#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "stakeAmount#0",
        "stakeInfo#0",
        "to_encode%3#0"
      ]
    },
    "1230": {
      "op": "itob",
      "defined_out": [
        "stakeAmount#0",
        "stakeInfo#0",
        "val_as_bytes%3#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "stakeAmount#0",
        "stakeInfo#0",
        "val_as_bytes%3#0"
      ]
    },
    "1231": {
      "op": "replace2 0",
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "stakeAmount#0",
        "stakeInfo#0"
      ]
    },
    "1233": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "stakeAmount#0",
        "stakeInfo#0",
        "to_encode%4#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "stakeAmount#0",
        "stakeInfo#0",
        "to_encode%4#0"
      ]
    },
    "1235": {
      "op": "itob",
      "defined_out": [
        "stakeAmount#0",
        "stakeInfo#0",
        "val_as_bytes%4#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "stakeAmount#0",
        "stakeInfo#0",
        "val_as_bytes%4#0"
      ]
    },
    "1236": {
      "op": "replace2 16",
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "stakeAmount#0",
        "stakeInfo#0"
      ]
    },
    "1238": {
      "op": "dup",
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "stakeAmount#0",
        "stakeInfo#0",
        "stakeInfo#0 (copy)"
      ]
    },
    "1239": {
      "op": "intc_0 // 0",
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "stakeAmount#0",
        "stakeInfo#0",
        "stakeInfo#0 (copy)",
        "0"
      ]
    },
    "1240": {
      "op": "extract_uint64",
      "defined_out": [
        "stakeAmount#0",
        "stakeInfo#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "stakeAmount#0",
        "stakeInfo#0",
        "tmp%28#0"
      ]
    },
    "1241": {
      "op": "intc_0 // 0",
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "stakeAmount#0",
        "stakeInfo#0",
        "tmp%28#0",
        "0"
      ]
    },
    "1242": {
      "op": "bytec 4 // \"accumulatedRewardsPerShare\"",
      "defined_out": [
        "\"accumulatedRewardsPerShare\"",
        "0",
        "stakeAmount#0",
        "stakeInfo#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "stakeAmount#0",
        "stakeInfo#0",
        "tmp%28#0",
        "0",
        "\"accumulatedRewardsPerShare\""
      ]
    },
    "1244": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%6#0",
        "maybe_value%6#0",
        "stakeAmount#0",
        "stakeInfo#0",
        "tmp%28#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "stakeAmount#0",
        "stakeInfo#0",
        "tmp%28#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "1245": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "stakeAmount#0",
        "stakeInfo#0",
        "tmp%28#0",
        "maybe_value%6#0"
      ]
    },
    "1246": {
      "op": "*",
      "defined_out": [
        "stakeAmount#0",
        "stakeInfo#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "stakeAmount#0",
        "stakeInfo#0",
        "tmp%29#0"
      ]
    },
    "1247": {
      "op": "intc_0 // 0",
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "stakeAmount#0",
        "stakeInfo#0",
        "tmp%29#0",
        "0"
      ]
    },
    "1248": {
      "op": "bytec 5 // \"precision\"",
      "defined_out": [
        "\"precision\"",
        "0",
        "stakeAmount#0",
        "stakeInfo#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "stakeAmount#0",
        "stakeInfo#0",
        "tmp%29#0",
        "0",
        "\"precision\""
      ]
    },
    "1250": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%7#0",
        "maybe_value%7#0",
        "stakeAmount#0",
        "stakeInfo#0",
        "tmp%29#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "stakeAmount#0",
        "stakeInfo#0",
        "tmp%29#0",
        "maybe_value%7#0",
        "maybe_exists%7#0"
      ]
    },
    "1251": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "stakeAmount#0",
        "stakeInfo#0",
        "tmp%29#0",
        "maybe_value%7#0"
      ]
    },
    "1252": {
      "op": "/",
      "defined_out": [
        "stakeAmount#0",
        "stakeInfo#0",
        "to_encode%5#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "stakeAmount#0",
        "stakeInfo#0",
        "to_encode%5#0"
      ]
    },
    "1253": {
      "op": "itob",
      "defined_out": [
        "stakeAmount#0",
        "stakeInfo#0",
        "val_as_bytes%5#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "stakeAmount#0",
        "stakeInfo#0",
        "val_as_bytes%5#0"
      ]
    },
    "1254": {
      "op": "replace2 32",
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "stakeAmount#0",
        "stakeInfo#0"
      ]
    },
    "1256": {
      "op": "frame_dig 3",
      "defined_out": [
        "senderAddress#0",
        "stakeAmount#0",
        "stakeInfo#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "stakeAmount#0",
        "stakeInfo#0",
        "senderAddress#0"
      ]
    },
    "1258": {
      "op": "swap",
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "stakeAmount#0",
        "senderAddress#0",
        "stakeInfo#0"
      ]
    },
    "1259": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.storeUserStakeInfo",
      "op": "callsub storeUserStakeInfo",
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "stakeAmount#0",
        "stakeInfo#0"
      ]
    },
    "1262": {
      "op": "pop",
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "stakeAmount#0"
      ]
    },
    "1263": {
      "op": "intc_0 // 0",
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "stakeAmount#0",
        "0"
      ]
    },
    "1264": {
      "op": "bytec_2 // \"totalStaked\"",
      "defined_out": [
        "\"totalStaked\"",
        "0",
        "senderAddress#0",
        "stakeAmount#0",
        "stakeInfo#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "stakeAmount#0",
        "0",
        "\"totalStaked\""
      ]
    },
    "1265": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%8#0",
        "maybe_value%8#0",
        "senderAddress#0",
        "stakeAmount#0",
        "stakeInfo#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "stakeAmount#0",
        "maybe_value%8#0",
        "maybe_exists%8#0"
      ]
    },
    "1266": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "stakeAmount#0",
        "maybe_value%8#0"
      ]
    },
    "1267": {
      "op": "+",
      "defined_out": [
        "new_state_value%2#0",
        "senderAddress#0",
        "stakeAmount#0",
        "stakeInfo#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "new_state_value%2#0"
      ]
    },
    "1268": {
      "op": "bytec_2 // \"totalStaked\"",
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "new_state_value%2#0",
        "\"totalStaked\""
      ]
    },
    "1269": {
      "op": "swap",
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14",
        "\"totalStaked\"",
        "new_state_value%2#0"
      ]
    },
    "1270": {
      "op": "app_global_put",
      "stack_out": [
        "pendingRewards#0",
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeInfo#14"
      ]
    },
    "1271": {
      "retsub": true,
      "op": "retsub"
    },
    "1272": {
      "subroutine": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.withdraw",
      "params": {
        "amount#0": "uint64"
      },
      "block": "withdraw",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1275": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "1277": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.updateRewards",
      "op": "callsub updateRewards"
    },
    "1280": {
      "op": "txn Sender"
    },
    "1282": {
      "op": "dupn 2",
      "defined_out": [
        "senderAddress#0",
        "senderAddress#0 (copy)"
      ],
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "senderAddress#0",
        "senderAddress#0 (copy)"
      ]
    },
    "1284": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.getUserStakeInfo",
      "op": "callsub getUserStakeInfo",
      "defined_out": [
        "senderAddress#0",
        "stakeInfo#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "senderAddress#0",
        "stakeInfo#0"
      ]
    },
    "1287": {
      "op": "dup",
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#0"
      ]
    },
    "1288": {
      "op": "cover 2",
      "defined_out": [
        "senderAddress#0",
        "stakeInfo#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "senderAddress#0",
        "stakeInfo#0"
      ]
    },
    "1290": {
      "op": "dup",
      "defined_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#0 (copy)"
      ],
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#0 (copy)"
      ]
    },
    "1291": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#0 (copy)",
        "0"
      ]
    },
    "1292": {
      "op": "extract_uint64",
      "defined_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ]
    },
    "1293": {
      "op": "dup",
      "defined_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "1294": {
      "error": "No stake found",
      "op": "assert // No stake found",
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ]
    },
    "1295": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "amount#0 (copy)"
      ]
    },
    "1297": {
      "op": ">=",
      "defined_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%5#0"
      ]
    },
    "1298": {
      "error": "Withdrawal amount exceeds stake",
      "op": "assert // Withdrawal amount exceeds stake",
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "senderAddress#0",
        "stakeInfo#0"
      ]
    },
    "1299": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "senderAddress#0",
        "stakeInfo#0",
        "amount#0 (copy)"
      ]
    },
    "1301": {
      "error": "Withdrawal amount must be positive",
      "op": "assert // Withdrawal amount must be positive",
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "senderAddress#0",
        "stakeInfo#0"
      ]
    },
    "1302": {
      "op": "swap",
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#0",
        "senderAddress#0"
      ]
    },
    "1303": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.calculatePendingRewards",
      "op": "callsub calculatePendingRewards",
      "defined_out": [
        "pendingRewards#0",
        "senderAddress#0",
        "stakeInfo#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#0",
        "pendingRewards#0"
      ]
    },
    "1306": {
      "op": "dup"
    },
    "1307": {
      "op": "uncover 2",
      "defined_out": [
        "pendingRewards#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#10"
      ],
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "pendingRewards#0",
        "stakeInfo#10"
      ]
    },
    "1309": {
      "op": "swap",
      "defined_out": [
        "pendingRewards#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#10"
      ],
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "pendingRewards#0"
      ]
    },
    "1310": {
      "op": "bz withdraw_after_if_else@4",
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10"
      ]
    },
    "1313": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "0"
      ]
    },
    "1314": {
      "op": "bytec_0 // \"rewardPool\"",
      "defined_out": [
        "\"rewardPool\"",
        "0",
        "pendingRewards#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#10"
      ],
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "0",
        "\"rewardPool\""
      ]
    },
    "1315": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "pendingRewards#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#10"
      ],
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1316": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "maybe_value%0#0"
      ]
    },
    "1317": {
      "op": "frame_dig 3",
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "maybe_value%0#0",
        "pendingRewards#0"
      ]
    },
    "1319": {
      "op": ">=",
      "defined_out": [
        "pendingRewards#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#10",
        "tmp%8#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "tmp%8#0"
      ]
    },
    "1320": {
      "op": "frame_dig 2",
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "tmp%8#0",
        "stakeInfo#10"
      ]
    },
    "1322": {
      "op": "frame_bury 4",
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "tmp%8#0"
      ]
    },
    "1324": {
      "op": "bz withdraw_after_if_else@4",
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10"
      ]
    },
    "1327": {
      "op": "frame_dig 2",
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "stakeInfo#0"
      ]
    },
    "1329": {
      "op": "dup",
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "stakeInfo#0",
        "stakeInfo#0 (copy)"
      ]
    },
    "1330": {
      "op": "intc_3 // 24",
      "defined_out": [
        "24",
        "pendingRewards#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#0 (copy)",
        "stakeInfo#10"
      ],
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "stakeInfo#0",
        "stakeInfo#0 (copy)",
        "24"
      ]
    },
    "1331": {
      "op": "extract_uint64",
      "defined_out": [
        "pendingRewards#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#10",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "stakeInfo#0",
        "tmp%10#0"
      ]
    },
    "1332": {
      "op": "frame_dig 3",
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "stakeInfo#0",
        "tmp%10#0",
        "pendingRewards#0"
      ]
    },
    "1334": {
      "op": "dup",
      "defined_out": [
        "pendingRewards#0",
        "pendingRewards#0 (copy)",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#10",
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "stakeInfo#0",
        "tmp%10#0",
        "pendingRewards#0 (copy)",
        "pendingRewards#0 (copy)"
      ]
    },
    "1335": {
      "op": "cover 3",
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "pendingRewards#0",
        "stakeInfo#0",
        "tmp%10#0",
        "pendingRewards#0 (copy)"
      ]
    },
    "1337": {
      "op": "+",
      "defined_out": [
        "pendingRewards#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#10",
        "to_encode%0#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "pendingRewards#0",
        "stakeInfo#0",
        "to_encode%0#0"
      ]
    },
    "1338": {
      "op": "itob",
      "defined_out": [
        "pendingRewards#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#10",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "pendingRewards#0",
        "stakeInfo#0",
        "val_as_bytes%0#0"
      ]
    },
    "1339": {
      "op": "replace2 24",
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "pendingRewards#0",
        "stakeInfo#0"
      ]
    },
    "1341": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "pendingRewards#0",
        "stakeInfo#0",
        "0"
      ]
    },
    "1342": {
      "op": "bytec_0 // \"rewardPool\"",
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "pendingRewards#0",
        "stakeInfo#0",
        "0",
        "\"rewardPool\""
      ]
    },
    "1343": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "pendingRewards#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#10"
      ],
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "pendingRewards#0",
        "stakeInfo#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1344": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "pendingRewards#0",
        "stakeInfo#0",
        "maybe_value%1#0"
      ]
    },
    "1345": {
      "op": "dig 2",
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "pendingRewards#0",
        "stakeInfo#0",
        "maybe_value%1#0",
        "pendingRewards#0 (copy)"
      ]
    },
    "1347": {
      "op": "-",
      "defined_out": [
        "new_state_value%0#0",
        "pendingRewards#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#10"
      ],
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "pendingRewards#0",
        "stakeInfo#0",
        "new_state_value%0#0"
      ]
    },
    "1348": {
      "op": "bytec_0 // \"rewardPool\"",
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "pendingRewards#0",
        "stakeInfo#0",
        "new_state_value%0#0",
        "\"rewardPool\""
      ]
    },
    "1349": {
      "op": "swap",
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "pendingRewards#0",
        "stakeInfo#0",
        "\"rewardPool\"",
        "new_state_value%0#0"
      ]
    },
    "1350": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "pendingRewards#0",
        "stakeInfo#0"
      ]
    },
    "1351": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "pendingRewards#0",
        "stakeInfo#0",
        "0"
      ]
    },
    "1352": {
      "op": "bytec_1 // \"asset\"",
      "defined_out": [
        "\"asset\"",
        "0",
        "pendingRewards#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#10"
      ],
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "pendingRewards#0",
        "stakeInfo#0",
        "0",
        "\"asset\""
      ]
    },
    "1353": {
      "op": "app_global_get_ex",
      "defined_out": [
        "asset#0",
        "maybe_exists%2#0",
        "pendingRewards#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#10"
      ],
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "pendingRewards#0",
        "stakeInfo#0",
        "asset#0",
        "maybe_exists%2#0"
      ]
    },
    "1354": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "pendingRewards#0",
        "stakeInfo#0",
        "asset#0"
      ]
    },
    "1355": {
      "op": "itxn_begin"
    },
    "1356": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "pendingRewards#0",
        "stakeInfo#0"
      ]
    },
    "1358": {
      "op": "swap",
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "stakeInfo#0",
        "pendingRewards#0"
      ]
    },
    "1359": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "stakeInfo#0"
      ]
    },
    "1361": {
      "op": "frame_dig 1",
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "stakeInfo#0",
        "senderAddress#0"
      ]
    },
    "1363": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "stakeInfo#0"
      ]
    },
    "1365": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4",
        "pendingRewards#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#10"
      ],
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "stakeInfo#0",
        "4"
      ]
    },
    "1366": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "stakeInfo#0"
      ]
    },
    "1368": {
      "op": "intc 4 // 1000",
      "defined_out": [
        "1000",
        "pendingRewards#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#10"
      ],
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "stakeInfo#0",
        "1000"
      ]
    },
    "1370": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "stakeInfo#0"
      ]
    },
    "1372": {
      "op": "itxn_submit",
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "stakeInfo#10"
      ]
    },
    "1373": {
      "op": "frame_bury 4",
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10"
      ]
    },
    "1375": {
      "block": "withdraw_after_if_else@4",
      "stack_in": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "stakeInfo#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "stakeInfo#0"
      ]
    },
    "1377": {
      "op": "dup",
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "stakeInfo#0",
        "stakeInfo#0"
      ]
    },
    "1378": {
      "op": "frame_bury 2",
      "defined_out": [
        "stakeInfo#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "stakeInfo#0"
      ]
    },
    "1380": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "stakeInfo#0",
        "0"
      ]
    },
    "1381": {
      "op": "extract_uint64",
      "defined_out": [
        "stakeInfo#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "tmp%12#0"
      ]
    },
    "1382": {
      "op": "dup",
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "tmp%12#0",
        "tmp%12#0"
      ]
    },
    "1383": {
      "op": "frame_bury 0",
      "defined_out": [
        "stakeInfo#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "tmp%12#0"
      ]
    },
    "1385": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "stakeInfo#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "tmp%12#0",
        "amount#0 (copy)"
      ]
    },
    "1387": {
      "op": ">",
      "defined_out": [
        "stakeInfo#0",
        "tmp%12#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "tmp%13#0"
      ]
    },
    "1388": {
      "op": "bz withdraw_after_if_else@6",
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10"
      ]
    },
    "1391": {
      "op": "frame_dig 0",
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "tmp%12#0"
      ]
    },
    "1393": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "tmp%12#0",
        "amount#0 (copy)"
      ]
    },
    "1395": {
      "op": "-",
      "defined_out": [
        "remainingStake#0",
        "stakeInfo#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "remainingStake#0"
      ]
    },
    "1396": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "remainingStake#0",
        "0"
      ]
    },
    "1397": {
      "op": "bytec 7 // \"minimumStake\"",
      "defined_out": [
        "\"minimumStake\"",
        "0",
        "remainingStake#0",
        "stakeInfo#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "remainingStake#0",
        "0",
        "\"minimumStake\""
      ]
    },
    "1399": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "minimumStake#0",
        "remainingStake#0",
        "stakeInfo#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "remainingStake#0",
        "minimumStake#0",
        "maybe_exists%3#0"
      ]
    },
    "1400": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "remainingStake#0",
        "minimumStake#0"
      ]
    },
    "1401": {
      "op": ">=",
      "defined_out": [
        "stakeInfo#0",
        "tmp%12#0",
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "tmp%16#0"
      ]
    },
    "1402": {
      "error": "Remaining stake would be below minimum",
      "op": "assert // Remaining stake would be below minimum",
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10"
      ]
    },
    "1403": {
      "block": "withdraw_after_if_else@6",
      "stack_in": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10"
      ],
      "op": "frame_dig 0",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "tmp%12#0"
      ]
    },
    "1405": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "tmp%12#0",
        "amount#0 (copy)"
      ]
    },
    "1407": {
      "op": "-",
      "defined_out": [
        "tmp%12#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "to_encode%1#0"
      ]
    },
    "1408": {
      "op": "itob",
      "defined_out": [
        "tmp%12#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "val_as_bytes%1#0"
      ]
    },
    "1409": {
      "op": "frame_dig 2",
      "defined_out": [
        "stakeInfo#0",
        "tmp%12#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "val_as_bytes%1#0",
        "stakeInfo#0"
      ]
    },
    "1411": {
      "op": "swap",
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "stakeInfo#0",
        "val_as_bytes%1#0"
      ]
    },
    "1412": {
      "op": "replace2 0",
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "stakeInfo#0"
      ]
    },
    "1414": {
      "op": "dup",
      "defined_out": [
        "stakeInfo#0",
        "stakeInfo#0 (copy)",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "stakeInfo#0",
        "stakeInfo#0 (copy)"
      ]
    },
    "1415": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "stakeInfo#0",
        "stakeInfo#0 (copy)",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "stakeInfo#0",
        "stakeInfo#0 (copy)",
        "0"
      ]
    },
    "1416": {
      "op": "extract_uint64",
      "defined_out": [
        "stakeInfo#0",
        "tmp%12#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "stakeInfo#0",
        "tmp%20#0"
      ]
    },
    "1417": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "stakeInfo#0",
        "tmp%20#0",
        "0"
      ]
    },
    "1418": {
      "op": "bytec 4 // \"accumulatedRewardsPerShare\"",
      "defined_out": [
        "\"accumulatedRewardsPerShare\"",
        "0",
        "stakeInfo#0",
        "tmp%12#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "stakeInfo#0",
        "tmp%20#0",
        "0",
        "\"accumulatedRewardsPerShare\""
      ]
    },
    "1420": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%4#0",
        "stakeInfo#0",
        "tmp%12#0",
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "stakeInfo#0",
        "tmp%20#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "1421": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "stakeInfo#0",
        "tmp%20#0",
        "maybe_value%4#0"
      ]
    },
    "1422": {
      "op": "*",
      "defined_out": [
        "stakeInfo#0",
        "tmp%12#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "stakeInfo#0",
        "tmp%21#0"
      ]
    },
    "1423": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "stakeInfo#0",
        "tmp%21#0",
        "0"
      ]
    },
    "1424": {
      "op": "bytec 5 // \"precision\"",
      "defined_out": [
        "\"precision\"",
        "0",
        "stakeInfo#0",
        "tmp%12#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "stakeInfo#0",
        "tmp%21#0",
        "0",
        "\"precision\""
      ]
    },
    "1426": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%5#0",
        "stakeInfo#0",
        "tmp%12#0",
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "stakeInfo#0",
        "tmp%21#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "1427": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "stakeInfo#0",
        "tmp%21#0",
        "maybe_value%5#0"
      ]
    },
    "1428": {
      "op": "/",
      "defined_out": [
        "stakeInfo#0",
        "tmp%12#0",
        "to_encode%2#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "stakeInfo#0",
        "to_encode%2#0"
      ]
    },
    "1429": {
      "op": "itob",
      "defined_out": [
        "stakeInfo#0",
        "tmp%12#0",
        "val_as_bytes%2#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "stakeInfo#0",
        "val_as_bytes%2#0"
      ]
    },
    "1430": {
      "op": "replace2 32",
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "stakeInfo#0"
      ]
    },
    "1432": {
      "op": "frame_dig 1",
      "defined_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "stakeInfo#0",
        "senderAddress#0"
      ]
    },
    "1434": {
      "op": "dup"
    },
    "1435": {
      "op": "uncover 2",
      "defined_out": [
        "senderAddress#0",
        "senderAddress#0 (copy)",
        "stakeInfo#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "senderAddress#0",
        "senderAddress#0 (copy)",
        "stakeInfo#0"
      ]
    },
    "1437": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.storeUserStakeInfo",
      "op": "callsub storeUserStakeInfo",
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "senderAddress#0",
        "stakeInfo#0"
      ]
    },
    "1440": {
      "op": "pop",
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "senderAddress#0"
      ]
    },
    "1441": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "senderAddress#0",
        "0"
      ]
    },
    "1442": {
      "op": "bytec_2 // \"totalStaked\"",
      "defined_out": [
        "\"totalStaked\"",
        "0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "senderAddress#0",
        "0",
        "\"totalStaked\""
      ]
    },
    "1443": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%6#0",
        "maybe_value%6#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "senderAddress#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "1444": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "senderAddress#0",
        "maybe_value%6#0"
      ]
    },
    "1445": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "senderAddress#0",
        "maybe_value%6#0",
        "amount#0 (copy)"
      ]
    },
    "1447": {
      "op": "-",
      "defined_out": [
        "new_state_value%1#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "senderAddress#0",
        "new_state_value%1#0"
      ]
    },
    "1448": {
      "op": "bytec_2 // \"totalStaked\"",
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "senderAddress#0",
        "new_state_value%1#0",
        "\"totalStaked\""
      ]
    },
    "1449": {
      "op": "swap",
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "senderAddress#0",
        "\"totalStaked\"",
        "new_state_value%1#0"
      ]
    },
    "1450": {
      "op": "app_global_put",
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "senderAddress#0"
      ]
    },
    "1451": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "senderAddress#0",
        "0"
      ]
    },
    "1452": {
      "op": "bytec_1 // \"asset\"",
      "defined_out": [
        "\"asset\"",
        "0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "senderAddress#0",
        "0",
        "\"asset\""
      ]
    },
    "1453": {
      "op": "app_global_get_ex",
      "defined_out": [
        "asset\u2081#0",
        "maybe_exists%7#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "senderAddress#0",
        "asset\u2081#0",
        "maybe_exists%7#0"
      ]
    },
    "1454": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "senderAddress#0",
        "asset\u2081#0"
      ]
    },
    "1455": {
      "op": "itxn_begin"
    },
    "1456": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "senderAddress#0"
      ]
    },
    "1458": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "senderAddress#0",
        "amount#0 (copy)"
      ]
    },
    "1460": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "senderAddress#0"
      ]
    },
    "1462": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10"
      ]
    },
    "1464": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "4"
      ]
    },
    "1465": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10"
      ]
    },
    "1467": {
      "op": "intc 4 // 1000",
      "defined_out": [
        "1000",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10",
        "1000"
      ]
    },
    "1469": {
      "op": "itxn_field Fee",
      "stack_out": [
        "tmp%12#0",
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#10"
      ]
    },
    "1471": {
      "op": "itxn_submit"
    },
    "1472": {
      "retsub": true,
      "op": "retsub"
    },
    "1473": {
      "subroutine": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.claimRewards",
      "params": {},
      "block": "claimRewards",
      "stack_in": [],
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.updateRewards",
      "op": "callsub updateRewards"
    },
    "1476": {
      "op": "txn Sender",
      "defined_out": [
        "senderAddress#0"
      ],
      "stack_out": [
        "senderAddress#0"
      ]
    },
    "1478": {
      "op": "dup",
      "defined_out": [
        "senderAddress#0",
        "senderAddress#0 (copy)"
      ],
      "stack_out": [
        "senderAddress#0",
        "senderAddress#0 (copy)"
      ]
    },
    "1479": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.getUserStakeInfo",
      "op": "callsub getUserStakeInfo",
      "defined_out": [
        "senderAddress#0",
        "stakeInfo#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0"
      ]
    },
    "1482": {
      "op": "dup",
      "defined_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#0 (copy)"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#0 (copy)"
      ]
    },
    "1483": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#0 (copy)"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#0 (copy)",
        "0"
      ]
    },
    "1484": {
      "op": "extract_uint64",
      "defined_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ]
    },
    "1485": {
      "error": "No stake found",
      "op": "assert // No stake found",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0"
      ]
    },
    "1486": {
      "op": "dig 1",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "senderAddress#0 (copy)"
      ]
    },
    "1488": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.calculatePendingRewards",
      "op": "callsub calculatePendingRewards",
      "defined_out": [
        "pendingRewards#0",
        "senderAddress#0",
        "stakeInfo#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0"
      ]
    },
    "1491": {
      "op": "dup",
      "defined_out": [
        "pendingRewards#0",
        "pendingRewards#0 (copy)",
        "senderAddress#0",
        "stakeInfo#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "pendingRewards#0 (copy)"
      ]
    },
    "1492": {
      "error": "No pending rewards",
      "op": "assert // No pending rewards",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0"
      ]
    },
    "1493": {
      "op": "intc_0 // 0",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "0"
      ]
    },
    "1494": {
      "op": "bytec_0 // \"rewardPool\"",
      "defined_out": [
        "\"rewardPool\"",
        "0",
        "pendingRewards#0",
        "senderAddress#0",
        "stakeInfo#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "0",
        "\"rewardPool\""
      ]
    },
    "1495": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "pendingRewards#0",
        "senderAddress#0",
        "stakeInfo#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1496": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "maybe_value%0#0"
      ]
    },
    "1497": {
      "op": "dig 1",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "maybe_value%0#0",
        "pendingRewards#0 (copy)"
      ]
    },
    "1499": {
      "op": ">=",
      "defined_out": [
        "pendingRewards#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "tmp%4#0"
      ]
    },
    "1500": {
      "error": "Insufficient reward pool",
      "op": "assert // Insufficient reward pool",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0"
      ]
    },
    "1501": {
      "op": "dig 1",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#0 (copy)"
      ]
    },
    "1503": {
      "op": "intc_3 // 24",
      "defined_out": [
        "24",
        "pendingRewards#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#0 (copy)"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#0 (copy)",
        "24"
      ]
    },
    "1504": {
      "op": "extract_uint64",
      "defined_out": [
        "pendingRewards#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "tmp%6#0"
      ]
    },
    "1505": {
      "op": "dig 1",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "tmp%6#0",
        "pendingRewards#0 (copy)"
      ]
    },
    "1507": {
      "op": "+",
      "defined_out": [
        "pendingRewards#0",
        "senderAddress#0",
        "stakeInfo#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "to_encode%0#0"
      ]
    },
    "1508": {
      "op": "itob",
      "defined_out": [
        "pendingRewards#0",
        "senderAddress#0",
        "stakeInfo#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "pendingRewards#0",
        "val_as_bytes%0#0"
      ]
    },
    "1509": {
      "op": "uncover 2",
      "stack_out": [
        "senderAddress#0",
        "pendingRewards#0",
        "val_as_bytes%0#0",
        "stakeInfo#0"
      ]
    },
    "1511": {
      "op": "swap",
      "stack_out": [
        "senderAddress#0",
        "pendingRewards#0",
        "stakeInfo#0",
        "val_as_bytes%0#0"
      ]
    },
    "1512": {
      "op": "replace2 24",
      "stack_out": [
        "senderAddress#0",
        "pendingRewards#0",
        "stakeInfo#0"
      ]
    },
    "1514": {
      "op": "dup",
      "stack_out": [
        "senderAddress#0",
        "pendingRewards#0",
        "stakeInfo#0",
        "stakeInfo#0 (copy)"
      ]
    },
    "1515": {
      "op": "intc_0 // 0",
      "stack_out": [
        "senderAddress#0",
        "pendingRewards#0",
        "stakeInfo#0",
        "stakeInfo#0 (copy)",
        "0"
      ]
    },
    "1516": {
      "op": "extract_uint64",
      "defined_out": [
        "pendingRewards#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "pendingRewards#0",
        "stakeInfo#0",
        "tmp%8#0"
      ]
    },
    "1517": {
      "op": "intc_0 // 0",
      "stack_out": [
        "senderAddress#0",
        "pendingRewards#0",
        "stakeInfo#0",
        "tmp%8#0",
        "0"
      ]
    },
    "1518": {
      "op": "bytec 4 // \"accumulatedRewardsPerShare\"",
      "defined_out": [
        "\"accumulatedRewardsPerShare\"",
        "0",
        "pendingRewards#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "pendingRewards#0",
        "stakeInfo#0",
        "tmp%8#0",
        "0",
        "\"accumulatedRewardsPerShare\""
      ]
    },
    "1520": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "pendingRewards#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "pendingRewards#0",
        "stakeInfo#0",
        "tmp%8#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1521": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "senderAddress#0",
        "pendingRewards#0",
        "stakeInfo#0",
        "tmp%8#0",
        "maybe_value%1#0"
      ]
    },
    "1522": {
      "op": "*",
      "defined_out": [
        "pendingRewards#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "pendingRewards#0",
        "stakeInfo#0",
        "tmp%9#0"
      ]
    },
    "1523": {
      "op": "intc_0 // 0",
      "stack_out": [
        "senderAddress#0",
        "pendingRewards#0",
        "stakeInfo#0",
        "tmp%9#0",
        "0"
      ]
    },
    "1524": {
      "op": "bytec 5 // \"precision\"",
      "defined_out": [
        "\"precision\"",
        "0",
        "pendingRewards#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "pendingRewards#0",
        "stakeInfo#0",
        "tmp%9#0",
        "0",
        "\"precision\""
      ]
    },
    "1526": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "pendingRewards#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "pendingRewards#0",
        "stakeInfo#0",
        "tmp%9#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1527": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "senderAddress#0",
        "pendingRewards#0",
        "stakeInfo#0",
        "tmp%9#0",
        "maybe_value%2#0"
      ]
    },
    "1528": {
      "op": "/",
      "defined_out": [
        "pendingRewards#0",
        "senderAddress#0",
        "stakeInfo#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "pendingRewards#0",
        "stakeInfo#0",
        "to_encode%1#0"
      ]
    },
    "1529": {
      "op": "itob",
      "defined_out": [
        "pendingRewards#0",
        "senderAddress#0",
        "stakeInfo#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "pendingRewards#0",
        "stakeInfo#0",
        "val_as_bytes%1#0"
      ]
    },
    "1530": {
      "op": "replace2 32",
      "stack_out": [
        "senderAddress#0",
        "pendingRewards#0",
        "stakeInfo#0"
      ]
    },
    "1532": {
      "op": "dig 2",
      "stack_out": [
        "senderAddress#0",
        "pendingRewards#0",
        "stakeInfo#0",
        "senderAddress#0 (copy)"
      ]
    },
    "1534": {
      "op": "swap",
      "stack_out": [
        "senderAddress#0",
        "pendingRewards#0",
        "senderAddress#0 (copy)",
        "stakeInfo#0"
      ]
    },
    "1535": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.storeUserStakeInfo",
      "op": "callsub storeUserStakeInfo",
      "stack_out": [
        "senderAddress#0",
        "pendingRewards#0",
        "stakeInfo#0"
      ]
    },
    "1538": {
      "op": "pop",
      "stack_out": [
        "senderAddress#0",
        "pendingRewards#0"
      ]
    },
    "1539": {
      "op": "intc_0 // 0",
      "stack_out": [
        "senderAddress#0",
        "pendingRewards#0",
        "0"
      ]
    },
    "1540": {
      "op": "bytec_0 // \"rewardPool\"",
      "stack_out": [
        "senderAddress#0",
        "pendingRewards#0",
        "0",
        "\"rewardPool\""
      ]
    },
    "1541": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "pendingRewards#0",
        "senderAddress#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "pendingRewards#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1542": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "senderAddress#0",
        "pendingRewards#0",
        "maybe_value%3#0"
      ]
    },
    "1543": {
      "op": "dig 1",
      "stack_out": [
        "senderAddress#0",
        "pendingRewards#0",
        "maybe_value%3#0",
        "pendingRewards#0 (copy)"
      ]
    },
    "1545": {
      "op": "-",
      "defined_out": [
        "new_state_value%0#0",
        "pendingRewards#0",
        "senderAddress#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "pendingRewards#0",
        "new_state_value%0#0"
      ]
    },
    "1546": {
      "op": "bytec_0 // \"rewardPool\"",
      "stack_out": [
        "senderAddress#0",
        "pendingRewards#0",
        "new_state_value%0#0",
        "\"rewardPool\""
      ]
    },
    "1547": {
      "op": "swap",
      "stack_out": [
        "senderAddress#0",
        "pendingRewards#0",
        "\"rewardPool\"",
        "new_state_value%0#0"
      ]
    },
    "1548": {
      "op": "app_global_put",
      "stack_out": [
        "senderAddress#0",
        "pendingRewards#0"
      ]
    },
    "1549": {
      "op": "intc_0 // 0",
      "stack_out": [
        "senderAddress#0",
        "pendingRewards#0",
        "0"
      ]
    },
    "1550": {
      "op": "bytec_1 // \"asset\"",
      "defined_out": [
        "\"asset\"",
        "0",
        "pendingRewards#0",
        "senderAddress#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "pendingRewards#0",
        "0",
        "\"asset\""
      ]
    },
    "1551": {
      "op": "app_global_get_ex",
      "defined_out": [
        "asset#0",
        "maybe_exists%4#0",
        "pendingRewards#0",
        "senderAddress#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "pendingRewards#0",
        "asset#0",
        "maybe_exists%4#0"
      ]
    },
    "1552": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "senderAddress#0",
        "pendingRewards#0",
        "asset#0"
      ]
    },
    "1553": {
      "op": "itxn_begin"
    },
    "1554": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "senderAddress#0",
        "pendingRewards#0"
      ]
    },
    "1556": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "senderAddress#0"
      ]
    },
    "1558": {
      "op": "itxn_field AssetReceiver",
      "stack_out": []
    },
    "1560": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "4"
      ]
    },
    "1561": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1563": {
      "op": "intc 4 // 1000",
      "defined_out": [
        "1000"
      ],
      "stack_out": [
        "1000"
      ]
    },
    "1565": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1567": {
      "op": "itxn_submit"
    },
    "1568": {
      "retsub": true,
      "op": "retsub"
    },
    "1569": {
      "subroutine": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.addRewards",
      "params": {},
      "block": "addRewards",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1570": {
      "op": "bytec_3 // \"adminAddress\"",
      "defined_out": [
        "\"adminAddress\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"adminAddress\""
      ]
    },
    "1571": {
      "op": "app_global_get_ex",
      "defined_out": [
        "adminAddr#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "maybe_exists%0#0"
      ]
    },
    "1572": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "adminAddr#0"
      ]
    },
    "1573": {
      "op": "txn Sender",
      "defined_out": [
        "adminAddr#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "tmp%0#0"
      ]
    },
    "1575": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1576": {
      "error": "Only admin can add rewards",
      "op": "assert // Only admin can add rewards",
      "stack_out": []
    },
    "1577": {
      "op": "global GroupSize",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "1579": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "2"
      ]
    },
    "1581": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "1582": {
      "error": "Expected 2 txns in group",
      "op": "assert // Expected 2 txns in group",
      "stack_out": []
    },
    "1583": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "1584": {
      "op": "bytec_1 // \"asset\"",
      "defined_out": [
        "\"asset\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"asset\""
      ]
    },
    "1585": {
      "op": "app_global_get_ex",
      "defined_out": [
        "asset#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "asset#0",
        "maybe_exists%1#0"
      ]
    },
    "1586": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "asset#0"
      ]
    },
    "1587": {
      "op": "intc_0 // 0",
      "stack_out": [
        "asset#0",
        "0"
      ]
    },
    "1588": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "asset#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "asset#0",
        "gtxn_type%0#0"
      ]
    },
    "1590": {
      "op": "dup",
      "defined_out": [
        "asset#0",
        "gtxn_type%0#0",
        "gtxn_type%0#0 (copy)"
      ],
      "stack_out": [
        "asset#0",
        "gtxn_type%0#0",
        "gtxn_type%0#0 (copy)"
      ]
    },
    "1591": {
      "op": "intc_2 // axfer",
      "defined_out": [
        "asset#0",
        "axfer",
        "gtxn_type%0#0",
        "gtxn_type%0#0 (copy)"
      ],
      "stack_out": [
        "asset#0",
        "gtxn_type%0#0",
        "gtxn_type%0#0 (copy)",
        "axfer"
      ]
    },
    "1592": {
      "op": "==",
      "defined_out": [
        "asset#0",
        "gtxn_type%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "asset#0",
        "gtxn_type%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "1593": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "asset#0",
        "gtxn_type%0#0"
      ]
    },
    "1594": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4",
        "asset#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "asset#0",
        "gtxn_type%0#0",
        "4"
      ]
    },
    "1595": {
      "op": "==",
      "defined_out": [
        "asset#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "asset#0",
        "tmp%5#0"
      ]
    },
    "1596": {
      "error": "Transaction 0 must be asset transfer",
      "op": "assert // Transaction 0 must be asset transfer",
      "stack_out": [
        "asset#0"
      ]
    },
    "1597": {
      "op": "intc_0 // 0",
      "stack_out": [
        "asset#0",
        "0"
      ]
    },
    "1598": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "asset#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "asset#0",
        "tmp%6#0"
      ]
    },
    "1600": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "asset#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "asset#0",
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "1602": {
      "op": "==",
      "defined_out": [
        "asset#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "asset#0",
        "tmp%8#0"
      ]
    },
    "1603": {
      "error": "Asset transfer must be to contract",
      "op": "assert // Asset transfer must be to contract",
      "stack_out": [
        "asset#0"
      ]
    },
    "1604": {
      "op": "intc_0 // 0",
      "stack_out": [
        "asset#0",
        "0"
      ]
    },
    "1605": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "asset#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "asset#0",
        "tmp%9#0"
      ]
    },
    "1607": {
      "op": "dup",
      "defined_out": [
        "asset#0",
        "tmp%9#0",
        "tmp%9#0 (copy)"
      ],
      "stack_out": [
        "asset#0",
        "tmp%9#0",
        "tmp%9#0 (copy)"
      ]
    },
    "1608": {
      "error": "Must provide non-zero rewards",
      "op": "assert // Must provide non-zero rewards",
      "stack_out": [
        "asset#0",
        "tmp%9#0"
      ]
    },
    "1609": {
      "op": "intc_0 // 0",
      "stack_out": [
        "asset#0",
        "tmp%9#0",
        "0"
      ]
    },
    "1610": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "asset#0",
        "tmp%11#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "asset#0",
        "tmp%9#0",
        "tmp%11#0"
      ]
    },
    "1612": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%9#0",
        "tmp%11#0",
        "asset#0"
      ]
    },
    "1614": {
      "op": "==",
      "defined_out": [
        "tmp%12#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "tmp%12#0"
      ]
    },
    "1615": {
      "error": "Incorrect asset ID",
      "op": "assert // Incorrect asset ID",
      "stack_out": [
        "tmp%9#0"
      ]
    },
    "1616": {
      "op": "intc_0 // 0",
      "stack_out": [
        "tmp%9#0",
        "0"
      ]
    },
    "1617": {
      "op": "bytec_0 // \"rewardPool\"",
      "defined_out": [
        "\"rewardPool\"",
        "0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "0",
        "\"rewardPool\""
      ]
    },
    "1618": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%2#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1619": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "tmp%9#0",
        "maybe_value%2#0"
      ]
    },
    "1620": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "1621": {
      "op": "bytec_0 // \"rewardPool\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"rewardPool\""
      ]
    },
    "1622": {
      "op": "swap",
      "stack_out": [
        "\"rewardPool\"",
        "new_state_value%0#0"
      ]
    },
    "1623": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1624": {
      "retsub": true,
      "op": "retsub"
    },
    "1625": {
      "subroutine": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.getCurrentAPY",
      "params": {},
      "block": "getCurrentAPY",
      "stack_in": [],
      "op": "proto 0 1"
    },
    "1628": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1629": {
      "op": "bytec_2 // \"totalStaked\"",
      "defined_out": [
        "\"totalStaked\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"totalStaked\""
      ]
    },
    "1630": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "totalStaked#0"
      ],
      "stack_out": [
        "totalStaked#0",
        "maybe_exists%0#0"
      ]
    },
    "1631": {
      "op": "swap",
      "stack_out": [
        "maybe_exists%0#0",
        "totalStaked#0"
      ]
    },
    "1632": {
      "op": "dup",
      "stack_out": [
        "maybe_exists%0#0",
        "totalStaked#0",
        "totalStaked#0 (copy)"
      ]
    },
    "1633": {
      "op": "uncover 2",
      "defined_out": [
        "maybe_exists%0#0",
        "totalStaked#0"
      ],
      "stack_out": [
        "totalStaked#0",
        "totalStaked#0",
        "maybe_exists%0#0"
      ]
    },
    "1635": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "totalStaked#0",
        "totalStaked#0"
      ]
    },
    "1636": {
      "op": "bnz getCurrentAPY_after_if_else@2",
      "stack_out": [
        "totalStaked#0"
      ]
    },
    "1639": {
      "op": "intc_0 // 0",
      "stack_out": [
        "totalStaked#0",
        "0"
      ]
    },
    "1640": {
      "op": "swap"
    },
    "1641": {
      "retsub": true,
      "op": "retsub"
    },
    "1642": {
      "block": "getCurrentAPY_after_if_else@2",
      "stack_in": [
        "totalStaked#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "totalStaked#0",
        "0"
      ]
    },
    "1643": {
      "op": "bytec 8 // \"weeklyRewards\"",
      "defined_out": [
        "\"weeklyRewards\"",
        "0"
      ],
      "stack_out": [
        "totalStaked#0",
        "0",
        "\"weeklyRewards\""
      ]
    },
    "1645": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "totalStaked#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1646": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "totalStaked#0",
        "maybe_value%1#0"
      ]
    },
    "1647": {
      "op": "pushint 52 // 52",
      "defined_out": [
        "52",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "totalStaked#0",
        "maybe_value%1#0",
        "52"
      ]
    },
    "1649": {
      "op": "*",
      "defined_out": [
        "annualRewards#0"
      ],
      "stack_out": [
        "totalStaked#0",
        "annualRewards#0"
      ]
    },
    "1650": {
      "op": "pushint 10000 // 10000",
      "defined_out": [
        "10000",
        "annualRewards#0"
      ],
      "stack_out": [
        "totalStaked#0",
        "annualRewards#0",
        "10000"
      ]
    },
    "1653": {
      "op": "*",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "totalStaked#0",
        "tmp%1#0"
      ]
    },
    "1654": {
      "op": "frame_dig 0",
      "defined_out": [
        "tmp%1#0",
        "totalStaked#0"
      ],
      "stack_out": [
        "totalStaked#0",
        "tmp%1#0",
        "totalStaked#0"
      ]
    },
    "1656": {
      "op": "/",
      "defined_out": [
        "apy#0",
        "totalStaked#0"
      ],
      "stack_out": [
        "totalStaked#0",
        "apy#0"
      ]
    },
    "1657": {
      "op": "swap"
    },
    "1658": {
      "retsub": true,
      "op": "retsub"
    },
    "1659": {
      "subroutine": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.getPendingRewards",
      "params": {
        "userAddress#0": "bytes"
      },
      "block": "getPendingRewards",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1662": {
      "op": "frame_dig -1",
      "defined_out": [
        "userAddress#0 (copy)"
      ],
      "stack_out": [
        "userAddress#0 (copy)"
      ]
    },
    "1664": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.calculatePendingRewards",
      "op": "callsub calculatePendingRewards",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "1667": {
      "retsub": true,
      "op": "retsub"
    },
    "1668": {
      "subroutine": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.triggerRewardDistribution",
      "params": {},
      "block": "triggerRewardDistribution",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1669": {
      "op": "bytec_3 // \"adminAddress\"",
      "defined_out": [
        "\"adminAddress\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"adminAddress\""
      ]
    },
    "1670": {
      "op": "app_global_get_ex",
      "defined_out": [
        "adminAddr#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "maybe_exists%0#0"
      ]
    },
    "1671": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "adminAddr#0"
      ]
    },
    "1672": {
      "op": "txn Sender",
      "defined_out": [
        "adminAddr#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "tmp%0#0"
      ]
    },
    "1674": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1675": {
      "error": "Only admin can trigger distribution",
      "op": "assert // Only admin can trigger distribution",
      "stack_out": []
    },
    "1676": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.updateRewards",
      "op": "callsub updateRewards"
    },
    "1679": {
      "retsub": true,
      "op": "retsub"
    },
    "1680": {
      "subroutine": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.updateAdmin",
      "params": {
        "newAdminAddress#0": "bytes"
      },
      "block": "updateAdmin",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1683": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1684": {
      "op": "bytec_3 // \"adminAddress\"",
      "defined_out": [
        "\"adminAddress\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"adminAddress\""
      ]
    },
    "1685": {
      "op": "app_global_get_ex",
      "defined_out": [
        "adminAddr#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "maybe_exists%0#0"
      ]
    },
    "1686": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "adminAddr#0"
      ]
    },
    "1687": {
      "op": "txn Sender",
      "defined_out": [
        "adminAddr#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "tmp%0#0"
      ]
    },
    "1689": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1690": {
      "error": "Only admin can update admin",
      "op": "assert // Only admin can update admin",
      "stack_out": []
    },
    "1691": {
      "op": "bytec_3 // \"adminAddress\"",
      "stack_out": [
        "\"adminAddress\""
      ]
    },
    "1692": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"adminAddress\"",
        "newAdminAddress#0 (copy)"
      ],
      "stack_out": [
        "\"adminAddress\"",
        "newAdminAddress#0 (copy)"
      ]
    },
    "1694": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1695": {
      "retsub": true,
      "op": "retsub"
    },
    "1696": {
      "subroutine": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.getUserStats",
      "params": {
        "userAddress#0": "bytes"
      },
      "block": "getUserStats",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1699": {
      "op": "frame_dig -1",
      "defined_out": [
        "userAddress#0 (copy)"
      ],
      "stack_out": [
        "userAddress#0 (copy)"
      ]
    },
    "1701": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.getUserStakeInfo",
      "op": "callsub getUserStakeInfo",
      "defined_out": [
        "stakeInfo#0"
      ],
      "stack_out": [
        "stakeInfo#0"
      ]
    },
    "1704": {
      "op": "frame_dig -1",
      "stack_out": [
        "stakeInfo#0",
        "userAddress#0 (copy)"
      ]
    },
    "1706": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.calculatePendingRewards",
      "op": "callsub calculatePendingRewards",
      "defined_out": [
        "pendingRewards#0",
        "stakeInfo#0"
      ],
      "stack_out": [
        "stakeInfo#0",
        "pendingRewards#0"
      ]
    },
    "1709": {
      "op": "dig 1",
      "defined_out": [
        "pendingRewards#0",
        "stakeInfo#0",
        "stakeInfo#0 (copy)"
      ],
      "stack_out": [
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#0 (copy)"
      ]
    },
    "1711": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "pendingRewards#0",
        "stakeInfo#0",
        "stakeInfo#0 (copy)"
      ],
      "stack_out": [
        "stakeInfo#0",
        "pendingRewards#0",
        "stakeInfo#0 (copy)",
        "0"
      ]
    },
    "1712": {
      "op": "extract_uint64",
      "defined_out": [
        "pendingRewards#0",
        "stakeInfo#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "stakeInfo#0",
        "pendingRewards#0",
        "tmp%1#0"
      ]
    },
    "1713": {
      "op": "dig 2",
      "stack_out": [
        "stakeInfo#0",
        "pendingRewards#0",
        "tmp%1#0",
        "stakeInfo#0 (copy)"
      ]
    },
    "1715": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "pendingRewards#0",
        "stakeInfo#0",
        "stakeInfo#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "stakeInfo#0",
        "pendingRewards#0",
        "tmp%1#0",
        "stakeInfo#0 (copy)",
        "8"
      ]
    },
    "1717": {
      "op": "extract_uint64",
      "defined_out": [
        "pendingRewards#0",
        "stakeInfo#0",
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "stakeInfo#0",
        "pendingRewards#0",
        "tmp%1#0",
        "tmp%3#0"
      ]
    },
    "1718": {
      "op": "dig 3",
      "stack_out": [
        "stakeInfo#0",
        "pendingRewards#0",
        "tmp%1#0",
        "tmp%3#0",
        "stakeInfo#0 (copy)"
      ]
    },
    "1720": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "pendingRewards#0",
        "stakeInfo#0",
        "stakeInfo#0 (copy)",
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "stakeInfo#0",
        "pendingRewards#0",
        "tmp%1#0",
        "tmp%3#0",
        "stakeInfo#0 (copy)",
        "16"
      ]
    },
    "1722": {
      "op": "extract_uint64",
      "defined_out": [
        "pendingRewards#0",
        "stakeInfo#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "stakeInfo#0",
        "pendingRewards#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0"
      ]
    },
    "1723": {
      "op": "dig 4",
      "stack_out": [
        "stakeInfo#0",
        "pendingRewards#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "stakeInfo#0 (copy)"
      ]
    },
    "1725": {
      "op": "intc_3 // 24",
      "defined_out": [
        "24",
        "pendingRewards#0",
        "stakeInfo#0",
        "stakeInfo#0 (copy)",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "stakeInfo#0",
        "pendingRewards#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "stakeInfo#0 (copy)",
        "24"
      ]
    },
    "1726": {
      "op": "extract_uint64",
      "defined_out": [
        "pendingRewards#0",
        "stakeInfo#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "stakeInfo#0",
        "pendingRewards#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ]
    },
    "1727": {
      "op": "uncover 5",
      "stack_out": [
        "pendingRewards#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "stakeInfo#0"
      ]
    },
    "1729": {
      "op": "pushint 32 // 32",
      "defined_out": [
        "32",
        "pendingRewards#0",
        "stakeInfo#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "stakeInfo#0",
        "32"
      ]
    },
    "1731": {
      "op": "extract_uint64",
      "defined_out": [
        "pendingRewards#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ]
    },
    "1732": {
      "op": "uncover 4",
      "stack_out": [
        "pendingRewards#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "tmp%1#0"
      ]
    },
    "1734": {
      "op": "itob",
      "defined_out": [
        "array%sub_item%0#1",
        "pendingRewards#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "array%sub_item%0#1"
      ]
    },
    "1735": {
      "op": "uncover 4",
      "stack_out": [
        "pendingRewards#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "array%sub_item%0#1",
        "tmp%3#0"
      ]
    },
    "1737": {
      "op": "itob",
      "defined_out": [
        "array%sub_item%0#1",
        "array%sub_item%1#1",
        "pendingRewards#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "array%sub_item%0#1",
        "array%sub_item%1#1"
      ]
    },
    "1738": {
      "op": "concat",
      "defined_out": [
        "array%data%1#1",
        "pendingRewards#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "tmp%5#0",
        "tmp%7#0",
        "tmp%9#0",
        "array%data%1#1"
      ]
    },
    "1739": {
      "op": "uncover 3",
      "stack_out": [
        "pendingRewards#0",
        "tmp%7#0",
        "tmp%9#0",
        "array%data%1#1",
        "tmp%5#0"
      ]
    },
    "1741": {
      "op": "itob",
      "defined_out": [
        "array%data%1#1",
        "array%sub_item%2#1",
        "pendingRewards#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "tmp%7#0",
        "tmp%9#0",
        "array%data%1#1",
        "array%sub_item%2#1"
      ]
    },
    "1742": {
      "op": "concat",
      "defined_out": [
        "array%data%2#1",
        "pendingRewards#0",
        "tmp%7#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "tmp%7#0",
        "tmp%9#0",
        "array%data%2#1"
      ]
    },
    "1743": {
      "op": "uncover 2",
      "stack_out": [
        "pendingRewards#0",
        "tmp%9#0",
        "array%data%2#1",
        "tmp%7#0"
      ]
    },
    "1745": {
      "op": "itob",
      "defined_out": [
        "array%data%2#1",
        "array%sub_item%3#1",
        "pendingRewards#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "tmp%9#0",
        "array%data%2#1",
        "array%sub_item%3#1"
      ]
    },
    "1746": {
      "op": "concat",
      "defined_out": [
        "array%data%3#1",
        "pendingRewards#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "pendingRewards#0",
        "tmp%9#0",
        "array%data%3#1"
      ]
    },
    "1747": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%9#0",
        "array%data%3#1",
        "pendingRewards#0"
      ]
    },
    "1749": {
      "op": "itob",
      "defined_out": [
        "array%data%3#1",
        "array%sub_item%4#1",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "array%data%3#1",
        "array%sub_item%4#1"
      ]
    },
    "1750": {
      "op": "concat",
      "defined_out": [
        "array%data%4#1",
        "tmp%9#0"
      ],
      "stack_out": [
        "tmp%9#0",
        "array%data%4#1"
      ]
    },
    "1751": {
      "op": "swap",
      "stack_out": [
        "array%data%4#1",
        "tmp%9#0"
      ]
    },
    "1752": {
      "op": "itob",
      "defined_out": [
        "array%data%4#1",
        "array%sub_item%5#1"
      ],
      "stack_out": [
        "array%data%4#1",
        "array%sub_item%5#1"
      ]
    },
    "1753": {
      "op": "concat",
      "defined_out": [
        "array%data%5#1"
      ],
      "stack_out": [
        "array%data%5#1"
      ]
    },
    "1754": {
      "op": "dup",
      "defined_out": [
        "array%data%5#1",
        "array%data%5#1 (copy)"
      ],
      "stack_out": [
        "array%data%5#1",
        "array%data%5#1 (copy)"
      ]
    },
    "1755": {
      "op": "len",
      "defined_out": [
        "array%data%5#1",
        "byte_len%0#0"
      ],
      "stack_out": [
        "array%data%5#1",
        "byte_len%0#0"
      ]
    },
    "1756": {
      "op": "pushint 8 // 8",
      "stack_out": [
        "array%data%5#1",
        "byte_len%0#0",
        "8"
      ]
    },
    "1758": {
      "op": "/",
      "defined_out": [
        "array%data%5#1",
        "len_%0#0"
      ],
      "stack_out": [
        "array%data%5#1",
        "len_%0#0"
      ]
    },
    "1759": {
      "op": "itob",
      "defined_out": [
        "array%data%5#1",
        "as_bytes%0#0"
      ],
      "stack_out": [
        "array%data%5#1",
        "as_bytes%0#0"
      ]
    },
    "1760": {
      "op": "extract 6 2",
      "defined_out": [
        "array%data%5#1",
        "len_16_bit%0#0"
      ],
      "stack_out": [
        "array%data%5#1",
        "len_16_bit%0#0"
      ]
    },
    "1763": {
      "op": "swap",
      "stack_out": [
        "len_16_bit%0#0",
        "array%data%5#1"
      ]
    },
    "1764": {
      "op": "concat",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "1765": {
      "retsub": true,
      "op": "retsub"
    },
    "1766": {
      "subroutine": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.getContractStats",
      "params": {},
      "block": "getContractStats",
      "stack_in": [],
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.getCurrentAPY",
      "op": "callsub getCurrentAPY",
      "defined_out": [
        "currentAPY#0"
      ],
      "stack_out": [
        "currentAPY#0"
      ]
    },
    "1769": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "currentAPY#0"
      ],
      "stack_out": [
        "currentAPY#0",
        "0"
      ]
    },
    "1770": {
      "op": "bytec_1 // \"asset\"",
      "defined_out": [
        "\"asset\"",
        "0",
        "currentAPY#0"
      ],
      "stack_out": [
        "currentAPY#0",
        "0",
        "\"asset\""
      ]
    },
    "1771": {
      "op": "app_global_get_ex",
      "defined_out": [
        "currentAPY#0",
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "currentAPY#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1772": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "currentAPY#0",
        "maybe_value%0#0"
      ]
    },
    "1773": {
      "op": "intc_0 // 0",
      "stack_out": [
        "currentAPY#0",
        "maybe_value%0#0",
        "0"
      ]
    },
    "1774": {
      "op": "bytec_2 // \"totalStaked\"",
      "defined_out": [
        "\"totalStaked\"",
        "0",
        "currentAPY#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "currentAPY#0",
        "maybe_value%0#0",
        "0",
        "\"totalStaked\""
      ]
    },
    "1775": {
      "op": "app_global_get_ex",
      "defined_out": [
        "currentAPY#0",
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "currentAPY#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1776": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "currentAPY#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "1777": {
      "op": "intc_0 // 0",
      "stack_out": [
        "currentAPY#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "0"
      ]
    },
    "1778": {
      "op": "bytec 6 // \"lastRewardTime\"",
      "defined_out": [
        "\"lastRewardTime\"",
        "0",
        "currentAPY#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "currentAPY#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "0",
        "\"lastRewardTime\""
      ]
    },
    "1780": {
      "op": "app_global_get_ex",
      "defined_out": [
        "currentAPY#0",
        "maybe_exists%2#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "currentAPY#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1781": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "currentAPY#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ]
    },
    "1782": {
      "op": "intc_0 // 0",
      "stack_out": [
        "currentAPY#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "0"
      ]
    },
    "1783": {
      "op": "bytec 9 // \"rewardPeriod\"",
      "defined_out": [
        "\"rewardPeriod\"",
        "0",
        "currentAPY#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "currentAPY#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "0",
        "\"rewardPeriod\""
      ]
    },
    "1785": {
      "op": "app_global_get_ex",
      "defined_out": [
        "currentAPY#0",
        "maybe_exists%3#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "currentAPY#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1786": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "currentAPY#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ]
    },
    "1787": {
      "op": "intc_0 // 0",
      "stack_out": [
        "currentAPY#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "0"
      ]
    },
    "1788": {
      "op": "bytec 7 // \"minimumStake\"",
      "defined_out": [
        "\"minimumStake\"",
        "0",
        "currentAPY#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "currentAPY#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "0",
        "\"minimumStake\""
      ]
    },
    "1790": {
      "op": "app_global_get_ex",
      "defined_out": [
        "currentAPY#0",
        "maybe_exists%4#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "currentAPY#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "1791": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "currentAPY#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0"
      ]
    },
    "1792": {
      "op": "intc_0 // 0",
      "stack_out": [
        "currentAPY#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "0"
      ]
    },
    "1793": {
      "op": "bytec_0 // \"rewardPool\"",
      "defined_out": [
        "\"rewardPool\"",
        "0",
        "currentAPY#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "currentAPY#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "0",
        "\"rewardPool\""
      ]
    },
    "1794": {
      "op": "app_global_get_ex",
      "defined_out": [
        "currentAPY#0",
        "maybe_exists%5#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "currentAPY#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "1795": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "currentAPY#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0"
      ]
    },
    "1796": {
      "op": "intc_0 // 0",
      "stack_out": [
        "currentAPY#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "0"
      ]
    },
    "1797": {
      "op": "bytec 4 // \"accumulatedRewardsPerShare\"",
      "defined_out": [
        "\"accumulatedRewardsPerShare\"",
        "0",
        "currentAPY#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "currentAPY#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "0",
        "\"accumulatedRewardsPerShare\""
      ]
    },
    "1799": {
      "op": "app_global_get_ex",
      "defined_out": [
        "currentAPY#0",
        "maybe_exists%6#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "currentAPY#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_exists%6#0"
      ]
    },
    "1800": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "currentAPY#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0"
      ]
    },
    "1801": {
      "op": "uncover 6",
      "stack_out": [
        "currentAPY#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "maybe_value%0#0"
      ]
    },
    "1803": {
      "op": "itob",
      "defined_out": [
        "array%sub_item%0#1",
        "currentAPY#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "currentAPY#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "array%sub_item%0#1"
      ]
    },
    "1804": {
      "op": "uncover 6",
      "stack_out": [
        "currentAPY#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "array%sub_item%0#1",
        "maybe_value%1#0"
      ]
    },
    "1806": {
      "op": "itob",
      "defined_out": [
        "array%sub_item%0#1",
        "array%sub_item%1#1",
        "currentAPY#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "currentAPY#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "array%sub_item%0#1",
        "array%sub_item%1#1"
      ]
    },
    "1807": {
      "op": "concat",
      "defined_out": [
        "array%data%1#1",
        "currentAPY#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "currentAPY#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "array%data%1#1"
      ]
    },
    "1808": {
      "op": "uncover 6",
      "stack_out": [
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "array%data%1#1",
        "currentAPY#0"
      ]
    },
    "1810": {
      "op": "itob",
      "defined_out": [
        "array%data%1#1",
        "array%sub_item%2#1",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "array%data%1#1",
        "array%sub_item%2#1"
      ]
    },
    "1811": {
      "op": "concat",
      "defined_out": [
        "array%data%2#1",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "array%data%2#1"
      ]
    },
    "1812": {
      "op": "uncover 5",
      "stack_out": [
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "array%data%2#1",
        "maybe_value%2#0"
      ]
    },
    "1814": {
      "op": "itob",
      "defined_out": [
        "array%data%2#1",
        "array%sub_item%3#1",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "array%data%2#1",
        "array%sub_item%3#1"
      ]
    },
    "1815": {
      "op": "concat",
      "defined_out": [
        "array%data%3#1",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "array%data%3#1"
      ]
    },
    "1816": {
      "op": "uncover 4",
      "stack_out": [
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "array%data%3#1",
        "maybe_value%3#0"
      ]
    },
    "1818": {
      "op": "itob",
      "defined_out": [
        "array%data%3#1",
        "array%sub_item%4#1",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "array%data%3#1",
        "array%sub_item%4#1"
      ]
    },
    "1819": {
      "op": "concat",
      "defined_out": [
        "array%data%4#1",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%6#0",
        "array%data%4#1"
      ]
    },
    "1820": {
      "op": "uncover 3",
      "stack_out": [
        "maybe_value%5#0",
        "maybe_value%6#0",
        "array%data%4#1",
        "maybe_value%4#0"
      ]
    },
    "1822": {
      "op": "itob",
      "defined_out": [
        "array%data%4#1",
        "array%sub_item%5#1",
        "maybe_value%5#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "maybe_value%5#0",
        "maybe_value%6#0",
        "array%data%4#1",
        "array%sub_item%5#1"
      ]
    },
    "1823": {
      "op": "concat",
      "defined_out": [
        "array%data%5#1",
        "maybe_value%5#0",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "maybe_value%5#0",
        "maybe_value%6#0",
        "array%data%5#1"
      ]
    },
    "1824": {
      "op": "uncover 2",
      "stack_out": [
        "maybe_value%6#0",
        "array%data%5#1",
        "maybe_value%5#0"
      ]
    },
    "1826": {
      "op": "itob",
      "defined_out": [
        "array%data%5#1",
        "array%sub_item%6#1",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "maybe_value%6#0",
        "array%data%5#1",
        "array%sub_item%6#1"
      ]
    },
    "1827": {
      "op": "concat",
      "defined_out": [
        "array%data%6#1",
        "maybe_value%6#0"
      ],
      "stack_out": [
        "maybe_value%6#0",
        "array%data%6#1"
      ]
    },
    "1828": {
      "op": "swap",
      "stack_out": [
        "array%data%6#1",
        "maybe_value%6#0"
      ]
    },
    "1829": {
      "op": "itob",
      "defined_out": [
        "array%data%6#1",
        "array%sub_item%7#1"
      ],
      "stack_out": [
        "array%data%6#1",
        "array%sub_item%7#1"
      ]
    },
    "1830": {
      "op": "concat",
      "defined_out": [
        "array%data%7#1"
      ],
      "stack_out": [
        "array%data%7#1"
      ]
    },
    "1831": {
      "op": "dup",
      "defined_out": [
        "array%data%7#1",
        "array%data%7#1 (copy)"
      ],
      "stack_out": [
        "array%data%7#1",
        "array%data%7#1 (copy)"
      ]
    },
    "1832": {
      "op": "len",
      "defined_out": [
        "array%data%7#1",
        "byte_len%0#0"
      ],
      "stack_out": [
        "array%data%7#1",
        "byte_len%0#0"
      ]
    },
    "1833": {
      "op": "pushint 8 // 8",
      "defined_out": [
        "8",
        "array%data%7#1",
        "byte_len%0#0"
      ],
      "stack_out": [
        "array%data%7#1",
        "byte_len%0#0",
        "8"
      ]
    },
    "1835": {
      "op": "/",
      "defined_out": [
        "array%data%7#1",
        "len_%0#0"
      ],
      "stack_out": [
        "array%data%7#1",
        "len_%0#0"
      ]
    },
    "1836": {
      "op": "itob",
      "defined_out": [
        "array%data%7#1",
        "as_bytes%0#0"
      ],
      "stack_out": [
        "array%data%7#1",
        "as_bytes%0#0"
      ]
    },
    "1837": {
      "op": "extract 6 2",
      "defined_out": [
        "array%data%7#1",
        "len_16_bit%0#0"
      ],
      "stack_out": [
        "array%data%7#1",
        "len_16_bit%0#0"
      ]
    },
    "1840": {
      "op": "swap",
      "stack_out": [
        "len_16_bit%0#0",
        "array%data%7#1"
      ]
    },
    "1841": {
      "op": "concat",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "1842": {
      "retsub": true,
      "op": "retsub"
    },
    "1843": {
      "subroutine": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.emergencyWithdrawRewards",
      "params": {
        "amount#0": "uint64"
      },
      "block": "emergencyWithdrawRewards",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1846": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1847": {
      "op": "bytec_3 // \"adminAddress\"",
      "defined_out": [
        "\"adminAddress\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"adminAddress\""
      ]
    },
    "1848": {
      "op": "app_global_get_ex",
      "defined_out": [
        "adminAddr#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "maybe_exists%0#0"
      ]
    },
    "1849": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "adminAddr#0"
      ]
    },
    "1850": {
      "op": "txn Sender",
      "defined_out": [
        "adminAddr#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "tmp%0#0"
      ]
    },
    "1852": {
      "op": "dig 1",
      "defined_out": [
        "adminAddr#0",
        "adminAddr#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "tmp%0#0",
        "adminAddr#0 (copy)"
      ]
    },
    "1854": {
      "op": "==",
      "defined_out": [
        "adminAddr#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "tmp%1#0"
      ]
    },
    "1855": {
      "error": "Only admin can emergency withdraw",
      "op": "assert // Only admin can emergency withdraw",
      "stack_out": [
        "adminAddr#0"
      ]
    },
    "1856": {
      "op": "intc_0 // 0",
      "stack_out": [
        "adminAddr#0",
        "0"
      ]
    },
    "1857": {
      "op": "bytec_0 // \"rewardPool\"",
      "defined_out": [
        "\"rewardPool\"",
        "0",
        "adminAddr#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "0",
        "\"rewardPool\""
      ]
    },
    "1858": {
      "op": "app_global_get_ex",
      "defined_out": [
        "adminAddr#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1859": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "adminAddr#0",
        "maybe_value%1#0"
      ]
    },
    "1860": {
      "op": "frame_dig -1",
      "defined_out": [
        "adminAddr#0",
        "amount#0 (copy)",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "maybe_value%1#0",
        "amount#0 (copy)"
      ]
    },
    "1862": {
      "op": ">=",
      "defined_out": [
        "adminAddr#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "tmp%2#0"
      ]
    },
    "1863": {
      "error": "Insufficient reward pool",
      "op": "assert // Insufficient reward pool",
      "stack_out": [
        "adminAddr#0"
      ]
    },
    "1864": {
      "op": "intc_0 // 0",
      "stack_out": [
        "adminAddr#0",
        "0"
      ]
    },
    "1865": {
      "op": "bytec_0 // \"rewardPool\"",
      "stack_out": [
        "adminAddr#0",
        "0",
        "\"rewardPool\""
      ]
    },
    "1866": {
      "op": "app_global_get_ex",
      "defined_out": [
        "adminAddr#0",
        "maybe_exists%2#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1867": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "adminAddr#0",
        "maybe_value%2#0"
      ]
    },
    "1868": {
      "op": "frame_dig -1",
      "stack_out": [
        "adminAddr#0",
        "maybe_value%2#0",
        "amount#0 (copy)"
      ]
    },
    "1870": {
      "op": "-",
      "defined_out": [
        "adminAddr#0",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "new_state_value%0#0"
      ]
    },
    "1871": {
      "op": "bytec_0 // \"rewardPool\"",
      "stack_out": [
        "adminAddr#0",
        "new_state_value%0#0",
        "\"rewardPool\""
      ]
    },
    "1872": {
      "op": "swap",
      "stack_out": [
        "adminAddr#0",
        "\"rewardPool\"",
        "new_state_value%0#0"
      ]
    },
    "1873": {
      "op": "app_global_put",
      "stack_out": [
        "adminAddr#0"
      ]
    },
    "1874": {
      "op": "intc_0 // 0",
      "stack_out": [
        "adminAddr#0",
        "0"
      ]
    },
    "1875": {
      "op": "bytec_1 // \"asset\"",
      "defined_out": [
        "\"asset\"",
        "0",
        "adminAddr#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "0",
        "\"asset\""
      ]
    },
    "1876": {
      "op": "app_global_get_ex",
      "defined_out": [
        "adminAddr#0",
        "asset#0",
        "maybe_exists%3#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "asset#0",
        "maybe_exists%3#0"
      ]
    },
    "1877": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "adminAddr#0",
        "asset#0"
      ]
    },
    "1878": {
      "op": "itxn_begin"
    },
    "1879": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "adminAddr#0"
      ]
    },
    "1881": {
      "op": "frame_dig -1",
      "stack_out": [
        "adminAddr#0",
        "amount#0 (copy)"
      ]
    },
    "1883": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "adminAddr#0"
      ]
    },
    "1885": {
      "op": "itxn_field AssetReceiver",
      "stack_out": []
    },
    "1887": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "4"
      ]
    },
    "1888": {
      "op": "itxn_field TypeEnum",
      "stack_out": []
    },
    "1890": {
      "op": "intc 4 // 1000",
      "defined_out": [
        "1000"
      ],
      "stack_out": [
        "1000"
      ]
    },
    "1892": {
      "op": "itxn_field Fee",
      "stack_out": []
    },
    "1894": {
      "op": "itxn_submit"
    },
    "1895": {
      "retsub": true,
      "op": "retsub"
    },
    "1896": {
      "subroutine": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.deleteUserBox",
      "params": {
        "userAddress#0": "bytes"
      },
      "block": "deleteUserBox",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1899": {
      "op": "intc_0 // 0",
      "stack_out": [
        "userBox#0"
      ]
    },
    "1900": {
      "op": "dup",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "userBox#0",
        "0"
      ]
    },
    "1901": {
      "op": "bytec_3 // \"adminAddress\"",
      "defined_out": [
        "\"adminAddress\"",
        "0"
      ],
      "stack_out": [
        "userBox#0",
        "0",
        "\"adminAddress\""
      ]
    },
    "1902": {
      "op": "app_global_get_ex",
      "defined_out": [
        "adminAddr#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "maybe_exists%0#0"
      ]
    },
    "1903": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "userBox#0",
        "adminAddr#0"
      ]
    },
    "1904": {
      "op": "txn Sender",
      "defined_out": [
        "adminAddr#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "tmp%0#0"
      ]
    },
    "1906": {
      "op": "frame_dig -1",
      "defined_out": [
        "adminAddr#0",
        "tmp%0#0",
        "userAddress#0 (copy)"
      ],
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "tmp%0#0",
        "userAddress#0 (copy)"
      ]
    },
    "1908": {
      "op": "==",
      "defined_out": [
        "adminAddr#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "tmp%1#0"
      ]
    },
    "1909": {
      "op": "bnz deleteUserBox_bool_true@2",
      "stack_out": [
        "userBox#0",
        "adminAddr#0"
      ]
    },
    "1912": {
      "op": "txn Sender",
      "defined_out": [
        "adminAddr#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "tmp%2#0"
      ]
    },
    "1914": {
      "op": "frame_dig 1",
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "tmp%2#0",
        "adminAddr#0"
      ]
    },
    "1916": {
      "op": "==",
      "defined_out": [
        "adminAddr#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "tmp%3#0"
      ]
    },
    "1917": {
      "op": "bz deleteUserBox_bool_false@3",
      "stack_out": [
        "userBox#0",
        "adminAddr#0"
      ]
    },
    "1920": {
      "block": "deleteUserBox_bool_true@2",
      "stack_in": [
        "userBox#0",
        "adminAddr#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "or_result%0#0"
      ]
    },
    "1921": {
      "block": "deleteUserBox_bool_merge@4",
      "stack_in": [
        "userBox#0",
        "adminAddr#0",
        "or_result%0#0"
      ],
      "error": "Only box owner or admin can delete box",
      "op": "assert // Only box owner or admin can delete box",
      "defined_out": [],
      "stack_out": [
        "userBox#0",
        "adminAddr#0"
      ]
    },
    "1922": {
      "op": "frame_dig -1",
      "defined_out": [
        "userAddress#0 (copy)"
      ],
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "userAddress#0 (copy)"
      ]
    },
    "1924": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.getUserStakeInfo",
      "op": "callsub getUserStakeInfo",
      "defined_out": [
        "stakeInfo#0"
      ],
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "stakeInfo#0"
      ]
    },
    "1927": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "stakeInfo#0"
      ],
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "stakeInfo#0",
        "0"
      ]
    },
    "1928": {
      "op": "extract_uint64",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "tmp%5#0"
      ]
    },
    "1929": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "tmp%6#0"
      ]
    },
    "1930": {
      "error": "User still has active stake",
      "op": "assert // User still has active stake",
      "stack_out": [
        "userBox#0",
        "adminAddr#0"
      ]
    },
    "1931": {
      "op": "bytec 11 // \"stakers\"",
      "defined_out": [
        "\"stakers\""
      ],
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "\"stakers\""
      ]
    },
    "1933": {
      "op": "frame_dig -1",
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "\"stakers\"",
        "userAddress#0 (copy)"
      ]
    },
    "1935": {
      "op": "concat",
      "defined_out": [
        "userBox#0"
      ],
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "userBox#0"
      ]
    },
    "1936": {
      "op": "dup",
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "userBox#0",
        "userBox#0"
      ]
    },
    "1937": {
      "op": "frame_bury 0",
      "defined_out": [
        "userBox#0"
      ],
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "userBox#0"
      ]
    },
    "1939": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "userBox#0"
      ],
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1940": {
      "op": "bury 1",
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "maybe_exists%1#0"
      ]
    },
    "1942": {
      "op": "bz deleteUserBox_after_if_else@6",
      "stack_out": [
        "userBox#0",
        "adminAddr#0"
      ]
    },
    "1945": {
      "op": "frame_dig 0",
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "userBox#0"
      ]
    },
    "1947": {
      "op": "box_del",
      "defined_out": [
        "userBox#0",
        "{box_del}"
      ],
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "{box_del}"
      ]
    },
    "1948": {
      "op": "pop",
      "stack_out": [
        "userBox#0",
        "adminAddr#0"
      ]
    },
    "1949": {
      "block": "deleteUserBox_after_if_else@6",
      "stack_in": [
        "userBox#0",
        "adminAddr#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "1950": {
      "block": "deleteUserBox_bool_false@3",
      "stack_in": [
        "userBox#0",
        "adminAddr#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "or_result%0#0"
      ]
    },
    "1951": {
      "op": "b deleteUserBox_bool_merge@4"
    },
    "1954": {
      "subroutine": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.updateWeeklyRewards",
      "params": {
        "newWeeklyRewards#0": "uint64"
      },
      "block": "updateWeeklyRewards",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1957": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1958": {
      "op": "bytec_3 // \"adminAddress\"",
      "defined_out": [
        "\"adminAddress\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"adminAddress\""
      ]
    },
    "1959": {
      "op": "app_global_get_ex",
      "defined_out": [
        "adminAddr#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "maybe_exists%0#0"
      ]
    },
    "1960": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "adminAddr#0"
      ]
    },
    "1961": {
      "op": "txn Sender",
      "defined_out": [
        "adminAddr#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "tmp%0#0"
      ]
    },
    "1963": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1964": {
      "error": "Only admin can update weekly rewards",
      "op": "assert // Only admin can update weekly rewards",
      "stack_out": []
    },
    "1965": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.updateRewards",
      "op": "callsub updateRewards"
    },
    "1968": {
      "op": "bytec 8 // \"weeklyRewards\"",
      "defined_out": [
        "\"weeklyRewards\""
      ],
      "stack_out": [
        "\"weeklyRewards\""
      ]
    },
    "1970": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"weeklyRewards\"",
        "newWeeklyRewards#0 (copy)"
      ],
      "stack_out": [
        "\"weeklyRewards\"",
        "newWeeklyRewards#0 (copy)"
      ]
    },
    "1972": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1973": {
      "retsub": true,
      "op": "retsub"
    },
    "1974": {
      "subroutine": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.updateRewardPeriod",
      "params": {
        "newRewardPeriod#0": "uint64"
      },
      "block": "updateRewardPeriod",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1977": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1978": {
      "op": "bytec_3 // \"adminAddress\"",
      "defined_out": [
        "\"adminAddress\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"adminAddress\""
      ]
    },
    "1979": {
      "op": "app_global_get_ex",
      "defined_out": [
        "adminAddr#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "maybe_exists%0#0"
      ]
    },
    "1980": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "adminAddr#0"
      ]
    },
    "1981": {
      "op": "txn Sender",
      "defined_out": [
        "adminAddr#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "tmp%0#0"
      ]
    },
    "1983": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1984": {
      "error": "Only admin can update reward period",
      "op": "assert // Only admin can update reward period",
      "stack_out": []
    },
    "1985": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.updateRewards",
      "op": "callsub updateRewards"
    },
    "1988": {
      "op": "bytec 9 // \"rewardPeriod\"",
      "defined_out": [
        "\"rewardPeriod\""
      ],
      "stack_out": [
        "\"rewardPeriod\""
      ]
    },
    "1990": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"rewardPeriod\"",
        "newRewardPeriod#0 (copy)"
      ],
      "stack_out": [
        "\"rewardPeriod\"",
        "newRewardPeriod#0 (copy)"
      ]
    },
    "1992": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1993": {
      "retsub": true,
      "op": "retsub"
    }
  }
}