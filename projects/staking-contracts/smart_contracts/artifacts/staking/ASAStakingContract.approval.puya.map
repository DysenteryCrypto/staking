{
  "version": 3,
  "sources": [
    "/home/justin/projects/dod_staking/staking/projects/staking-contracts/smart_contracts/staking/contract.algo.ts"
  ],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6CS;AAA2C;AAAlD;AACO;AAAoD;;AAA3D;AACO;AAAkD;AAAzD;AACO;;AAAqD;AAA5D;AACO;AAA2D;AAAlE;AACO;;AAAgE;AAAvE;AACO;;AAAmD;AAA1D;AARF;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AAkWG;;AAAA;AAAA;AAAA;;AAAA;AAlWH;;;AAAA;AAAA;;AAkWG;;;AAAA;;AAlBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAjBA;;AAAA;AAAA;AAAA;;AAAA;AA/TH;;;AAAA;AAAA;;AA+TG;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAbA;;AAAA;AAAA;AAAA;;AAAA;AAlTH;;;AAAA;AAAA;;AAkTG;;;AAAA;;AAdA;;AAAA;AAAA;AAAA;;AAAA;AApSH;;;AAAA;AAoSG;;;AAAA;;AA7BA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AA5CA;;AAAA;AAAA;AAAA;;AAAA;AA3NH;;;AAAA;AAAA;;AA2NG;;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAjCA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AA5CA;;AAAA;AAAA;AAAA;;AAAA;AA9IH;;;AAAA;AA8IG;;;AAAA;;AA3CA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AArBA;;AAAA;AAAA;AAAA;;AAAA;AAAA;;;AAAA;;AA3BA;;AAAA;AAAA;AAAA;;AAAA;AAnDH;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;AAAA;;;AAAA;AAAA;;;AAAA;AAAA;;;AAAA;AAmDG;;;AAAA;;AAPD;;AAAA;AAAA;AAAA;;AAAA;AA5CF;;;AAAA;AAAA;;AAAA;;;AA4CE;;;AAAA;AAAA;;AApBA;;AAAA;AAAA;AAAA;;AAAA;AAxBF;;;AAAA;AAAA;;AAwBE;;;AAAA;;AAAA;AAAA;AAAA;AAAA;;AARA;;AAAA;AAAA;AAAA;;AAAA;AAhBF;;;AAAA;AAAA;;AAgBE;;AAAA;AAAA;AAAA;AAAA;;AAhBF;;AAAA;;;AAAA;;AAAA;AAAA;AAAA;;AAwBE;;;AAd6D;;AAerD;;AAfqD;AAerD;AAGM;AAAA;;AAAZ;;;AAC0B;;AAAA;AAAA;AAExB;AAAA;AAEO;;;;;;;;;;;;;;;;;;;;;;;;;;AAAP;AAAA;AAWJ;;;AAlC6D;;AAAA;;AAAA;AAmC3D;;AAAA;;;;AAMF;;;AAjDO;AAAA;AAAA;AAAA;AA0DE;AAAP;AAGW;;AAAkB;;AAAtB;AAAP;AA7DK;AAgEL;;AAAA;AA/DK;AAgEL;;AAAA;AA/DK;AAgEoB;AAAzB;AA/DK;;AAgEL;;AAAA;AA/DK;AAgEoC;;AAAzC;AA/DK;;AAgEL;;AAAA;AA/DK;;AAgEL;;AAAA;;AAMF;;;AA3EO;AAAA;AAAA;AAAA;AA+EM;;AAAkB;;AAAtB;AAAA;;;AAA4C;;AAAJ;;AAAA;AAAxC;;;;AAAP;AAhFK;AAAA;AAAA;AAAA;AAoFL;AAE0B;;;;;AACT;;;;;AAHjB;;;AAAA;;;AAAA;;;;;;AAaF;;;AAjGO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqGL;AAGc;;AAAc;;AAArB;AAAP;AAGsC;AAAtB;;AAAA;AAAA;AAAA;AAAA;AACwB;AAAjC;AAAP;AADsC;AAEvB;;AAAyB;;AAAjC;AAAP;AAFsC;AAGvB;;AAAA;AAAA;;AAAf;AAHsC;AAIvB;;AAAR;AAAP;AAzGK;AAAA;;AAAA;AAAA;AAgHqB;;AAApB;AACY;;;AAAZ;AAGQ;AAAa;AAAA;AAA3B;;;AACS;;AAAA;;AAAA;AAAP;AAIwC;;AAAA;;AAAA;AAAA;;AAAA;AAAjB;AAAzB;;AAAA;AAAA;;AACkD;;AAAxB;AAA1B;;AAGA;;AAAA;AAAA;;;AAAA;AAjIK;AAAA;AAAA;AAAA;AAoIoB;AApIpB;AAoIL;AAAA;;AAMF;;;AAE4B;;AAApB;AACY;;;AAAZ;AAGW;AAAa;AAAA;;AAA9B;AACO;;AAAA;;AAAA;AAAP;AACA;;AAAA;AAII;;AAAA;AAAJ;;;AACQ;;AAAA;;AAAyB;AAnJ5B;AAAA;;AAAA;AAAA;AAqJI;AAAP;AAIwC;;AAAA;;AAAA;AAAjB;AAAzB;;AAAA;AAAA;;AAGA;;AAAA;AAAA;;;AAAA;AAhKK;AAAA;AAAA;AAAA;AAmKoB;;AAAA;AAnKpB;AAmKL;AAAA;AArKK;AAAA;AAAA;AAAA;AAyKL;AAEuB;;;;;;;;;;;AAFvB;;;AAKS;;;;;AALT;;AAxKK;AAAA;AAAA;AAAA;AA2LM;;AAAJ;AAAP;AAGc;;AAAc;;AAArB;AAAP;AA/LK;AAAA;AAAA;AAAA;AAmMiC;AAAtB;;AAAA;AAAA;AAAA;AAAA;AACwB;AAAjC;AAAP;AADsC;AAEvB;;AAAyB;;AAAjC;AAAP;AAFsC;AAGvB;;AAAf;AAHsC;AAIvB;;AAAR;AAAP;AAG2B;;AAtMtB;AAAA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AAwMiB;AAAf;;AAAA;AAAP;AAzMK;AA4ML;AAAA;;AASF;;;;;;AAtNO;AAAA;;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AA6NL;;;AACS;AAAP;;AAAA;AAKI;;AAAY;;;AAAZ;AAAA;;AAGQ;AAAa;AAAA;AAAA;;AAA3B;;;AACS;AAAP;;AAAA;AArOG;AAAA;AAAA;AAAA;AAgPa;;AANc;AAMd;AAAS;;;;AAAvB;AAAA;AAAJ;;;AACS;AAAP;;AAAA;AAMqC;;AAAM;;AAAN;AAAa;;;AAAd;AAAqB;;;AAAtB;AACb;;AAAA;AAA2C;;;AAA5C;AAEvB;;AAAA;AAS0B;;AACpB;AAAY;;;AAGY;AAAb;AAAa;AAA9B;AAAA;AAG6C;;AAA9B;;;AACf;AAAA;AAG0C;AAAA;;AAAA;AAAjB;AAAzB;;AAAA;AAAA;;AAG6E;AAAnB;;AAAmB;AAA7B;;AAAA;AAAjB;AAA/B;;AAGA;;AAAA;AAAA;;;AAAA;AAtRK;AAAA;AAAA;AAAA;AAyRoB;AAzRpB;AAyRL;AAAA;;AAOF;;;AAjSO;AAAA;AAAA;AAAA;AAqSM;;AAAJ;AAAP;AAnSK;;AAsSL;;AAAA;;AAOF;;;AA/SO;AAAA;AAAA;AAAA;AAmTM;;AAAJ;AAAP;AAnTK;AAsTL;;AAAA;;AAMF;;;AAGQ;;AAAY;;;AAEO;AAAb;AAAa;AACC;;AAAd;AAAc;AACK;;AAAnB;;AAAmB;AAC7B;;AAAA;;;AAHuB;;AAAA;AACC;;AAAA;AADD;AAEM;;AAAA;AAFN;AAGvB;AAAA;AAHuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAMzB;AAxUK;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AACA;AAAA;;AAAA;AAAA;AANA;;AAAA;AAEA;;AAAA;AAAA;AACA;;AAAA;AADA;AAEA;;AAAA;AAFA;AAGA;;AAAA;AAHA;AAIA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;AAAA;AAAA;AAuVL;AAOF;;;;AA/VO;AAAA;AAAA;AAAA;AAqWM;;AAAJ;;AAAA;AAAA;;;AAA+B;;AAAJ;;AAAA;AAA3B;;;;AAAP;AAIM;;AAAY;;;AACD;AAAa;AAAvB;AAAP;AAnW2D;;AAsWrD;;AAtWqD;AAsWrD;AAAA;;AACM;AAAA;;AAAZ;;;AACU;;AAAA;;;;",
  "op_pc_offset": 0,
  "pc_events": {
    "1": {
      "subroutine": "@algorandfoundation/algorand-typescript/arc4/index.d.ts::Contract.approvalProgram",
      "params": {},
      "block": "main",
      "stack_in": [],
      "op": "intcblock 0 1 4 8"
    },
    "7": {
      "op": "bytecblock \"totalStaked\" \"asset\" \"adminAddress\" \"lastDistributionTime\" \"aprBasisPoints\" \"minimumStake\" 0x151f7c75 \"distributionPeriodSeconds\" \"stakers\""
    },
    "128": {
      "op": "txn ApplicationID",
      "defined_out": [
        "reinterpret_bool%0#0"
      ],
      "stack_out": [
        "reinterpret_bool%0#0"
      ]
    },
    "130": {
      "op": "bnz main_after_if_else@2",
      "stack_out": []
    },
    "133": {
      "op": "bytec_1 // \"asset\"",
      "defined_out": [
        "\"asset\""
      ],
      "stack_out": [
        "\"asset\""
      ]
    },
    "134": {
      "op": "intc_0 // 0",
      "defined_out": [
        "\"asset\"",
        "0"
      ],
      "stack_out": [
        "\"asset\"",
        "0"
      ]
    },
    "135": {
      "op": "app_global_put",
      "stack_out": []
    },
    "136": {
      "op": "bytec_2 // \"adminAddress\"",
      "defined_out": [
        "\"adminAddress\""
      ],
      "stack_out": [
        "\"adminAddress\""
      ]
    },
    "137": {
      "op": "global ZeroAddress",
      "defined_out": [
        "\"adminAddress\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "\"adminAddress\"",
        "new_state_value%0#0"
      ]
    },
    "139": {
      "op": "app_global_put",
      "stack_out": []
    },
    "140": {
      "op": "bytec_0 // \"totalStaked\"",
      "defined_out": [
        "\"totalStaked\""
      ],
      "stack_out": [
        "\"totalStaked\""
      ]
    },
    "141": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"totalStaked\"",
        "0"
      ]
    },
    "142": {
      "op": "app_global_put",
      "stack_out": []
    },
    "143": {
      "op": "bytec 4 // \"aprBasisPoints\"",
      "defined_out": [
        "\"aprBasisPoints\""
      ],
      "stack_out": [
        "\"aprBasisPoints\""
      ]
    },
    "145": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"aprBasisPoints\"",
        "0"
      ]
    },
    "146": {
      "op": "app_global_put",
      "stack_out": []
    },
    "147": {
      "op": "bytec_3 // \"lastDistributionTime\"",
      "defined_out": [
        "\"lastDistributionTime\""
      ],
      "stack_out": [
        "\"lastDistributionTime\""
      ]
    },
    "148": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"lastDistributionTime\"",
        "0"
      ]
    },
    "149": {
      "op": "app_global_put",
      "stack_out": []
    },
    "150": {
      "op": "bytec 7 // \"distributionPeriodSeconds\"",
      "defined_out": [
        "\"distributionPeriodSeconds\""
      ],
      "stack_out": [
        "\"distributionPeriodSeconds\""
      ]
    },
    "152": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"distributionPeriodSeconds\"",
        "0"
      ]
    },
    "153": {
      "op": "app_global_put",
      "stack_out": []
    },
    "154": {
      "op": "bytec 5 // \"minimumStake\"",
      "defined_out": [
        "\"minimumStake\""
      ],
      "stack_out": [
        "\"minimumStake\""
      ]
    },
    "156": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"minimumStake\"",
        "0"
      ]
    },
    "157": {
      "op": "app_global_put",
      "stack_out": []
    },
    "158": {
      "block": "main_after_if_else@2",
      "stack_in": [],
      "op": "txn NumAppArgs",
      "defined_out": [
        "tmp%0#1"
      ],
      "stack_out": [
        "tmp%0#1"
      ]
    },
    "160": {
      "op": "bz main_bare_routing@22",
      "stack_out": []
    },
    "163": {
      "op": "pushbytess 0xa9b56b38 0x124ba026 0x83786954 0x667c5d30 0x9ffd3e53 0x0890bd58 0x21f1ddff 0xb0a93807 0x411cec23 0xa5ae6bd1 0x1e6612bd 0x82ab1ec4 0x15766b09 0xbfe31564 0xdc9a2a05 // method \"getUserBoxName(account)address\", method \"getUserStakeInfo(account)(uint64,uint64,uint64)\", method \"storeUserStakeInfo(account,(uint64,uint64,uint64))void\", method \"initialize(asset,account,uint64,uint64,uint64)void\", method \"optInToAsset()void\", method \"stake()void\", method \"withdraw(uint64)void\", method \"distributeRewards()void\", method \"calculateUserRewards(account)uint64\", method \"claimRewards()void\", method \"updateAPR(uint64)void\", method \"updateAdmin(account)void\", method \"getUserStats(account)uint64[]\", method \"getContractStats()uint64[]\", method \"deleteUserBox(account)void\"",
      "defined_out": [
        "Method(calculateUserRewards(account)uint64)",
        "Method(claimRewards()void)",
        "Method(deleteUserBox(account)void)",
        "Method(distributeRewards()void)",
        "Method(getContractStats()uint64[])",
        "Method(getUserBoxName(account)address)",
        "Method(getUserStakeInfo(account)(uint64,uint64,uint64))",
        "Method(getUserStats(account)uint64[])",
        "Method(initialize(asset,account,uint64,uint64,uint64)void)",
        "Method(optInToAsset()void)",
        "Method(stake()void)",
        "Method(storeUserStakeInfo(account,(uint64,uint64,uint64))void)",
        "Method(updateAPR(uint64)void)",
        "Method(updateAdmin(account)void)",
        "Method(withdraw(uint64)void)"
      ],
      "stack_out": [
        "Method(getUserBoxName(account)address)",
        "Method(getUserStakeInfo(account)(uint64,uint64,uint64))",
        "Method(storeUserStakeInfo(account,(uint64,uint64,uint64))void)",
        "Method(initialize(asset,account,uint64,uint64,uint64)void)",
        "Method(optInToAsset()void)",
        "Method(stake()void)",
        "Method(withdraw(uint64)void)",
        "Method(distributeRewards()void)",
        "Method(calculateUserRewards(account)uint64)",
        "Method(claimRewards()void)",
        "Method(updateAPR(uint64)void)",
        "Method(updateAdmin(account)void)",
        "Method(getUserStats(account)uint64[])",
        "Method(getContractStats()uint64[])",
        "Method(deleteUserBox(account)void)"
      ]
    },
    "240": {
      "op": "txna ApplicationArgs 0",
      "defined_out": [
        "Method(calculateUserRewards(account)uint64)",
        "Method(claimRewards()void)",
        "Method(deleteUserBox(account)void)",
        "Method(distributeRewards()void)",
        "Method(getContractStats()uint64[])",
        "Method(getUserBoxName(account)address)",
        "Method(getUserStakeInfo(account)(uint64,uint64,uint64))",
        "Method(getUserStats(account)uint64[])",
        "Method(initialize(asset,account,uint64,uint64,uint64)void)",
        "Method(optInToAsset()void)",
        "Method(stake()void)",
        "Method(storeUserStakeInfo(account,(uint64,uint64,uint64))void)",
        "Method(updateAPR(uint64)void)",
        "Method(updateAdmin(account)void)",
        "Method(withdraw(uint64)void)",
        "tmp%2#0"
      ],
      "stack_out": [
        "Method(getUserBoxName(account)address)",
        "Method(getUserStakeInfo(account)(uint64,uint64,uint64))",
        "Method(storeUserStakeInfo(account,(uint64,uint64,uint64))void)",
        "Method(initialize(asset,account,uint64,uint64,uint64)void)",
        "Method(optInToAsset()void)",
        "Method(stake()void)",
        "Method(withdraw(uint64)void)",
        "Method(distributeRewards()void)",
        "Method(calculateUserRewards(account)uint64)",
        "Method(claimRewards()void)",
        "Method(updateAPR(uint64)void)",
        "Method(updateAdmin(account)void)",
        "Method(getUserStats(account)uint64[])",
        "Method(getContractStats()uint64[])",
        "Method(deleteUserBox(account)void)",
        "tmp%2#0"
      ]
    },
    "243": {
      "op": "match main_getUserBoxName_route@5 main_getUserStakeInfo_route@6 main_storeUserStakeInfo_route@7 main_initialize_route@8 main_optInToAsset_route@9 main_stake_route@10 main_withdraw_route@11 main_distributeRewards_route@12 main_calculateUserRewards_route@13 main_claimRewards_route@14 main_updateAPR_route@15 main_updateAdmin_route@16 main_getUserStats_route@17 main_getContractStats_route@18 main_deleteUserBox_route@19",
      "stack_out": []
    },
    "275": {
      "block": "main_after_if_else@26",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "276": {
      "op": "return",
      "stack_out": []
    },
    "277": {
      "block": "main_deleteUserBox_route@19",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%89#0"
      ],
      "stack_out": [
        "tmp%89#0"
      ]
    },
    "279": {
      "op": "!",
      "defined_out": [
        "tmp%90#0"
      ],
      "stack_out": [
        "tmp%90#0"
      ]
    },
    "280": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "281": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%91#0"
      ],
      "stack_out": [
        "tmp%91#0"
      ]
    },
    "283": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "284": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%8#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%8#0"
      ]
    },
    "287": {
      "op": "btoi",
      "defined_out": [
        "tmp%93#0"
      ],
      "stack_out": [
        "tmp%93#0"
      ]
    },
    "288": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%94#0"
      ],
      "stack_out": [
        "tmp%94#0"
      ]
    },
    "290": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.deleteUserBox",
      "op": "callsub deleteUserBox",
      "stack_out": []
    },
    "293": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "294": {
      "op": "return",
      "stack_out": []
    },
    "295": {
      "block": "main_getContractStats_route@18",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%83#0"
      ],
      "stack_out": [
        "tmp%83#0"
      ]
    },
    "297": {
      "op": "!",
      "defined_out": [
        "tmp%84#0"
      ],
      "stack_out": [
        "tmp%84#0"
      ]
    },
    "298": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "299": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%85#0"
      ],
      "stack_out": [
        "tmp%85#0"
      ]
    },
    "301": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "302": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.getContractStats",
      "op": "callsub getContractStats",
      "defined_out": [
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%87#0"
      ]
    },
    "305": {
      "op": "bytec 6 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%87#0"
      ],
      "stack_out": [
        "tmp%87#0",
        "0x151f7c75"
      ]
    },
    "307": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%87#0"
      ]
    },
    "308": {
      "op": "concat",
      "defined_out": [
        "tmp%88#0"
      ],
      "stack_out": [
        "tmp%88#0"
      ]
    },
    "309": {
      "op": "log",
      "stack_out": []
    },
    "310": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "311": {
      "op": "return",
      "stack_out": []
    },
    "312": {
      "block": "main_getUserStats_route@17",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%75#0"
      ],
      "stack_out": [
        "tmp%75#0"
      ]
    },
    "314": {
      "op": "!",
      "defined_out": [
        "tmp%76#0"
      ],
      "stack_out": [
        "tmp%76#0"
      ]
    },
    "315": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "316": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%77#0"
      ],
      "stack_out": [
        "tmp%77#0"
      ]
    },
    "318": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "319": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%7#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%7#0"
      ]
    },
    "322": {
      "op": "btoi",
      "defined_out": [
        "tmp%79#0"
      ],
      "stack_out": [
        "tmp%79#0"
      ]
    },
    "323": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%80#0"
      ],
      "stack_out": [
        "tmp%80#0"
      ]
    },
    "325": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.getUserStats",
      "op": "callsub getUserStats",
      "defined_out": [
        "tmp%81#0"
      ],
      "stack_out": [
        "tmp%81#0"
      ]
    },
    "328": {
      "op": "bytec 6 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%81#0"
      ],
      "stack_out": [
        "tmp%81#0",
        "0x151f7c75"
      ]
    },
    "330": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%81#0"
      ]
    },
    "331": {
      "op": "concat",
      "defined_out": [
        "tmp%82#0"
      ],
      "stack_out": [
        "tmp%82#0"
      ]
    },
    "332": {
      "op": "log",
      "stack_out": []
    },
    "333": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "334": {
      "op": "return",
      "stack_out": []
    },
    "335": {
      "block": "main_updateAdmin_route@16",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%69#0"
      ],
      "stack_out": [
        "tmp%69#0"
      ]
    },
    "337": {
      "op": "!",
      "defined_out": [
        "tmp%70#0"
      ],
      "stack_out": [
        "tmp%70#0"
      ]
    },
    "338": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "339": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%71#0"
      ],
      "stack_out": [
        "tmp%71#0"
      ]
    },
    "341": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "342": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%6#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%6#0"
      ]
    },
    "345": {
      "op": "btoi",
      "defined_out": [
        "tmp%73#0"
      ],
      "stack_out": [
        "tmp%73#0"
      ]
    },
    "346": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%74#0"
      ],
      "stack_out": [
        "tmp%74#0"
      ]
    },
    "348": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.updateAdmin",
      "op": "callsub updateAdmin",
      "stack_out": []
    },
    "351": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "352": {
      "op": "return",
      "stack_out": []
    },
    "353": {
      "block": "main_updateAPR_route@15",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%64#0"
      ],
      "stack_out": [
        "tmp%64#0"
      ]
    },
    "355": {
      "op": "!",
      "defined_out": [
        "tmp%65#0"
      ],
      "stack_out": [
        "tmp%65#0"
      ]
    },
    "356": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "357": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%66#0"
      ],
      "stack_out": [
        "tmp%66#0"
      ]
    },
    "359": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "360": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%4#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%4#0"
      ]
    },
    "363": {
      "op": "btoi",
      "defined_out": [
        "tmp%68#0"
      ],
      "stack_out": [
        "tmp%68#0"
      ]
    },
    "364": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.updateAPR",
      "op": "callsub updateAPR",
      "stack_out": []
    },
    "367": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "368": {
      "op": "return",
      "stack_out": []
    },
    "369": {
      "block": "main_claimRewards_route@14",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%60#0"
      ],
      "stack_out": [
        "tmp%60#0"
      ]
    },
    "371": {
      "op": "!",
      "defined_out": [
        "tmp%61#0"
      ],
      "stack_out": [
        "tmp%61#0"
      ]
    },
    "372": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "373": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%62#0"
      ],
      "stack_out": [
        "tmp%62#0"
      ]
    },
    "375": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "376": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.claimRewards",
      "op": "callsub claimRewards"
    },
    "379": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "380": {
      "op": "return",
      "stack_out": []
    },
    "381": {
      "block": "main_calculateUserRewards_route@13",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%53#0"
      ],
      "stack_out": [
        "tmp%53#0"
      ]
    },
    "383": {
      "op": "!",
      "defined_out": [
        "tmp%54#0"
      ],
      "stack_out": [
        "tmp%54#0"
      ]
    },
    "384": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "385": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%55#0"
      ],
      "stack_out": [
        "tmp%55#0"
      ]
    },
    "387": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "388": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%5#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%5#0"
      ]
    },
    "391": {
      "op": "btoi",
      "defined_out": [
        "tmp%57#0"
      ],
      "stack_out": [
        "tmp%57#0"
      ]
    },
    "392": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%58#0"
      ],
      "stack_out": [
        "tmp%58#0"
      ]
    },
    "394": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.calculateUserRewards",
      "op": "callsub calculateUserRewards",
      "defined_out": [
        "to_encode%0#0"
      ],
      "stack_out": [
        "to_encode%0#0"
      ]
    },
    "397": {
      "op": "itob",
      "defined_out": [
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0"
      ]
    },
    "398": {
      "op": "bytec 6 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "val_as_bytes%0#0",
        "0x151f7c75"
      ]
    },
    "400": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "val_as_bytes%0#0"
      ]
    },
    "401": {
      "op": "concat",
      "defined_out": [
        "tmp%59#0"
      ],
      "stack_out": [
        "tmp%59#0"
      ]
    },
    "402": {
      "op": "log",
      "stack_out": []
    },
    "403": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "404": {
      "op": "return",
      "stack_out": []
    },
    "405": {
      "block": "main_distributeRewards_route@12",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%49#0"
      ],
      "stack_out": [
        "tmp%49#0"
      ]
    },
    "407": {
      "op": "!",
      "defined_out": [
        "tmp%50#0"
      ],
      "stack_out": [
        "tmp%50#0"
      ]
    },
    "408": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "409": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%51#0"
      ],
      "stack_out": [
        "tmp%51#0"
      ]
    },
    "411": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "412": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.distributeRewards",
      "op": "callsub distributeRewards"
    },
    "415": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "416": {
      "op": "return",
      "stack_out": []
    },
    "417": {
      "block": "main_withdraw_route@11",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%44#0"
      ],
      "stack_out": [
        "tmp%44#0"
      ]
    },
    "419": {
      "op": "!",
      "defined_out": [
        "tmp%45#0"
      ],
      "stack_out": [
        "tmp%45#0"
      ]
    },
    "420": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "421": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%46#0"
      ],
      "stack_out": [
        "tmp%46#0"
      ]
    },
    "423": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "424": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[8]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[8]%3#0"
      ]
    },
    "427": {
      "op": "btoi",
      "defined_out": [
        "tmp%48#0"
      ],
      "stack_out": [
        "tmp%48#0"
      ]
    },
    "428": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.withdraw",
      "op": "callsub withdraw",
      "stack_out": []
    },
    "431": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "432": {
      "op": "return",
      "stack_out": []
    },
    "433": {
      "block": "main_stake_route@10",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%40#0"
      ],
      "stack_out": [
        "tmp%40#0"
      ]
    },
    "435": {
      "op": "!",
      "defined_out": [
        "tmp%41#0"
      ],
      "stack_out": [
        "tmp%41#0"
      ]
    },
    "436": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "437": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%42#0"
      ],
      "stack_out": [
        "tmp%42#0"
      ]
    },
    "439": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "440": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.stake",
      "op": "callsub stake"
    },
    "443": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "444": {
      "op": "return",
      "stack_out": []
    },
    "445": {
      "block": "main_optInToAsset_route@9",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%36#0"
      ],
      "stack_out": [
        "tmp%36#0"
      ]
    },
    "447": {
      "op": "!",
      "defined_out": [
        "tmp%37#0"
      ],
      "stack_out": [
        "tmp%37#0"
      ]
    },
    "448": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "449": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%38#0"
      ],
      "stack_out": [
        "tmp%38#0"
      ]
    },
    "451": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "452": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.optInToAsset",
      "op": "callsub optInToAsset"
    },
    "455": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "456": {
      "op": "return",
      "stack_out": []
    },
    "457": {
      "block": "main_initialize_route@8",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%25#0"
      ],
      "stack_out": [
        "tmp%25#0"
      ]
    },
    "459": {
      "op": "!",
      "defined_out": [
        "tmp%26#0"
      ],
      "stack_out": [
        "tmp%26#0"
      ]
    },
    "460": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "461": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%27#0"
      ],
      "stack_out": [
        "tmp%27#0"
      ]
    },
    "463": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "464": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%3#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%3#0"
      ]
    },
    "467": {
      "op": "btoi",
      "defined_out": [
        "tmp%29#0"
      ],
      "stack_out": [
        "tmp%29#0"
      ]
    },
    "468": {
      "op": "txnas Assets",
      "defined_out": [
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0"
      ]
    },
    "470": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[1]%4#0",
        "tmp%30#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "reinterpret_bytes[1]%4#0"
      ]
    },
    "473": {
      "op": "btoi",
      "defined_out": [
        "tmp%30#0",
        "tmp%31#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "tmp%31#0"
      ]
    },
    "474": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%30#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "tmp%32#0"
      ]
    },
    "476": {
      "op": "txna ApplicationArgs 3",
      "defined_out": [
        "reinterpret_bytes[8]%0#0",
        "tmp%30#0",
        "tmp%32#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "tmp%32#0",
        "reinterpret_bytes[8]%0#0"
      ]
    },
    "479": {
      "op": "btoi",
      "defined_out": [
        "tmp%30#0",
        "tmp%32#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "tmp%32#0",
        "tmp%33#0"
      ]
    },
    "480": {
      "op": "txna ApplicationArgs 4",
      "defined_out": [
        "reinterpret_bytes[8]%1#0",
        "tmp%30#0",
        "tmp%32#0",
        "tmp%33#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "tmp%32#0",
        "tmp%33#0",
        "reinterpret_bytes[8]%1#0"
      ]
    },
    "483": {
      "op": "btoi",
      "defined_out": [
        "tmp%30#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0"
      ]
    },
    "484": {
      "op": "txna ApplicationArgs 5",
      "defined_out": [
        "reinterpret_bytes[8]%2#0",
        "tmp%30#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "reinterpret_bytes[8]%2#0"
      ]
    },
    "487": {
      "op": "btoi",
      "defined_out": [
        "tmp%30#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0"
      ],
      "stack_out": [
        "tmp%30#0",
        "tmp%32#0",
        "tmp%33#0",
        "tmp%34#0",
        "tmp%35#0"
      ]
    },
    "488": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.initialize",
      "op": "callsub initialize",
      "stack_out": []
    },
    "491": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "492": {
      "op": "return",
      "stack_out": []
    },
    "493": {
      "block": "main_storeUserStakeInfo_route@7",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%19#0"
      ],
      "stack_out": [
        "tmp%19#0"
      ]
    },
    "495": {
      "op": "!",
      "defined_out": [
        "tmp%20#0"
      ],
      "stack_out": [
        "tmp%20#0"
      ]
    },
    "496": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "497": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%21#0"
      ],
      "stack_out": [
        "tmp%21#0"
      ]
    },
    "499": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "500": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%2#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%2#0"
      ]
    },
    "503": {
      "op": "btoi",
      "defined_out": [
        "tmp%23#0"
      ],
      "stack_out": [
        "tmp%23#0"
      ]
    },
    "504": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0"
      ]
    },
    "506": {
      "op": "txna ApplicationArgs 2",
      "defined_out": [
        "reinterpret_bytes[24]%0#0",
        "tmp%24#0"
      ],
      "stack_out": [
        "tmp%24#0",
        "reinterpret_bytes[24]%0#0"
      ]
    },
    "509": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.storeUserStakeInfo",
      "op": "callsub storeUserStakeInfo",
      "defined_out": [
        "storeUserStakeInfo%0#0"
      ],
      "stack_out": [
        "storeUserStakeInfo%0#0"
      ]
    },
    "512": {
      "op": "pop",
      "stack_out": []
    },
    "513": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "514": {
      "op": "return",
      "stack_out": []
    },
    "515": {
      "block": "main_getUserStakeInfo_route@6",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%11#0"
      ],
      "stack_out": [
        "tmp%11#0"
      ]
    },
    "517": {
      "op": "!",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "518": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "519": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "tmp%13#0"
      ]
    },
    "521": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "522": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%1#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%1#0"
      ]
    },
    "525": {
      "op": "btoi",
      "defined_out": [
        "tmp%15#0"
      ],
      "stack_out": [
        "tmp%15#0"
      ]
    },
    "526": {
      "op": "txnas Accounts",
      "defined_out": [
        "tmp%16#0"
      ],
      "stack_out": [
        "tmp%16#0"
      ]
    },
    "528": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.getUserStakeInfo",
      "op": "callsub getUserStakeInfo",
      "defined_out": [
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0"
      ]
    },
    "531": {
      "op": "bytec 6 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "tmp%17#0"
      ],
      "stack_out": [
        "tmp%17#0",
        "0x151f7c75"
      ]
    },
    "533": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "tmp%17#0"
      ]
    },
    "534": {
      "op": "concat",
      "defined_out": [
        "tmp%18#0"
      ],
      "stack_out": [
        "tmp%18#0"
      ]
    },
    "535": {
      "op": "log",
      "stack_out": []
    },
    "536": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "537": {
      "op": "return",
      "stack_out": []
    },
    "538": {
      "block": "main_getUserBoxName_route@5",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "540": {
      "op": "!",
      "defined_out": [
        "tmp%4#0"
      ],
      "stack_out": [
        "tmp%4#0"
      ]
    },
    "541": {
      "error": "OnCompletion is not NoOp",
      "op": "assert // OnCompletion is not NoOp",
      "stack_out": []
    },
    "542": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%5#0"
      ]
    },
    "544": {
      "error": "can only call when not creating",
      "op": "assert // can only call when not creating",
      "stack_out": []
    },
    "545": {
      "op": "txna ApplicationArgs 1",
      "defined_out": [
        "reinterpret_bytes[1]%0#0"
      ],
      "stack_out": [
        "reinterpret_bytes[1]%0#0"
      ]
    },
    "548": {
      "op": "btoi",
      "defined_out": [
        "tmp%7#0"
      ],
      "stack_out": [
        "tmp%7#0"
      ]
    },
    "549": {
      "op": "txnas Accounts",
      "defined_out": [
        "userAddress#0"
      ],
      "stack_out": [
        "userAddress#0"
      ]
    },
    "551": {
      "op": "bytec 6 // 0x151f7c75",
      "defined_out": [
        "0x151f7c75",
        "userAddress#0"
      ],
      "stack_out": [
        "userAddress#0",
        "0x151f7c75"
      ]
    },
    "553": {
      "op": "swap",
      "stack_out": [
        "0x151f7c75",
        "userAddress#0"
      ]
    },
    "554": {
      "op": "concat",
      "defined_out": [
        "tmp%10#0"
      ],
      "stack_out": [
        "tmp%10#0"
      ]
    },
    "555": {
      "op": "log",
      "stack_out": []
    },
    "556": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "557": {
      "op": "return",
      "stack_out": []
    },
    "558": {
      "block": "main_bare_routing@22",
      "stack_in": [],
      "op": "txn OnCompletion",
      "defined_out": [
        "tmp%95#0"
      ],
      "stack_out": [
        "tmp%95#0"
      ]
    },
    "560": {
      "op": "bnz main_after_if_else@26",
      "stack_out": []
    },
    "563": {
      "op": "txn ApplicationID",
      "defined_out": [
        "tmp%96#0"
      ],
      "stack_out": [
        "tmp%96#0"
      ]
    },
    "565": {
      "op": "!",
      "defined_out": [
        "tmp%97#0"
      ],
      "stack_out": [
        "tmp%97#0"
      ]
    },
    "566": {
      "error": "can only call when creating",
      "op": "assert // can only call when creating",
      "stack_out": []
    },
    "567": {
      "op": "intc_1 // 1",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "568": {
      "op": "return",
      "stack_out": []
    },
    "569": {
      "subroutine": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.getUserStakeInfo",
      "params": {
        "userAddress#0": "bytes"
      },
      "block": "getUserStakeInfo",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "572": {
      "op": "bytec 8 // \"stakers\"",
      "defined_out": [
        "\"stakers\""
      ],
      "stack_out": [
        "\"stakers\""
      ]
    },
    "574": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"stakers\"",
        "userAddress#0 (copy)"
      ],
      "stack_out": [
        "\"stakers\"",
        "userAddress#0 (copy)"
      ]
    },
    "576": {
      "op": "concat",
      "defined_out": [
        "userBox#0"
      ],
      "stack_out": [
        "userBox#0"
      ]
    },
    "577": {
      "op": "dup",
      "defined_out": [
        "userBox#0"
      ],
      "stack_out": [
        "userBox#0",
        "userBox#0"
      ]
    },
    "578": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "userBox#0"
      ],
      "stack_out": [
        "userBox#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "579": {
      "op": "bury 1",
      "stack_out": [
        "userBox#0",
        "maybe_exists%0#0"
      ]
    },
    "581": {
      "op": "bz getUserStakeInfo_else_body@2",
      "stack_out": [
        "userBox#0"
      ]
    },
    "584": {
      "op": "frame_dig 0",
      "stack_out": [
        "userBox#0",
        "userBox#0"
      ]
    },
    "586": {
      "op": "box_get",
      "defined_out": [
        "boxData#0",
        "maybe_exists%1#0",
        "userBox#0"
      ],
      "stack_out": [
        "userBox#0",
        "boxData#0",
        "maybe_exists%1#0"
      ]
    },
    "587": {
      "error": "Box must have value",
      "op": "assert // Box must have value",
      "stack_out": [
        "userBox#0",
        "boxData#0"
      ]
    },
    "588": {
      "op": "swap"
    },
    "589": {
      "retsub": true,
      "op": "retsub"
    },
    "590": {
      "block": "getUserStakeInfo_else_body@2",
      "stack_in": [
        "userBox#0"
      ],
      "op": "pushbytes 0x000000000000000000000000000000000000000000000000",
      "defined_out": [
        "0x000000000000000000000000000000000000000000000000"
      ],
      "stack_out": [
        "userBox#0",
        "0x000000000000000000000000000000000000000000000000"
      ]
    },
    "616": {
      "op": "swap"
    },
    "617": {
      "retsub": true,
      "op": "retsub"
    },
    "618": {
      "subroutine": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.storeUserStakeInfo",
      "params": {
        "userAddress#0": "bytes",
        "stakeInfo#0": "bytes"
      },
      "block": "storeUserStakeInfo",
      "stack_in": [],
      "op": "proto 2 1"
    },
    "621": {
      "op": "bytec 8 // \"stakers\"",
      "defined_out": [
        "\"stakers\""
      ],
      "stack_out": [
        "\"stakers\""
      ]
    },
    "623": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"stakers\"",
        "userAddress#0 (copy)"
      ],
      "stack_out": [
        "\"stakers\"",
        "userAddress#0 (copy)"
      ]
    },
    "625": {
      "op": "concat",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "626": {
      "op": "frame_dig -1",
      "defined_out": [
        "stakeInfo#0 (copy)",
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0",
        "stakeInfo#0 (copy)"
      ]
    },
    "628": {
      "op": "box_put",
      "stack_out": []
    },
    "629": {
      "op": "frame_dig -1",
      "stack_out": [
        "stakeInfo#0 (copy)"
      ]
    },
    "631": {
      "retsub": true,
      "op": "retsub"
    },
    "632": {
      "subroutine": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.initialize",
      "params": {
        "asset#0": "uint64",
        "adminAddress#0": "bytes",
        "aprBasisPoints#0": "uint64",
        "distributionPeriodSeconds#0": "uint64",
        "minimumStake#0": "uint64"
      },
      "block": "initialize",
      "stack_in": [],
      "op": "proto 5 0"
    },
    "635": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "636": {
      "op": "bytec_1 // \"asset\"",
      "defined_out": [
        "\"asset\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"asset\""
      ]
    },
    "637": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "638": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "639": {
      "op": "!",
      "defined_out": [
        "tmp%0#0"
      ],
      "stack_out": [
        "tmp%0#0"
      ]
    },
    "640": {
      "error": "Already initialized",
      "op": "assert // Already initialized",
      "stack_out": []
    },
    "641": {
      "op": "txn Sender",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "643": {
      "op": "global CreatorAddress",
      "defined_out": [
        "tmp%1#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%2#0"
      ]
    },
    "645": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "646": {
      "error": "Only creator can initialize",
      "op": "assert // Only creator can initialize",
      "stack_out": []
    },
    "647": {
      "op": "bytec_1 // \"asset\"",
      "stack_out": [
        "\"asset\""
      ]
    },
    "648": {
      "op": "frame_dig -5",
      "defined_out": [
        "\"asset\"",
        "asset#0 (copy)"
      ],
      "stack_out": [
        "\"asset\"",
        "asset#0 (copy)"
      ]
    },
    "650": {
      "op": "app_global_put",
      "stack_out": []
    },
    "651": {
      "op": "bytec_2 // \"adminAddress\"",
      "defined_out": [
        "\"adminAddress\""
      ],
      "stack_out": [
        "\"adminAddress\""
      ]
    },
    "652": {
      "op": "frame_dig -4",
      "defined_out": [
        "\"adminAddress\"",
        "adminAddress#0 (copy)"
      ],
      "stack_out": [
        "\"adminAddress\"",
        "adminAddress#0 (copy)"
      ]
    },
    "654": {
      "op": "app_global_put",
      "stack_out": []
    },
    "655": {
      "op": "bytec_0 // \"totalStaked\"",
      "defined_out": [
        "\"totalStaked\""
      ],
      "stack_out": [
        "\"totalStaked\""
      ]
    },
    "656": {
      "op": "intc_0 // 0",
      "stack_out": [
        "\"totalStaked\"",
        "0"
      ]
    },
    "657": {
      "op": "app_global_put",
      "stack_out": []
    },
    "658": {
      "op": "bytec 4 // \"aprBasisPoints\"",
      "defined_out": [
        "\"aprBasisPoints\""
      ],
      "stack_out": [
        "\"aprBasisPoints\""
      ]
    },
    "660": {
      "op": "frame_dig -3",
      "defined_out": [
        "\"aprBasisPoints\"",
        "aprBasisPoints#0 (copy)"
      ],
      "stack_out": [
        "\"aprBasisPoints\"",
        "aprBasisPoints#0 (copy)"
      ]
    },
    "662": {
      "op": "app_global_put",
      "stack_out": []
    },
    "663": {
      "op": "bytec_3 // \"lastDistributionTime\"",
      "defined_out": [
        "\"lastDistributionTime\""
      ],
      "stack_out": [
        "\"lastDistributionTime\""
      ]
    },
    "664": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "\"lastDistributionTime\"",
        "new_state_value%0#0"
      ],
      "stack_out": [
        "\"lastDistributionTime\"",
        "new_state_value%0#0"
      ]
    },
    "666": {
      "op": "app_global_put",
      "stack_out": []
    },
    "667": {
      "op": "bytec 7 // \"distributionPeriodSeconds\"",
      "defined_out": [
        "\"distributionPeriodSeconds\""
      ],
      "stack_out": [
        "\"distributionPeriodSeconds\""
      ]
    },
    "669": {
      "op": "frame_dig -2",
      "defined_out": [
        "\"distributionPeriodSeconds\"",
        "distributionPeriodSeconds#0 (copy)"
      ],
      "stack_out": [
        "\"distributionPeriodSeconds\"",
        "distributionPeriodSeconds#0 (copy)"
      ]
    },
    "671": {
      "op": "app_global_put",
      "stack_out": []
    },
    "672": {
      "op": "bytec 5 // \"minimumStake\"",
      "defined_out": [
        "\"minimumStake\""
      ],
      "stack_out": [
        "\"minimumStake\""
      ]
    },
    "674": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"minimumStake\"",
        "minimumStake#0 (copy)"
      ],
      "stack_out": [
        "\"minimumStake\"",
        "minimumStake#0 (copy)"
      ]
    },
    "676": {
      "op": "app_global_put",
      "stack_out": []
    },
    "677": {
      "retsub": true,
      "op": "retsub"
    },
    "678": {
      "subroutine": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.optInToAsset",
      "params": {},
      "block": "optInToAsset",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "681": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "682": {
      "op": "bytec_2 // \"adminAddress\"",
      "defined_out": [
        "\"adminAddress\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"adminAddress\""
      ]
    },
    "683": {
      "op": "app_global_get_ex",
      "defined_out": [
        "adminAddr#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "maybe_exists%0#0"
      ]
    },
    "684": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "adminAddr#0"
      ]
    },
    "685": {
      "op": "txn Sender",
      "defined_out": [
        "adminAddr#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "tmp%0#0"
      ]
    },
    "687": {
      "op": "global CreatorAddress",
      "defined_out": [
        "adminAddr#0",
        "tmp%0#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "tmp%0#0",
        "tmp%1#0"
      ]
    },
    "689": {
      "op": "==",
      "defined_out": [
        "adminAddr#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "tmp%2#0"
      ]
    },
    "690": {
      "op": "bnz optInToAsset_bool_true@2",
      "stack_out": [
        "adminAddr#0"
      ]
    },
    "693": {
      "op": "txn Sender",
      "defined_out": [
        "adminAddr#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "tmp%3#0"
      ]
    },
    "695": {
      "op": "frame_dig 0",
      "stack_out": [
        "adminAddr#0",
        "tmp%3#0",
        "adminAddr#0"
      ]
    },
    "697": {
      "op": "==",
      "defined_out": [
        "adminAddr#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "tmp%4#0"
      ]
    },
    "698": {
      "op": "bz optInToAsset_bool_false@3",
      "stack_out": [
        "adminAddr#0"
      ]
    },
    "701": {
      "block": "optInToAsset_bool_true@2",
      "stack_in": [
        "adminAddr#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "or_result%0#0"
      ]
    },
    "702": {
      "block": "optInToAsset_bool_merge@4",
      "stack_in": [
        "adminAddr#0",
        "or_result%0#0"
      ],
      "error": "Only creator or admin can opt in",
      "op": "assert // Only creator or admin can opt in",
      "defined_out": [],
      "stack_out": [
        "adminAddr#0"
      ]
    },
    "703": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "adminAddr#0",
        "0"
      ]
    },
    "704": {
      "op": "bytec_1 // \"asset\"",
      "defined_out": [
        "\"asset\"",
        "0"
      ],
      "stack_out": [
        "adminAddr#0",
        "0",
        "\"asset\""
      ]
    },
    "705": {
      "op": "app_global_get_ex",
      "defined_out": [
        "asset#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "asset#0",
        "maybe_exists%1#0"
      ]
    },
    "706": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "adminAddr#0",
        "asset#0"
      ]
    },
    "707": {
      "op": "itxn_begin"
    },
    "708": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "asset#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "asset#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "710": {
      "op": "swap",
      "stack_out": [
        "adminAddr#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "asset#0"
      ]
    },
    "711": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "adminAddr#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "713": {
      "op": "intc_0 // 0",
      "stack_out": [
        "adminAddr#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "0"
      ]
    },
    "714": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "adminAddr#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "716": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "adminAddr#0"
      ]
    },
    "718": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4"
      ],
      "stack_out": [
        "adminAddr#0",
        "4"
      ]
    },
    "719": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "adminAddr#0"
      ]
    },
    "721": {
      "op": "intc_0 // 0",
      "stack_out": [
        "adminAddr#0",
        "0"
      ]
    },
    "722": {
      "op": "itxn_field Fee",
      "stack_out": [
        "adminAddr#0"
      ]
    },
    "724": {
      "op": "itxn_submit"
    },
    "725": {
      "retsub": true,
      "op": "retsub"
    },
    "726": {
      "block": "optInToAsset_bool_false@3",
      "stack_in": [
        "adminAddr#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "or_result%0#0"
      ]
    },
    "727": {
      "op": "b optInToAsset_bool_merge@4"
    },
    "730": {
      "subroutine": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.stake",
      "params": {},
      "block": "stake",
      "stack_in": [],
      "op": "proto 0 0"
    },
    "733": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "734": {
      "op": "bytec_1 // \"asset\"",
      "defined_out": [
        "\"asset\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"asset\""
      ]
    },
    "735": {
      "op": "app_global_get_ex",
      "defined_out": [
        "asset#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "asset#0",
        "maybe_exists%0#0"
      ]
    },
    "736": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "asset#0"
      ]
    },
    "737": {
      "op": "intc_0 // 0",
      "stack_out": [
        "asset#0",
        "0"
      ]
    },
    "738": {
      "op": "bytec_1 // \"asset\"",
      "stack_out": [
        "asset#0",
        "0",
        "\"asset\""
      ]
    },
    "739": {
      "op": "app_global_get_ex",
      "defined_out": [
        "asset#0",
        "maybe_exists%1#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "asset#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "740": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "asset#0",
        "maybe_value%1#0"
      ]
    },
    "741": {
      "error": "Contract not opted in to ASA",
      "op": "assert // Contract not opted in to ASA",
      "stack_out": [
        "asset#0"
      ]
    },
    "742": {
      "op": "global GroupSize",
      "defined_out": [
        "asset#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "asset#0",
        "tmp%1#0"
      ]
    },
    "744": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "asset#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "asset#0",
        "tmp%1#0",
        "2"
      ]
    },
    "746": {
      "op": "==",
      "defined_out": [
        "asset#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "asset#0",
        "tmp%2#0"
      ]
    },
    "747": {
      "error": "Expected 2 txns in group",
      "op": "assert // Expected 2 txns in group",
      "stack_out": [
        "asset#0"
      ]
    },
    "748": {
      "op": "intc_0 // 0",
      "stack_out": [
        "asset#0",
        "0"
      ]
    },
    "749": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "asset#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "asset#0",
        "gtxn_type%0#0"
      ]
    },
    "751": {
      "op": "dup",
      "defined_out": [
        "asset#0",
        "gtxn_type%0#0",
        "gtxn_type%0#0 (copy)"
      ],
      "stack_out": [
        "asset#0",
        "gtxn_type%0#0",
        "gtxn_type%0#0 (copy)"
      ]
    },
    "752": {
      "op": "intc_2 // axfer",
      "defined_out": [
        "asset#0",
        "axfer",
        "gtxn_type%0#0",
        "gtxn_type%0#0 (copy)"
      ],
      "stack_out": [
        "asset#0",
        "gtxn_type%0#0",
        "gtxn_type%0#0 (copy)",
        "axfer"
      ]
    },
    "753": {
      "op": "==",
      "defined_out": [
        "asset#0",
        "gtxn_type%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "asset#0",
        "gtxn_type%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "754": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "asset#0",
        "gtxn_type%0#0"
      ]
    },
    "755": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4",
        "asset#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "asset#0",
        "gtxn_type%0#0",
        "4"
      ]
    },
    "756": {
      "op": "==",
      "defined_out": [
        "asset#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "asset#0",
        "tmp%4#0"
      ]
    },
    "757": {
      "error": "Transaction 1 must be asset transfer",
      "op": "assert // Transaction 1 must be asset transfer",
      "stack_out": [
        "asset#0"
      ]
    },
    "758": {
      "op": "intc_0 // 0",
      "stack_out": [
        "asset#0",
        "0"
      ]
    },
    "759": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "asset#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "asset#0",
        "tmp%5#0"
      ]
    },
    "761": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "asset#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "asset#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "763": {
      "op": "==",
      "defined_out": [
        "asset#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "asset#0",
        "tmp%7#0"
      ]
    },
    "764": {
      "error": "Asset transfer must be to contract",
      "op": "assert // Asset transfer must be to contract",
      "stack_out": [
        "asset#0"
      ]
    },
    "765": {
      "op": "intc_0 // 0",
      "stack_out": [
        "asset#0",
        "0"
      ]
    },
    "766": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "asset#0",
        "stakeAmount#0"
      ],
      "stack_out": [
        "asset#0",
        "stakeAmount#0"
      ]
    },
    "768": {
      "op": "dup",
      "stack_out": [
        "asset#0",
        "stakeAmount#0",
        "stakeAmount#0"
      ]
    },
    "769": {
      "op": "cover 2",
      "defined_out": [
        "asset#0",
        "stakeAmount#0"
      ],
      "stack_out": [
        "stakeAmount#0",
        "asset#0",
        "stakeAmount#0"
      ]
    },
    "771": {
      "error": "Must stake non-zero amount",
      "op": "assert // Must stake non-zero amount",
      "stack_out": [
        "stakeAmount#0",
        "asset#0"
      ]
    },
    "772": {
      "op": "intc_0 // 0",
      "stack_out": [
        "stakeAmount#0",
        "asset#0",
        "0"
      ]
    },
    "773": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "asset#0",
        "stakeAmount#0",
        "tmp%10#0"
      ],
      "stack_out": [
        "stakeAmount#0",
        "asset#0",
        "tmp%10#0"
      ]
    },
    "775": {
      "op": "==",
      "defined_out": [
        "stakeAmount#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "stakeAmount#0",
        "tmp%11#0"
      ]
    },
    "776": {
      "error": "Incorrect asset ID",
      "op": "assert // Incorrect asset ID",
      "stack_out": [
        "stakeAmount#0"
      ]
    },
    "777": {
      "op": "intc_0 // 0",
      "stack_out": [
        "stakeAmount#0",
        "0"
      ]
    },
    "778": {
      "op": "bytec 5 // \"minimumStake\"",
      "defined_out": [
        "\"minimumStake\"",
        "0",
        "stakeAmount#0"
      ],
      "stack_out": [
        "stakeAmount#0",
        "0",
        "\"minimumStake\""
      ]
    },
    "780": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "minimumStake#0",
        "stakeAmount#0"
      ],
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "maybe_exists%2#0"
      ]
    },
    "781": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0"
      ]
    },
    "782": {
      "op": "txn Sender"
    },
    "784": {
      "op": "dup",
      "defined_out": [
        "minimumStake#0",
        "senderAddress#0",
        "stakeAmount#0"
      ],
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "senderAddress#0"
      ]
    },
    "785": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.getUserStakeInfo",
      "op": "callsub getUserStakeInfo",
      "defined_out": [
        "minimumStake#0",
        "senderAddress#0",
        "stakeAmount#0",
        "stakeInfo#0"
      ],
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0"
      ]
    },
    "788": {
      "op": "dup",
      "defined_out": [
        "minimumStake#0",
        "senderAddress#0",
        "stakeAmount#0",
        "stakeInfo#0"
      ],
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#0"
      ]
    },
    "789": {
      "op": "intc_0 // 0",
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#0",
        "0"
      ]
    },
    "790": {
      "op": "extract_uint64",
      "defined_out": [
        "minimumStake#0",
        "senderAddress#0",
        "stakeAmount#0",
        "stakeInfo#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0"
      ]
    },
    "791": {
      "op": "dup",
      "defined_out": [
        "minimumStake#0",
        "senderAddress#0",
        "stakeAmount#0",
        "stakeInfo#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "tmp%13#0"
      ]
    },
    "792": {
      "op": "bnz stake_after_if_else@2",
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0"
      ]
    },
    "795": {
      "op": "frame_dig 0",
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeAmount#0"
      ]
    },
    "797": {
      "op": "frame_dig 1",
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeAmount#0",
        "minimumStake#0"
      ]
    },
    "799": {
      "op": ">=",
      "defined_out": [
        "minimumStake#0",
        "senderAddress#0",
        "stakeAmount#0",
        "stakeInfo#0",
        "tmp%13#0",
        "tmp%15#0"
      ],
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "tmp%15#0"
      ]
    },
    "800": {
      "error": "Initial stake below minimum",
      "op": "assert // Initial stake below minimum",
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0"
      ]
    },
    "801": {
      "block": "stake_after_if_else@2",
      "stack_in": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0"
      ],
      "op": "frame_dig 4",
      "defined_out": [
        "tmp%13#0"
      ],
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "tmp%13#0"
      ]
    },
    "803": {
      "op": "frame_dig 0",
      "defined_out": [
        "stakeAmount#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "tmp%13#0",
        "stakeAmount#0"
      ]
    },
    "805": {
      "op": "dup",
      "defined_out": [
        "stakeAmount#0",
        "stakeAmount#0 (copy)",
        "tmp%13#0"
      ],
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "tmp%13#0",
        "stakeAmount#0 (copy)",
        "stakeAmount#0 (copy)"
      ]
    },
    "806": {
      "op": "cover 2",
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeAmount#0",
        "tmp%13#0",
        "stakeAmount#0 (copy)"
      ]
    },
    "808": {
      "op": "+",
      "defined_out": [
        "stakeAmount#0",
        "tmp%13#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeAmount#0",
        "to_encode%0#0"
      ]
    },
    "809": {
      "op": "itob",
      "defined_out": [
        "stakeAmount#0",
        "tmp%13#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeAmount#0",
        "val_as_bytes%0#0"
      ]
    },
    "810": {
      "op": "frame_dig 3",
      "defined_out": [
        "stakeAmount#0",
        "stakeInfo#0",
        "tmp%13#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeAmount#0",
        "val_as_bytes%0#0",
        "stakeInfo#0"
      ]
    },
    "812": {
      "op": "swap",
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeAmount#0",
        "stakeInfo#0",
        "val_as_bytes%0#0"
      ]
    },
    "813": {
      "op": "replace2 0",
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeAmount#0",
        "stakeInfo#0"
      ]
    },
    "815": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "stakeAmount#0",
        "stakeInfo#0",
        "tmp%13#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeAmount#0",
        "stakeInfo#0",
        "to_encode%1#0"
      ]
    },
    "817": {
      "op": "itob",
      "defined_out": [
        "stakeAmount#0",
        "stakeInfo#0",
        "tmp%13#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeAmount#0",
        "stakeInfo#0",
        "val_as_bytes%1#0"
      ]
    },
    "818": {
      "op": "replace2 8",
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeAmount#0",
        "stakeInfo#0"
      ]
    },
    "820": {
      "op": "frame_dig 2",
      "defined_out": [
        "senderAddress#0",
        "stakeAmount#0",
        "stakeInfo#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeAmount#0",
        "stakeInfo#0",
        "senderAddress#0"
      ]
    },
    "822": {
      "op": "swap",
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeAmount#0",
        "senderAddress#0",
        "stakeInfo#0"
      ]
    },
    "823": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.storeUserStakeInfo",
      "op": "callsub storeUserStakeInfo",
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeAmount#0",
        "stakeInfo#0"
      ]
    },
    "826": {
      "op": "pop",
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeAmount#0"
      ]
    },
    "827": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "senderAddress#0",
        "stakeAmount#0",
        "stakeInfo#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeAmount#0",
        "0"
      ]
    },
    "828": {
      "op": "bytec_0 // \"totalStaked\"",
      "defined_out": [
        "\"totalStaked\"",
        "0",
        "senderAddress#0",
        "stakeAmount#0",
        "stakeInfo#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeAmount#0",
        "0",
        "\"totalStaked\""
      ]
    },
    "829": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%3#0",
        "senderAddress#0",
        "stakeAmount#0",
        "stakeInfo#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeAmount#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "830": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "stakeAmount#0",
        "maybe_value%3#0"
      ]
    },
    "831": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0",
        "senderAddress#0",
        "stakeAmount#0",
        "stakeInfo#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "new_state_value%0#0"
      ]
    },
    "832": {
      "op": "bytec_0 // \"totalStaked\"",
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "new_state_value%0#0",
        "\"totalStaked\""
      ]
    },
    "833": {
      "op": "swap",
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0",
        "\"totalStaked\"",
        "new_state_value%0#0"
      ]
    },
    "834": {
      "op": "app_global_put",
      "stack_out": [
        "stakeAmount#0",
        "minimumStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%13#0"
      ]
    },
    "835": {
      "retsub": true,
      "op": "retsub"
    },
    "836": {
      "subroutine": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.withdraw",
      "params": {
        "amount#0": "uint64"
      },
      "block": "withdraw",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "839": {
      "op": "txn Sender"
    },
    "841": {
      "op": "dup",
      "defined_out": [
        "senderAddress#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "senderAddress#0"
      ]
    },
    "842": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.getUserStakeInfo",
      "op": "callsub getUserStakeInfo",
      "defined_out": [
        "senderAddress#0",
        "stakeInfo#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0"
      ]
    },
    "845": {
      "op": "dup",
      "defined_out": [
        "senderAddress#0",
        "stakeInfo#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#0"
      ]
    },
    "846": {
      "op": "intc_0 // 0",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#0",
        "0"
      ]
    },
    "847": {
      "op": "extract_uint64",
      "defined_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ]
    },
    "848": {
      "op": "dupn 2",
      "defined_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "850": {
      "error": "No stake found",
      "op": "assert // No stake found",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "851": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "tmp%1#0",
        "amount#0 (copy)"
      ]
    },
    "853": {
      "op": "dig 1",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "tmp%1#0",
        "amount#0 (copy)",
        "tmp%1#0 (copy)"
      ]
    },
    "855": {
      "op": "<=",
      "defined_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "tmp%1#0",
        "tmp%5#0"
      ]
    },
    "856": {
      "error": "Withdrawal amount exceeds stake",
      "op": "assert // Withdrawal amount exceeds stake",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "857": {
      "op": "frame_dig -1",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "tmp%1#0",
        "amount#0 (copy)"
      ]
    },
    "859": {
      "error": "Withdrawal amount must be positive",
      "op": "assert // Withdrawal amount must be positive",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "860": {
      "op": "frame_dig -1",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "tmp%1#0",
        "amount#0 (copy)"
      ]
    },
    "862": {
      "op": ">",
      "defined_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "tmp%9#0"
      ]
    },
    "863": {
      "op": "bz withdraw_after_if_else@2",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ]
    },
    "866": {
      "op": "frame_dig 2",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "868": {
      "op": "frame_dig -1",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "tmp%1#0",
        "amount#0 (copy)"
      ]
    },
    "870": {
      "op": "-",
      "defined_out": [
        "remainingStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "remainingStake#0"
      ]
    },
    "871": {
      "op": "intc_0 // 0",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "remainingStake#0",
        "0"
      ]
    },
    "872": {
      "op": "bytec 5 // \"minimumStake\"",
      "defined_out": [
        "\"minimumStake\"",
        "0",
        "remainingStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "remainingStake#0",
        "0",
        "\"minimumStake\""
      ]
    },
    "874": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "minimumStake#0",
        "remainingStake#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "remainingStake#0",
        "minimumStake#0",
        "maybe_exists%0#0"
      ]
    },
    "875": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "remainingStake#0",
        "minimumStake#0"
      ]
    },
    "876": {
      "op": ">=",
      "defined_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "tmp%12#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "tmp%12#0"
      ]
    },
    "877": {
      "error": "Remaining stake would be below minimum",
      "op": "assert // Remaining stake would be below minimum",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ]
    },
    "878": {
      "block": "withdraw_after_if_else@2",
      "stack_in": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "tmp%1#0"
      ]
    },
    "880": {
      "op": "frame_dig -1",
      "defined_out": [
        "amount#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "tmp%1#0",
        "amount#0 (copy)"
      ]
    },
    "882": {
      "op": "-",
      "defined_out": [
        "tmp%1#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "to_encode%0#0"
      ]
    },
    "883": {
      "op": "itob",
      "defined_out": [
        "tmp%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "val_as_bytes%0#0"
      ]
    },
    "884": {
      "op": "frame_dig 1",
      "defined_out": [
        "stakeInfo#0",
        "tmp%1#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "val_as_bytes%0#0",
        "stakeInfo#0"
      ]
    },
    "886": {
      "op": "swap",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "stakeInfo#0",
        "val_as_bytes%0#0"
      ]
    },
    "887": {
      "op": "replace2 0",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "stakeInfo#0"
      ]
    },
    "889": {
      "op": "frame_dig 0",
      "defined_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "stakeInfo#0",
        "senderAddress#0"
      ]
    },
    "891": {
      "op": "swap",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "senderAddress#0",
        "stakeInfo#0"
      ]
    },
    "892": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.storeUserStakeInfo",
      "op": "callsub storeUserStakeInfo",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "stakeInfo#0"
      ]
    },
    "895": {
      "op": "pop",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ]
    },
    "896": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "0"
      ]
    },
    "897": {
      "op": "bytec_0 // \"totalStaked\"",
      "defined_out": [
        "\"totalStaked\"",
        "0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "0",
        "\"totalStaked\""
      ]
    },
    "898": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "899": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "maybe_value%1#0"
      ]
    },
    "900": {
      "op": "frame_dig -1",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "maybe_value%1#0",
        "amount#0 (copy)"
      ]
    },
    "902": {
      "op": "-",
      "defined_out": [
        "new_state_value%0#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "new_state_value%0#0"
      ]
    },
    "903": {
      "op": "bytec_0 // \"totalStaked\"",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "new_state_value%0#0",
        "\"totalStaked\""
      ]
    },
    "904": {
      "op": "swap",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "\"totalStaked\"",
        "new_state_value%0#0"
      ]
    },
    "905": {
      "op": "app_global_put",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ]
    },
    "906": {
      "op": "intc_0 // 0",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "0"
      ]
    },
    "907": {
      "op": "bytec_1 // \"asset\"",
      "defined_out": [
        "\"asset\"",
        "0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "0",
        "\"asset\""
      ]
    },
    "908": {
      "op": "app_global_get_ex",
      "defined_out": [
        "asset#0",
        "maybe_exists%2#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "asset#0",
        "maybe_exists%2#0"
      ]
    },
    "909": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "asset#0"
      ]
    },
    "910": {
      "op": "itxn_begin"
    },
    "911": {
      "op": "txn Sender",
      "defined_out": [
        "asset#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "asset#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "913": {
      "op": "swap",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "asset#0"
      ]
    },
    "914": {
      "op": "itxn_field XferAsset",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "916": {
      "op": "frame_dig -1",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0",
        "amount#0 (copy)"
      ]
    },
    "918": {
      "op": "itxn_field AssetAmount",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "inner_txn_params%0%%param_AssetReceiver_idx_0#0"
      ]
    },
    "920": {
      "op": "itxn_field AssetReceiver",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ]
    },
    "922": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "4"
      ]
    },
    "923": {
      "op": "itxn_field TypeEnum",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ]
    },
    "925": {
      "op": "pushint 1000 // 1000",
      "defined_out": [
        "1000",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "1000"
      ]
    },
    "928": {
      "op": "itxn_field Fee",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ]
    },
    "930": {
      "op": "itxn_submit"
    },
    "931": {
      "retsub": true,
      "op": "retsub"
    },
    "932": {
      "subroutine": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.distributeRewards",
      "params": {},
      "block": "distributeRewards",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "933": {
      "op": "bytec_2 // \"adminAddress\"",
      "defined_out": [
        "\"adminAddress\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"adminAddress\""
      ]
    },
    "934": {
      "op": "app_global_get_ex",
      "defined_out": [
        "adminAddr#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "maybe_exists%0#0"
      ]
    },
    "935": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "adminAddr#0"
      ]
    },
    "936": {
      "op": "txn Sender",
      "defined_out": [
        "adminAddr#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "tmp%0#0"
      ]
    },
    "938": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "939": {
      "error": "Only admin can distribute rewards",
      "op": "assert // Only admin can distribute rewards",
      "stack_out": []
    },
    "940": {
      "op": "global GroupSize",
      "defined_out": [
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0"
      ]
    },
    "942": {
      "op": "pushint 2 // 2",
      "defined_out": [
        "2",
        "tmp%2#0"
      ],
      "stack_out": [
        "tmp%2#0",
        "2"
      ]
    },
    "944": {
      "op": "==",
      "defined_out": [
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%3#0"
      ]
    },
    "945": {
      "error": "Expected 2 txns in group",
      "op": "assert // Expected 2 txns in group",
      "stack_out": []
    },
    "946": {
      "op": "intc_0 // 0",
      "stack_out": [
        "0"
      ]
    },
    "947": {
      "op": "bytec_1 // \"asset\"",
      "defined_out": [
        "\"asset\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"asset\""
      ]
    },
    "948": {
      "op": "app_global_get_ex",
      "defined_out": [
        "asset#0",
        "maybe_exists%1#0"
      ],
      "stack_out": [
        "asset#0",
        "maybe_exists%1#0"
      ]
    },
    "949": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "asset#0"
      ]
    },
    "950": {
      "op": "intc_1 // 1",
      "defined_out": [
        "1",
        "asset#0"
      ],
      "stack_out": [
        "asset#0",
        "1"
      ]
    },
    "951": {
      "op": "gtxns TypeEnum",
      "defined_out": [
        "asset#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "asset#0",
        "gtxn_type%0#0"
      ]
    },
    "953": {
      "op": "dup",
      "defined_out": [
        "asset#0",
        "gtxn_type%0#0",
        "gtxn_type%0#0 (copy)"
      ],
      "stack_out": [
        "asset#0",
        "gtxn_type%0#0",
        "gtxn_type%0#0 (copy)"
      ]
    },
    "954": {
      "op": "intc_2 // axfer",
      "defined_out": [
        "asset#0",
        "axfer",
        "gtxn_type%0#0",
        "gtxn_type%0#0 (copy)"
      ],
      "stack_out": [
        "asset#0",
        "gtxn_type%0#0",
        "gtxn_type%0#0 (copy)",
        "axfer"
      ]
    },
    "955": {
      "op": "==",
      "defined_out": [
        "asset#0",
        "gtxn_type%0#0",
        "gtxn_type_matches%0#0"
      ],
      "stack_out": [
        "asset#0",
        "gtxn_type%0#0",
        "gtxn_type_matches%0#0"
      ]
    },
    "956": {
      "error": "transaction type is axfer",
      "op": "assert // transaction type is axfer",
      "stack_out": [
        "asset#0",
        "gtxn_type%0#0"
      ]
    },
    "957": {
      "op": "intc_2 // 4",
      "defined_out": [
        "4",
        "asset#0",
        "gtxn_type%0#0"
      ],
      "stack_out": [
        "asset#0",
        "gtxn_type%0#0",
        "4"
      ]
    },
    "958": {
      "op": "==",
      "defined_out": [
        "asset#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "asset#0",
        "tmp%5#0"
      ]
    },
    "959": {
      "error": "Transaction 1 must be asset transfer",
      "op": "assert // Transaction 1 must be asset transfer",
      "stack_out": [
        "asset#0"
      ]
    },
    "960": {
      "op": "intc_1 // 1",
      "stack_out": [
        "asset#0",
        "1"
      ]
    },
    "961": {
      "op": "gtxns AssetReceiver",
      "defined_out": [
        "asset#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "asset#0",
        "tmp%6#0"
      ]
    },
    "963": {
      "op": "global CurrentApplicationAddress",
      "defined_out": [
        "asset#0",
        "tmp%6#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "asset#0",
        "tmp%6#0",
        "tmp%7#0"
      ]
    },
    "965": {
      "op": "==",
      "defined_out": [
        "asset#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "asset#0",
        "tmp%8#0"
      ]
    },
    "966": {
      "error": "Asset transfer must be to contract",
      "op": "assert // Asset transfer must be to contract",
      "stack_out": [
        "asset#0"
      ]
    },
    "967": {
      "op": "intc_1 // 1",
      "stack_out": [
        "asset#0",
        "1"
      ]
    },
    "968": {
      "op": "gtxns AssetAmount",
      "defined_out": [
        "asset#0",
        "tmp%9#0"
      ],
      "stack_out": [
        "asset#0",
        "tmp%9#0"
      ]
    },
    "970": {
      "error": "Must provide non-zero rewards",
      "op": "assert // Must provide non-zero rewards",
      "stack_out": [
        "asset#0"
      ]
    },
    "971": {
      "op": "intc_1 // 1",
      "stack_out": [
        "asset#0",
        "1"
      ]
    },
    "972": {
      "op": "gtxns XferAsset",
      "defined_out": [
        "asset#0",
        "tmp%11#0"
      ],
      "stack_out": [
        "asset#0",
        "tmp%11#0"
      ]
    },
    "974": {
      "op": "==",
      "defined_out": [
        "tmp%12#0"
      ],
      "stack_out": [
        "tmp%12#0"
      ]
    },
    "975": {
      "error": "Incorrect asset ID",
      "op": "assert // Incorrect asset ID",
      "stack_out": []
    },
    "976": {
      "op": "global LatestTimestamp",
      "defined_out": [
        "currentTime#0"
      ],
      "stack_out": [
        "currentTime#0"
      ]
    },
    "978": {
      "op": "intc_0 // 0",
      "stack_out": [
        "currentTime#0",
        "0"
      ]
    },
    "979": {
      "op": "bytec_3 // \"lastDistributionTime\"",
      "defined_out": [
        "\"lastDistributionTime\"",
        "0",
        "currentTime#0"
      ],
      "stack_out": [
        "currentTime#0",
        "0",
        "\"lastDistributionTime\""
      ]
    },
    "980": {
      "op": "app_global_get_ex",
      "defined_out": [
        "currentTime#0",
        "lastDistributionTime#0",
        "maybe_exists%2#0"
      ],
      "stack_out": [
        "currentTime#0",
        "lastDistributionTime#0",
        "maybe_exists%2#0"
      ]
    },
    "981": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "currentTime#0",
        "lastDistributionTime#0"
      ]
    },
    "982": {
      "op": "intc_0 // 0",
      "stack_out": [
        "currentTime#0",
        "lastDistributionTime#0",
        "0"
      ]
    },
    "983": {
      "op": "bytec 7 // \"distributionPeriodSeconds\"",
      "defined_out": [
        "\"distributionPeriodSeconds\"",
        "0",
        "currentTime#0",
        "lastDistributionTime#0"
      ],
      "stack_out": [
        "currentTime#0",
        "lastDistributionTime#0",
        "0",
        "\"distributionPeriodSeconds\""
      ]
    },
    "985": {
      "op": "app_global_get_ex",
      "defined_out": [
        "currentTime#0",
        "lastDistributionTime#0",
        "maybe_exists%3#0",
        "periodSeconds#0"
      ],
      "stack_out": [
        "currentTime#0",
        "lastDistributionTime#0",
        "periodSeconds#0",
        "maybe_exists%3#0"
      ]
    },
    "986": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "currentTime#0",
        "lastDistributionTime#0",
        "periodSeconds#0"
      ]
    },
    "987": {
      "op": "+",
      "defined_out": [
        "currentTime#0",
        "tmp%13#0"
      ],
      "stack_out": [
        "currentTime#0",
        "tmp%13#0"
      ]
    },
    "988": {
      "op": "dig 1",
      "defined_out": [
        "currentTime#0",
        "currentTime#0 (copy)",
        "tmp%13#0"
      ],
      "stack_out": [
        "currentTime#0",
        "tmp%13#0",
        "currentTime#0 (copy)"
      ]
    },
    "990": {
      "op": "<=",
      "defined_out": [
        "currentTime#0",
        "tmp%14#0"
      ],
      "stack_out": [
        "currentTime#0",
        "tmp%14#0"
      ]
    },
    "991": {
      "error": "Distribution period has not passed",
      "op": "assert // Distribution period has not passed",
      "stack_out": [
        "currentTime#0"
      ]
    },
    "992": {
      "op": "bytec_3 // \"lastDistributionTime\"",
      "stack_out": [
        "currentTime#0",
        "\"lastDistributionTime\""
      ]
    },
    "993": {
      "op": "swap",
      "stack_out": [
        "\"lastDistributionTime\"",
        "currentTime#0"
      ]
    },
    "994": {
      "op": "app_global_put",
      "stack_out": []
    },
    "995": {
      "retsub": true,
      "op": "retsub"
    },
    "996": {
      "subroutine": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.calculateUserRewards",
      "params": {
        "userAddress#0": "bytes"
      },
      "block": "calculateUserRewards",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "999": {
      "op": "intc_0 // 0",
      "stack_out": [
        "stakeInfo#0"
      ]
    },
    "1000": {
      "op": "pushbytes \"\"",
      "stack_out": [
        "stakeInfo#0",
        "tmp%2#0"
      ]
    },
    "1002": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "stakeInfo#0",
        "tmp%2#0",
        "0"
      ]
    },
    "1003": {
      "op": "bytec 4 // \"aprBasisPoints\"",
      "defined_out": [
        "\"aprBasisPoints\"",
        "0"
      ],
      "stack_out": [
        "stakeInfo#0",
        "tmp%2#0",
        "0",
        "\"aprBasisPoints\""
      ]
    },
    "1005": {
      "op": "app_global_get_ex",
      "defined_out": [
        "apr#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "stakeInfo#0",
        "tmp%2#0",
        "apr#0",
        "maybe_exists%0#0"
      ]
    },
    "1006": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "stakeInfo#0",
        "tmp%2#0",
        "apr#0"
      ]
    },
    "1007": {
      "op": "intc_0 // 0",
      "stack_out": [
        "stakeInfo#0",
        "tmp%2#0",
        "apr#0",
        "0"
      ]
    },
    "1008": {
      "op": "bytec_0 // \"totalStaked\"",
      "defined_out": [
        "\"totalStaked\"",
        "0",
        "apr#0"
      ],
      "stack_out": [
        "stakeInfo#0",
        "tmp%2#0",
        "apr#0",
        "0",
        "\"totalStaked\""
      ]
    },
    "1009": {
      "op": "app_global_get_ex",
      "defined_out": [
        "apr#0",
        "maybe_exists%1#0",
        "totalStaked#0"
      ],
      "stack_out": [
        "stakeInfo#0",
        "tmp%2#0",
        "apr#0",
        "totalStaked#0",
        "maybe_exists%1#0"
      ]
    },
    "1010": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "stakeInfo#0",
        "tmp%2#0",
        "apr#0",
        "totalStaked#0"
      ]
    },
    "1011": {
      "op": "bnz calculateUserRewards_after_if_else@2",
      "stack_out": [
        "stakeInfo#0",
        "tmp%2#0",
        "apr#0"
      ]
    },
    "1014": {
      "op": "intc_0 // 0",
      "stack_out": [
        "stakeInfo#0",
        "tmp%2#0",
        "apr#0",
        "0"
      ]
    },
    "1015": {
      "op": "frame_bury 0"
    },
    "1017": {
      "retsub": true,
      "op": "retsub"
    },
    "1018": {
      "block": "calculateUserRewards_after_if_else@2",
      "stack_in": [
        "stakeInfo#0",
        "tmp%2#0",
        "apr#0"
      ],
      "op": "frame_dig -1",
      "defined_out": [
        "userAddress#0 (copy)"
      ],
      "stack_out": [
        "stakeInfo#0",
        "tmp%2#0",
        "apr#0",
        "userAddress#0 (copy)"
      ]
    },
    "1020": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.getUserStakeInfo",
      "op": "callsub getUserStakeInfo",
      "defined_out": [
        "stakeInfo#0"
      ],
      "stack_out": [
        "stakeInfo#0",
        "tmp%2#0",
        "apr#0",
        "stakeInfo#0"
      ]
    },
    "1023": {
      "op": "dup",
      "stack_out": [
        "stakeInfo#0",
        "tmp%2#0",
        "apr#0",
        "stakeInfo#0",
        "stakeInfo#0"
      ]
    },
    "1024": {
      "op": "frame_bury 0",
      "defined_out": [
        "stakeInfo#0"
      ],
      "stack_out": [
        "stakeInfo#0",
        "tmp%2#0",
        "apr#0",
        "stakeInfo#0"
      ]
    },
    "1026": {
      "op": "intc_0 // 0",
      "stack_out": [
        "stakeInfo#0",
        "tmp%2#0",
        "apr#0",
        "stakeInfo#0",
        "0"
      ]
    },
    "1027": {
      "op": "extract_uint64",
      "defined_out": [
        "stakeInfo#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "stakeInfo#0",
        "tmp%2#0",
        "apr#0",
        "tmp%2#0"
      ]
    },
    "1028": {
      "op": "dup",
      "stack_out": [
        "stakeInfo#0",
        "tmp%2#0",
        "apr#0",
        "tmp%2#0",
        "tmp%2#0"
      ]
    },
    "1029": {
      "op": "frame_bury 1",
      "defined_out": [
        "stakeInfo#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "stakeInfo#0",
        "tmp%2#0",
        "apr#0",
        "tmp%2#0"
      ]
    },
    "1031": {
      "op": "bnz calculateUserRewards_after_if_else@4",
      "stack_out": [
        "stakeInfo#0",
        "tmp%2#0",
        "apr#0"
      ]
    },
    "1034": {
      "op": "intc_0 // 0",
      "stack_out": [
        "stakeInfo#0",
        "tmp%2#0",
        "apr#0",
        "0"
      ]
    },
    "1035": {
      "op": "frame_bury 0"
    },
    "1037": {
      "retsub": true,
      "op": "retsub"
    },
    "1038": {
      "block": "calculateUserRewards_after_if_else@4",
      "stack_in": [
        "stakeInfo#0",
        "tmp%2#0",
        "apr#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "stakeInfo#0",
        "tmp%2#0",
        "apr#0",
        "0"
      ]
    },
    "1039": {
      "op": "bytec_3 // \"lastDistributionTime\"",
      "defined_out": [
        "\"lastDistributionTime\"",
        "0"
      ],
      "stack_out": [
        "stakeInfo#0",
        "tmp%2#0",
        "apr#0",
        "0",
        "\"lastDistributionTime\""
      ]
    },
    "1040": {
      "op": "app_global_get_ex",
      "defined_out": [
        "lastDistributionTime#0",
        "maybe_exists%2#0"
      ],
      "stack_out": [
        "stakeInfo#0",
        "tmp%2#0",
        "apr#0",
        "lastDistributionTime#0",
        "maybe_exists%2#0"
      ]
    },
    "1041": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "stakeInfo#0",
        "tmp%2#0",
        "apr#0",
        "lastDistributionTime#0"
      ]
    },
    "1042": {
      "op": "frame_dig 0",
      "defined_out": [
        "lastDistributionTime#0",
        "stakeInfo#0"
      ],
      "stack_out": [
        "stakeInfo#0",
        "tmp%2#0",
        "apr#0",
        "lastDistributionTime#0",
        "stakeInfo#0"
      ]
    },
    "1044": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "lastDistributionTime#0",
        "stakeInfo#0"
      ],
      "stack_out": [
        "stakeInfo#0",
        "tmp%2#0",
        "apr#0",
        "lastDistributionTime#0",
        "stakeInfo#0",
        "8"
      ]
    },
    "1045": {
      "op": "extract_uint64",
      "defined_out": [
        "lastDistributionTime#0",
        "stakeInfo#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "stakeInfo#0",
        "tmp%2#0",
        "apr#0",
        "lastDistributionTime#0",
        "tmp%4#0"
      ]
    },
    "1046": {
      "op": "pushint 86400 // 86400",
      "defined_out": [
        "86400",
        "lastDistributionTime#0",
        "stakeInfo#0",
        "tmp%4#0"
      ],
      "stack_out": [
        "stakeInfo#0",
        "tmp%2#0",
        "apr#0",
        "lastDistributionTime#0",
        "tmp%4#0",
        "86400"
      ]
    },
    "1050": {
      "op": "+",
      "defined_out": [
        "lastDistributionTime#0",
        "stakeInfo#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "stakeInfo#0",
        "tmp%2#0",
        "apr#0",
        "lastDistributionTime#0",
        "tmp%5#0"
      ]
    },
    "1051": {
      "op": "<",
      "defined_out": [
        "stakeInfo#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "stakeInfo#0",
        "tmp%2#0",
        "apr#0",
        "tmp%6#0"
      ]
    },
    "1052": {
      "op": "bz calculateUserRewards_after_if_else@6",
      "stack_out": [
        "stakeInfo#0",
        "tmp%2#0",
        "apr#0"
      ]
    },
    "1055": {
      "op": "intc_0 // 0",
      "stack_out": [
        "stakeInfo#0",
        "tmp%2#0",
        "apr#0",
        "0"
      ]
    },
    "1056": {
      "op": "frame_bury 0"
    },
    "1058": {
      "retsub": true,
      "op": "retsub"
    },
    "1059": {
      "block": "calculateUserRewards_after_if_else@6",
      "stack_in": [
        "stakeInfo#0",
        "tmp%2#0",
        "apr#0"
      ],
      "op": "frame_dig 2",
      "defined_out": [
        "apr#0"
      ],
      "stack_out": [
        "stakeInfo#0",
        "tmp%2#0",
        "apr#0",
        "apr#0"
      ]
    },
    "1061": {
      "op": "pushint 100 // 100",
      "defined_out": [
        "100",
        "apr#0"
      ],
      "stack_out": [
        "stakeInfo#0",
        "tmp%2#0",
        "apr#0",
        "apr#0",
        "100"
      ]
    },
    "1063": {
      "op": "*",
      "defined_out": [
        "apr#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "stakeInfo#0",
        "tmp%2#0",
        "apr#0",
        "tmp%7#0"
      ]
    },
    "1064": {
      "op": "pushint 365 // 365",
      "defined_out": [
        "365",
        "apr#0",
        "tmp%7#0"
      ],
      "stack_out": [
        "stakeInfo#0",
        "tmp%2#0",
        "apr#0",
        "tmp%7#0",
        "365"
      ]
    },
    "1067": {
      "op": "/",
      "defined_out": [
        "apr#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "stakeInfo#0",
        "tmp%2#0",
        "apr#0",
        "tmp%8#0"
      ]
    },
    "1068": {
      "op": "pushint 10000 // 10000",
      "defined_out": [
        "10000",
        "apr#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "stakeInfo#0",
        "tmp%2#0",
        "apr#0",
        "tmp%8#0",
        "10000"
      ]
    },
    "1071": {
      "op": "*",
      "defined_out": [
        "apr#0",
        "dailyRateBasisPoints#0"
      ],
      "stack_out": [
        "stakeInfo#0",
        "tmp%2#0",
        "apr#0",
        "dailyRateBasisPoints#0"
      ]
    },
    "1072": {
      "op": "frame_dig 1",
      "defined_out": [
        "apr#0",
        "dailyRateBasisPoints#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "stakeInfo#0",
        "tmp%2#0",
        "apr#0",
        "dailyRateBasisPoints#0",
        "tmp%2#0"
      ]
    },
    "1074": {
      "op": "*",
      "defined_out": [
        "apr#0",
        "tmp%10#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "stakeInfo#0",
        "tmp%2#0",
        "apr#0",
        "tmp%10#0"
      ]
    },
    "1075": {
      "op": "pushint 10000 // 10000",
      "stack_out": [
        "stakeInfo#0",
        "tmp%2#0",
        "apr#0",
        "tmp%10#0",
        "10000"
      ]
    },
    "1078": {
      "op": "/",
      "defined_out": [
        "apr#0",
        "reward#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "stakeInfo#0",
        "tmp%2#0",
        "apr#0",
        "reward#0"
      ]
    },
    "1079": {
      "op": "frame_bury 0"
    },
    "1081": {
      "retsub": true,
      "op": "retsub"
    },
    "1082": {
      "subroutine": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.claimRewards",
      "params": {},
      "block": "claimRewards",
      "stack_in": [],
      "op": "txn Sender",
      "defined_out": [
        "senderAddress#0"
      ],
      "stack_out": [
        "senderAddress#0"
      ]
    },
    "1084": {
      "op": "dup",
      "defined_out": [
        "senderAddress#0",
        "senderAddress#0 (copy)"
      ],
      "stack_out": [
        "senderAddress#0",
        "senderAddress#0 (copy)"
      ]
    },
    "1085": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.getUserStakeInfo",
      "op": "callsub getUserStakeInfo",
      "defined_out": [
        "senderAddress#0",
        "stakeInfo#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0"
      ]
    },
    "1088": {
      "op": "dup",
      "defined_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#0 (copy)"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#0 (copy)"
      ]
    },
    "1089": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#0 (copy)"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#0 (copy)",
        "0"
      ]
    },
    "1090": {
      "op": "extract_uint64",
      "defined_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ]
    },
    "1091": {
      "op": "dup",
      "defined_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "tmp%1#0 (copy)"
      ]
    },
    "1092": {
      "error": "No stake found",
      "op": "assert // No stake found",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ]
    },
    "1093": {
      "op": "txn Sender",
      "defined_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "tmp%3#0"
      ]
    },
    "1095": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.calculateUserRewards",
      "op": "callsub calculateUserRewards",
      "defined_out": [
        "reward#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "reward#0"
      ]
    },
    "1098": {
      "op": "dup",
      "defined_out": [
        "reward#0",
        "reward#0 (copy)",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "reward#0",
        "reward#0 (copy)"
      ]
    },
    "1099": {
      "error": "No rewards to claim",
      "op": "assert // No rewards to claim",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%1#0",
        "reward#0"
      ]
    },
    "1100": {
      "op": "swap",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "reward#0",
        "tmp%1#0"
      ]
    },
    "1101": {
      "op": "dig 1",
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "reward#0",
        "tmp%1#0",
        "reward#0 (copy)"
      ]
    },
    "1103": {
      "op": "+",
      "defined_out": [
        "reward#0",
        "senderAddress#0",
        "stakeInfo#0",
        "to_encode%0#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "reward#0",
        "to_encode%0#0"
      ]
    },
    "1104": {
      "op": "itob",
      "defined_out": [
        "reward#0",
        "senderAddress#0",
        "stakeInfo#0",
        "val_as_bytes%0#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "stakeInfo#0",
        "reward#0",
        "val_as_bytes%0#0"
      ]
    },
    "1105": {
      "op": "uncover 2",
      "stack_out": [
        "senderAddress#0",
        "reward#0",
        "val_as_bytes%0#0",
        "stakeInfo#0"
      ]
    },
    "1107": {
      "op": "swap",
      "stack_out": [
        "senderAddress#0",
        "reward#0",
        "stakeInfo#0",
        "val_as_bytes%0#0"
      ]
    },
    "1108": {
      "op": "replace2 0",
      "stack_out": [
        "senderAddress#0",
        "reward#0",
        "stakeInfo#0"
      ]
    },
    "1110": {
      "op": "dup",
      "stack_out": [
        "senderAddress#0",
        "reward#0",
        "stakeInfo#0",
        "stakeInfo#0 (copy)"
      ]
    },
    "1111": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "reward#0",
        "senderAddress#0",
        "stakeInfo#0",
        "stakeInfo#0 (copy)"
      ],
      "stack_out": [
        "senderAddress#0",
        "reward#0",
        "stakeInfo#0",
        "stakeInfo#0 (copy)",
        "16"
      ]
    },
    "1113": {
      "op": "extract_uint64",
      "defined_out": [
        "reward#0",
        "senderAddress#0",
        "stakeInfo#0",
        "tmp%8#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "reward#0",
        "stakeInfo#0",
        "tmp%8#0"
      ]
    },
    "1114": {
      "op": "dig 2",
      "stack_out": [
        "senderAddress#0",
        "reward#0",
        "stakeInfo#0",
        "tmp%8#0",
        "reward#0 (copy)"
      ]
    },
    "1116": {
      "op": "+",
      "defined_out": [
        "reward#0",
        "senderAddress#0",
        "stakeInfo#0",
        "to_encode%1#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "reward#0",
        "stakeInfo#0",
        "to_encode%1#0"
      ]
    },
    "1117": {
      "op": "itob",
      "defined_out": [
        "reward#0",
        "senderAddress#0",
        "stakeInfo#0",
        "val_as_bytes%1#0"
      ],
      "stack_out": [
        "senderAddress#0",
        "reward#0",
        "stakeInfo#0",
        "val_as_bytes%1#0"
      ]
    },
    "1118": {
      "op": "replace2 16",
      "stack_out": [
        "senderAddress#0",
        "reward#0",
        "stakeInfo#0"
      ]
    },
    "1120": {
      "op": "uncover 2",
      "stack_out": [
        "reward#0",
        "stakeInfo#0",
        "senderAddress#0"
      ]
    },
    "1122": {
      "op": "swap",
      "stack_out": [
        "reward#0",
        "senderAddress#0",
        "stakeInfo#0"
      ]
    },
    "1123": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.storeUserStakeInfo",
      "op": "callsub storeUserStakeInfo",
      "stack_out": [
        "reward#0",
        "stakeInfo#0"
      ]
    },
    "1126": {
      "op": "pop",
      "stack_out": [
        "reward#0"
      ]
    },
    "1127": {
      "op": "intc_0 // 0",
      "stack_out": [
        "reward#0",
        "0"
      ]
    },
    "1128": {
      "op": "bytec_0 // \"totalStaked\"",
      "defined_out": [
        "\"totalStaked\"",
        "0",
        "reward#0"
      ],
      "stack_out": [
        "reward#0",
        "0",
        "\"totalStaked\""
      ]
    },
    "1129": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0",
        "reward#0"
      ],
      "stack_out": [
        "reward#0",
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1130": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "reward#0",
        "maybe_value%0#0"
      ]
    },
    "1131": {
      "op": "+",
      "defined_out": [
        "new_state_value%0#0"
      ],
      "stack_out": [
        "new_state_value%0#0"
      ]
    },
    "1132": {
      "op": "bytec_0 // \"totalStaked\"",
      "stack_out": [
        "new_state_value%0#0",
        "\"totalStaked\""
      ]
    },
    "1133": {
      "op": "swap",
      "stack_out": [
        "\"totalStaked\"",
        "new_state_value%0#0"
      ]
    },
    "1134": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1135": {
      "retsub": true,
      "op": "retsub"
    },
    "1136": {
      "subroutine": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.updateAPR",
      "params": {
        "newAprBasisPoints#0": "uint64"
      },
      "block": "updateAPR",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1139": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1140": {
      "op": "bytec_2 // \"adminAddress\"",
      "defined_out": [
        "\"adminAddress\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"adminAddress\""
      ]
    },
    "1141": {
      "op": "app_global_get_ex",
      "defined_out": [
        "adminAddr#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "maybe_exists%0#0"
      ]
    },
    "1142": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "adminAddr#0"
      ]
    },
    "1143": {
      "op": "txn Sender",
      "defined_out": [
        "adminAddr#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "tmp%0#0"
      ]
    },
    "1145": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1146": {
      "error": "Only admin can update APR",
      "op": "assert // Only admin can update APR",
      "stack_out": []
    },
    "1147": {
      "op": "bytec 4 // \"aprBasisPoints\"",
      "defined_out": [
        "\"aprBasisPoints\""
      ],
      "stack_out": [
        "\"aprBasisPoints\""
      ]
    },
    "1149": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"aprBasisPoints\"",
        "newAprBasisPoints#0 (copy)"
      ],
      "stack_out": [
        "\"aprBasisPoints\"",
        "newAprBasisPoints#0 (copy)"
      ]
    },
    "1151": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1152": {
      "retsub": true,
      "op": "retsub"
    },
    "1153": {
      "subroutine": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.updateAdmin",
      "params": {
        "newAdminAddress#0": "bytes"
      },
      "block": "updateAdmin",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1156": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1157": {
      "op": "bytec_2 // \"adminAddress\"",
      "defined_out": [
        "\"adminAddress\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"adminAddress\""
      ]
    },
    "1158": {
      "op": "app_global_get_ex",
      "defined_out": [
        "adminAddr#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "maybe_exists%0#0"
      ]
    },
    "1159": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "adminAddr#0"
      ]
    },
    "1160": {
      "op": "txn Sender",
      "defined_out": [
        "adminAddr#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "adminAddr#0",
        "tmp%0#0"
      ]
    },
    "1162": {
      "op": "==",
      "defined_out": [
        "tmp%1#0"
      ],
      "stack_out": [
        "tmp%1#0"
      ]
    },
    "1163": {
      "error": "Only admin can update admin",
      "op": "assert // Only admin can update admin",
      "stack_out": []
    },
    "1164": {
      "op": "bytec_2 // \"adminAddress\"",
      "stack_out": [
        "\"adminAddress\""
      ]
    },
    "1165": {
      "op": "frame_dig -1",
      "defined_out": [
        "\"adminAddress\"",
        "newAdminAddress#0 (copy)"
      ],
      "stack_out": [
        "\"adminAddress\"",
        "newAdminAddress#0 (copy)"
      ]
    },
    "1167": {
      "op": "app_global_put",
      "stack_out": []
    },
    "1168": {
      "retsub": true,
      "op": "retsub"
    },
    "1169": {
      "subroutine": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.getUserStats",
      "params": {
        "userAddress#0": "bytes"
      },
      "block": "getUserStats",
      "stack_in": [],
      "op": "proto 1 1"
    },
    "1172": {
      "op": "frame_dig -1",
      "defined_out": [
        "userAddress#0 (copy)"
      ],
      "stack_out": [
        "userAddress#0 (copy)"
      ]
    },
    "1174": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.getUserStakeInfo",
      "op": "callsub getUserStakeInfo",
      "defined_out": [
        "stakeInfo#0"
      ],
      "stack_out": [
        "stakeInfo#0"
      ]
    },
    "1177": {
      "op": "dup",
      "defined_out": [
        "stakeInfo#0",
        "stakeInfo#0 (copy)"
      ],
      "stack_out": [
        "stakeInfo#0",
        "stakeInfo#0 (copy)"
      ]
    },
    "1178": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "stakeInfo#0",
        "stakeInfo#0 (copy)"
      ],
      "stack_out": [
        "stakeInfo#0",
        "stakeInfo#0 (copy)",
        "0"
      ]
    },
    "1179": {
      "op": "extract_uint64",
      "defined_out": [
        "stakeInfo#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "stakeInfo#0",
        "tmp%1#0"
      ]
    },
    "1180": {
      "op": "dig 1",
      "stack_out": [
        "stakeInfo#0",
        "tmp%1#0",
        "stakeInfo#0 (copy)"
      ]
    },
    "1182": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "stakeInfo#0",
        "stakeInfo#0 (copy)",
        "tmp%1#0"
      ],
      "stack_out": [
        "stakeInfo#0",
        "tmp%1#0",
        "stakeInfo#0 (copy)",
        "8"
      ]
    },
    "1183": {
      "op": "extract_uint64",
      "defined_out": [
        "stakeInfo#0",
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "stakeInfo#0",
        "tmp%1#0",
        "tmp%3#0"
      ]
    },
    "1184": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "stakeInfo#0"
      ]
    },
    "1186": {
      "op": "pushint 16 // 16",
      "defined_out": [
        "16",
        "stakeInfo#0",
        "tmp%1#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "stakeInfo#0",
        "16"
      ]
    },
    "1188": {
      "op": "extract_uint64",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0"
      ]
    },
    "1189": {
      "op": "frame_dig -1",
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "userAddress#0 (copy)"
      ]
    },
    "1191": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.calculateUserRewards",
      "op": "callsub calculateUserRewards",
      "defined_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%1#0",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%6#0"
      ]
    },
    "1194": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "tmp%6#0",
        "tmp%1#0"
      ]
    },
    "1196": {
      "op": "itob",
      "defined_out": [
        "array%sub_item%0#1",
        "tmp%3#0",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%3#0",
        "tmp%5#0",
        "tmp%6#0",
        "array%sub_item%0#1"
      ]
    },
    "1197": {
      "op": "uncover 3",
      "stack_out": [
        "tmp%5#0",
        "tmp%6#0",
        "array%sub_item%0#1",
        "tmp%3#0"
      ]
    },
    "1199": {
      "op": "itob",
      "defined_out": [
        "array%sub_item%0#1",
        "array%sub_item%1#1",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "tmp%6#0",
        "array%sub_item%0#1",
        "array%sub_item%1#1"
      ]
    },
    "1200": {
      "op": "concat",
      "defined_out": [
        "array%data%1#1",
        "tmp%5#0",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%5#0",
        "tmp%6#0",
        "array%data%1#1"
      ]
    },
    "1201": {
      "op": "uncover 2",
      "stack_out": [
        "tmp%6#0",
        "array%data%1#1",
        "tmp%5#0"
      ]
    },
    "1203": {
      "op": "itob",
      "defined_out": [
        "array%data%1#1",
        "array%sub_item%2#1",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "array%data%1#1",
        "array%sub_item%2#1"
      ]
    },
    "1204": {
      "op": "concat",
      "defined_out": [
        "array%data%2#1",
        "tmp%6#0"
      ],
      "stack_out": [
        "tmp%6#0",
        "array%data%2#1"
      ]
    },
    "1205": {
      "op": "swap",
      "stack_out": [
        "array%data%2#1",
        "tmp%6#0"
      ]
    },
    "1206": {
      "op": "itob",
      "defined_out": [
        "array%data%2#1",
        "array%sub_item%3#1"
      ],
      "stack_out": [
        "array%data%2#1",
        "array%sub_item%3#1"
      ]
    },
    "1207": {
      "op": "concat",
      "defined_out": [
        "array%data%3#1"
      ],
      "stack_out": [
        "array%data%3#1"
      ]
    },
    "1208": {
      "op": "dup",
      "defined_out": [
        "array%data%3#1",
        "array%data%3#1 (copy)"
      ],
      "stack_out": [
        "array%data%3#1",
        "array%data%3#1 (copy)"
      ]
    },
    "1209": {
      "op": "len",
      "defined_out": [
        "array%data%3#1",
        "byte_len%0#0"
      ],
      "stack_out": [
        "array%data%3#1",
        "byte_len%0#0"
      ]
    },
    "1210": {
      "op": "intc_3 // 8",
      "stack_out": [
        "array%data%3#1",
        "byte_len%0#0",
        "8"
      ]
    },
    "1211": {
      "op": "/",
      "defined_out": [
        "array%data%3#1",
        "len_%0#0"
      ],
      "stack_out": [
        "array%data%3#1",
        "len_%0#0"
      ]
    },
    "1212": {
      "op": "itob",
      "defined_out": [
        "array%data%3#1",
        "as_bytes%0#0"
      ],
      "stack_out": [
        "array%data%3#1",
        "as_bytes%0#0"
      ]
    },
    "1213": {
      "op": "extract 6 2",
      "defined_out": [
        "array%data%3#1",
        "len_16_bit%0#0"
      ],
      "stack_out": [
        "array%data%3#1",
        "len_16_bit%0#0"
      ]
    },
    "1216": {
      "op": "swap",
      "stack_out": [
        "len_16_bit%0#0",
        "array%data%3#1"
      ]
    },
    "1217": {
      "op": "concat",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "1218": {
      "retsub": true,
      "op": "retsub"
    },
    "1219": {
      "subroutine": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.getContractStats",
      "params": {},
      "block": "getContractStats",
      "stack_in": [],
      "op": "intc_0 // 0",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "0"
      ]
    },
    "1220": {
      "op": "bytec_1 // \"asset\"",
      "defined_out": [
        "\"asset\"",
        "0"
      ],
      "stack_out": [
        "0",
        "\"asset\""
      ]
    },
    "1221": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%0#0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_exists%0#0"
      ]
    },
    "1222": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0"
      ]
    },
    "1223": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "0"
      ]
    },
    "1224": {
      "op": "bytec_0 // \"totalStaked\"",
      "defined_out": [
        "\"totalStaked\"",
        "0",
        "maybe_value%0#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "0",
        "\"totalStaked\""
      ]
    },
    "1225": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1226": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0"
      ]
    },
    "1227": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "0"
      ]
    },
    "1228": {
      "op": "bytec 4 // \"aprBasisPoints\"",
      "defined_out": [
        "\"aprBasisPoints\"",
        "0",
        "maybe_value%0#0",
        "maybe_value%1#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "0",
        "\"aprBasisPoints\""
      ]
    },
    "1230": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%2#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_exists%2#0"
      ]
    },
    "1231": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ]
    },
    "1232": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "0"
      ]
    },
    "1233": {
      "op": "bytec_3 // \"lastDistributionTime\"",
      "defined_out": [
        "\"lastDistributionTime\"",
        "0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "0",
        "\"lastDistributionTime\""
      ]
    },
    "1234": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%3#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_exists%3#0"
      ]
    },
    "1235": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ]
    },
    "1236": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "0"
      ]
    },
    "1237": {
      "op": "bytec 7 // \"distributionPeriodSeconds\"",
      "defined_out": [
        "\"distributionPeriodSeconds\"",
        "0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "0",
        "\"distributionPeriodSeconds\""
      ]
    },
    "1239": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%4#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_exists%4#0"
      ]
    },
    "1240": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0"
      ]
    },
    "1241": {
      "op": "intc_0 // 0",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "0"
      ]
    },
    "1242": {
      "op": "bytec 5 // \"minimumStake\"",
      "defined_out": [
        "\"minimumStake\"",
        "0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "0",
        "\"minimumStake\""
      ]
    },
    "1244": {
      "op": "app_global_get_ex",
      "defined_out": [
        "maybe_exists%5#0",
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_exists%5#0"
      ]
    },
    "1245": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "maybe_value%0#0",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0"
      ]
    },
    "1246": {
      "op": "uncover 5",
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "maybe_value%0#0"
      ]
    },
    "1248": {
      "op": "itob",
      "defined_out": [
        "array%sub_item%0#1",
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "maybe_value%1#0",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "array%sub_item%0#1"
      ]
    },
    "1249": {
      "op": "uncover 5",
      "stack_out": [
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "array%sub_item%0#1",
        "maybe_value%1#0"
      ]
    },
    "1251": {
      "op": "itob",
      "defined_out": [
        "array%sub_item%0#1",
        "array%sub_item%1#1",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "array%sub_item%0#1",
        "array%sub_item%1#1"
      ]
    },
    "1252": {
      "op": "concat",
      "defined_out": [
        "array%data%1#1",
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "maybe_value%2#0",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "array%data%1#1"
      ]
    },
    "1253": {
      "op": "uncover 4",
      "stack_out": [
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "array%data%1#1",
        "maybe_value%2#0"
      ]
    },
    "1255": {
      "op": "itob",
      "defined_out": [
        "array%data%1#1",
        "array%sub_item%2#1",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "array%data%1#1",
        "array%sub_item%2#1"
      ]
    },
    "1256": {
      "op": "concat",
      "defined_out": [
        "array%data%2#1",
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "maybe_value%3#0",
        "maybe_value%4#0",
        "maybe_value%5#0",
        "array%data%2#1"
      ]
    },
    "1257": {
      "op": "uncover 3",
      "stack_out": [
        "maybe_value%4#0",
        "maybe_value%5#0",
        "array%data%2#1",
        "maybe_value%3#0"
      ]
    },
    "1259": {
      "op": "itob",
      "defined_out": [
        "array%data%2#1",
        "array%sub_item%3#1",
        "maybe_value%4#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_value%5#0",
        "array%data%2#1",
        "array%sub_item%3#1"
      ]
    },
    "1260": {
      "op": "concat",
      "defined_out": [
        "array%data%3#1",
        "maybe_value%4#0",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "maybe_value%4#0",
        "maybe_value%5#0",
        "array%data%3#1"
      ]
    },
    "1261": {
      "op": "uncover 2",
      "stack_out": [
        "maybe_value%5#0",
        "array%data%3#1",
        "maybe_value%4#0"
      ]
    },
    "1263": {
      "op": "itob",
      "defined_out": [
        "array%data%3#1",
        "array%sub_item%4#1",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "maybe_value%5#0",
        "array%data%3#1",
        "array%sub_item%4#1"
      ]
    },
    "1264": {
      "op": "concat",
      "defined_out": [
        "array%data%4#1",
        "maybe_value%5#0"
      ],
      "stack_out": [
        "maybe_value%5#0",
        "array%data%4#1"
      ]
    },
    "1265": {
      "op": "swap",
      "stack_out": [
        "array%data%4#1",
        "maybe_value%5#0"
      ]
    },
    "1266": {
      "op": "itob",
      "defined_out": [
        "array%data%4#1",
        "array%sub_item%5#1"
      ],
      "stack_out": [
        "array%data%4#1",
        "array%sub_item%5#1"
      ]
    },
    "1267": {
      "op": "concat",
      "defined_out": [
        "array%data%5#1"
      ],
      "stack_out": [
        "array%data%5#1"
      ]
    },
    "1268": {
      "op": "dup",
      "defined_out": [
        "array%data%5#1",
        "array%data%5#1 (copy)"
      ],
      "stack_out": [
        "array%data%5#1",
        "array%data%5#1 (copy)"
      ]
    },
    "1269": {
      "op": "len",
      "defined_out": [
        "array%data%5#1",
        "byte_len%0#0"
      ],
      "stack_out": [
        "array%data%5#1",
        "byte_len%0#0"
      ]
    },
    "1270": {
      "op": "intc_3 // 8",
      "defined_out": [
        "8",
        "array%data%5#1",
        "byte_len%0#0"
      ],
      "stack_out": [
        "array%data%5#1",
        "byte_len%0#0",
        "8"
      ]
    },
    "1271": {
      "op": "/",
      "defined_out": [
        "array%data%5#1",
        "len_%0#0"
      ],
      "stack_out": [
        "array%data%5#1",
        "len_%0#0"
      ]
    },
    "1272": {
      "op": "itob",
      "defined_out": [
        "array%data%5#1",
        "as_bytes%0#0"
      ],
      "stack_out": [
        "array%data%5#1",
        "as_bytes%0#0"
      ]
    },
    "1273": {
      "op": "extract 6 2",
      "defined_out": [
        "array%data%5#1",
        "len_16_bit%0#0"
      ],
      "stack_out": [
        "array%data%5#1",
        "len_16_bit%0#0"
      ]
    },
    "1276": {
      "op": "swap",
      "stack_out": [
        "len_16_bit%0#0",
        "array%data%5#1"
      ]
    },
    "1277": {
      "op": "concat",
      "defined_out": [
        "result#0"
      ],
      "stack_out": [
        "result#0"
      ]
    },
    "1278": {
      "retsub": true,
      "op": "retsub"
    },
    "1279": {
      "subroutine": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.deleteUserBox",
      "params": {
        "userAddress#0": "bytes"
      },
      "block": "deleteUserBox",
      "stack_in": [],
      "op": "proto 1 0"
    },
    "1282": {
      "op": "intc_0 // 0",
      "stack_out": [
        "userBox#0"
      ]
    },
    "1283": {
      "op": "dup",
      "defined_out": [
        "0"
      ],
      "stack_out": [
        "userBox#0",
        "0"
      ]
    },
    "1284": {
      "op": "bytec_2 // \"adminAddress\"",
      "defined_out": [
        "\"adminAddress\"",
        "0"
      ],
      "stack_out": [
        "userBox#0",
        "0",
        "\"adminAddress\""
      ]
    },
    "1285": {
      "op": "app_global_get_ex",
      "defined_out": [
        "adminAddr#0",
        "maybe_exists%0#0"
      ],
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "maybe_exists%0#0"
      ]
    },
    "1286": {
      "error": "check GlobalState exists",
      "op": "assert // check GlobalState exists",
      "stack_out": [
        "userBox#0",
        "adminAddr#0"
      ]
    },
    "1287": {
      "op": "txn Sender",
      "defined_out": [
        "adminAddr#0",
        "tmp%0#0"
      ],
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "tmp%0#0"
      ]
    },
    "1289": {
      "op": "frame_dig -1",
      "defined_out": [
        "adminAddr#0",
        "tmp%0#0",
        "userAddress#0 (copy)"
      ],
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "tmp%0#0",
        "userAddress#0 (copy)"
      ]
    },
    "1291": {
      "op": "==",
      "defined_out": [
        "adminAddr#0",
        "tmp%1#0"
      ],
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "tmp%1#0"
      ]
    },
    "1292": {
      "op": "bnz deleteUserBox_bool_true@2",
      "stack_out": [
        "userBox#0",
        "adminAddr#0"
      ]
    },
    "1295": {
      "op": "txn Sender",
      "defined_out": [
        "adminAddr#0",
        "tmp%2#0"
      ],
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "tmp%2#0"
      ]
    },
    "1297": {
      "op": "frame_dig 1",
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "tmp%2#0",
        "adminAddr#0"
      ]
    },
    "1299": {
      "op": "==",
      "defined_out": [
        "adminAddr#0",
        "tmp%3#0"
      ],
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "tmp%3#0"
      ]
    },
    "1300": {
      "op": "bz deleteUserBox_bool_false@3",
      "stack_out": [
        "userBox#0",
        "adminAddr#0"
      ]
    },
    "1303": {
      "block": "deleteUserBox_bool_true@2",
      "stack_in": [
        "userBox#0",
        "adminAddr#0"
      ],
      "op": "intc_1 // 1",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "or_result%0#0"
      ]
    },
    "1304": {
      "block": "deleteUserBox_bool_merge@4",
      "stack_in": [
        "userBox#0",
        "adminAddr#0",
        "or_result%0#0"
      ],
      "error": "Only box owner or admin can delete box",
      "op": "assert // Only box owner or admin can delete box",
      "defined_out": [],
      "stack_out": [
        "userBox#0",
        "adminAddr#0"
      ]
    },
    "1305": {
      "op": "frame_dig -1",
      "defined_out": [
        "userAddress#0 (copy)"
      ],
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "userAddress#0 (copy)"
      ]
    },
    "1307": {
      "callsub": "smart_contracts/staking/contract.algo.ts::ASAStakingContract.getUserStakeInfo",
      "op": "callsub getUserStakeInfo",
      "defined_out": [
        "stakeInfo#0"
      ],
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "stakeInfo#0"
      ]
    },
    "1310": {
      "op": "intc_0 // 0",
      "defined_out": [
        "0",
        "stakeInfo#0"
      ],
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "stakeInfo#0",
        "0"
      ]
    },
    "1311": {
      "op": "extract_uint64",
      "defined_out": [
        "tmp%5#0"
      ],
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "tmp%5#0"
      ]
    },
    "1312": {
      "op": "!",
      "defined_out": [
        "tmp%6#0"
      ],
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "tmp%6#0"
      ]
    },
    "1313": {
      "error": "User still has active stake",
      "op": "assert // User still has active stake",
      "stack_out": [
        "userBox#0",
        "adminAddr#0"
      ]
    },
    "1314": {
      "op": "bytec 8 // \"stakers\"",
      "defined_out": [
        "\"stakers\""
      ],
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "\"stakers\""
      ]
    },
    "1316": {
      "op": "frame_dig -1",
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "\"stakers\"",
        "userAddress#0 (copy)"
      ]
    },
    "1318": {
      "op": "concat",
      "defined_out": [
        "userBox#0"
      ],
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "userBox#0"
      ]
    },
    "1319": {
      "op": "dup",
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "userBox#0",
        "userBox#0"
      ]
    },
    "1320": {
      "op": "frame_bury 0",
      "defined_out": [
        "userBox#0"
      ],
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "userBox#0"
      ]
    },
    "1322": {
      "op": "box_len",
      "defined_out": [
        "maybe_exists%1#0",
        "maybe_value%1#0",
        "userBox#0"
      ],
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "maybe_value%1#0",
        "maybe_exists%1#0"
      ]
    },
    "1323": {
      "op": "bury 1",
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "maybe_exists%1#0"
      ]
    },
    "1325": {
      "op": "bz deleteUserBox_after_if_else@6",
      "stack_out": [
        "userBox#0",
        "adminAddr#0"
      ]
    },
    "1328": {
      "op": "frame_dig 0",
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "userBox#0"
      ]
    },
    "1330": {
      "op": "box_del",
      "defined_out": [
        "userBox#0",
        "{box_del}"
      ],
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "{box_del}"
      ]
    },
    "1331": {
      "op": "pop",
      "stack_out": [
        "userBox#0",
        "adminAddr#0"
      ]
    },
    "1332": {
      "block": "deleteUserBox_after_if_else@6",
      "stack_in": [
        "userBox#0",
        "adminAddr#0"
      ],
      "retsub": true,
      "op": "retsub"
    },
    "1333": {
      "block": "deleteUserBox_bool_false@3",
      "stack_in": [
        "userBox#0",
        "adminAddr#0"
      ],
      "op": "intc_0 // 0",
      "defined_out": [
        "or_result%0#0"
      ],
      "stack_out": [
        "userBox#0",
        "adminAddr#0",
        "or_result%0#0"
      ]
    },
    "1334": {
      "op": "b deleteUserBox_bool_merge@4"
    }
  }
}